
TP_RESEAUX_3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08009020  08009020  00019020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094c4  080094c4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080094c4  080094c4  000194c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094cc  080094cc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094cc  080094cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094d0  080094d0  000194d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080094d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d4  080096a8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080096a8  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010045  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002963  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00032bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4f  00000000  00000000  00033940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023447  00000000  00000000  0003438f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001259d  00000000  00000000  000577d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf9f4  00000000  00000000  00069d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004938  00000000  00000000  00139768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0013e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009008 	.word	0x08009008

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009008 	.word	0x08009008

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9bb 	b.w	8000fa0 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <bmp280_init>:
#define BMP280_REG_CALIB       0x88
#define BMP280_REG_HUM_CALIB   0x88

#define BMP280_RESET_VALUE     0xB6

int bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fb2:	2b76      	cmp	r3, #118	; 0x76
 8000fb4:	d005      	beq.n	8000fc2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fba:	2b77      	cmp	r3, #119	; 0x77
 8000fbc:	d001      	beq.n	8000fc2 <bmp280_init+0x1e>

		return 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e093      	b.n	80010ea <bmp280_init+0x146>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000fc8:	2301      	movs	r3, #1
 8000fca:	21d0      	movs	r1, #208	; 0xd0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f890 	bl	80010f2 <read_data>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <bmp280_init+0x38>
		return 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e086      	b.n	80010ea <bmp280_init+0x146>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000fe2:	2b58      	cmp	r3, #88	; 0x58
 8000fe4:	d006      	beq.n	8000ff4 <bmp280_init+0x50>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000fec:	2b60      	cmp	r3, #96	; 0x60
 8000fee:	d001      	beq.n	8000ff4 <bmp280_init+0x50>

		return 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e07a      	b.n	80010ea <bmp280_init+0x146>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000ff4:	22b6      	movs	r2, #182	; 0xb6
 8000ff6:	21e0      	movs	r1, #224	; 0xe0
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f9cf 	bl	800139c <write_register8>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <bmp280_init+0x64>
		return 0;
 8001004:	2300      	movs	r3, #0
 8001006:	e070      	b.n	80010ea <bmp280_init+0x146>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001008:	f107 020c 	add.w	r2, r7, #12
 800100c:	2301      	movs	r3, #1
 800100e:	21f3      	movs	r1, #243	; 0xf3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f86e 	bl	80010f2 <read_data>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f5      	bne.n	8001008 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800101c:	7b3b      	ldrb	r3, [r7, #12]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f88b 	bl	8001142 <read_calibration_data>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d000      	beq.n	8001034 <bmp280_init+0x90>
 8001032:	e001      	b.n	8001038 <bmp280_init+0x94>
		return 0;
 8001034:	2300      	movs	r3, #0
 8001036:	e058      	b.n	80010ea <bmp280_init+0x146>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800103e:	2b60      	cmp	r3, #96	; 0x60
 8001040:	d107      	bne.n	8001052 <bmp280_init+0xae>
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f8ff 	bl	8001246 <read_hum_calibration_data>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <bmp280_init+0xae>
		return 0;
 800104e:	2300      	movs	r3, #0
 8001050:	e04b      	b.n	80010ea <bmp280_init+0x146>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	015b      	lsls	r3, r3, #5
 8001058:	b25a      	sxtb	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	461a      	mov	r2, r3
 800106c:	21f5      	movs	r1, #245	; 0xf5
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f994 	bl	800139c <write_register8>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <bmp280_init+0xda>
		return 0;
 800107a:	2300      	movs	r3, #0
 800107c:	e035      	b.n	80010ea <bmp280_init+0x146>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d102      	bne.n	800108c <bmp280_init+0xe8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	78db      	ldrb	r3, [r3, #3]
 8001090:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001092:	b25a      	sxtb	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	789b      	ldrb	r3, [r3, #2]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	b25b      	sxtb	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80010aa:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80010b2:	2b60      	cmp	r3, #96	; 0x60
 80010b4:	d10d      	bne.n	80010d2 <bmp280_init+0x12e>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	791b      	ldrb	r3, [r3, #4]
 80010ba:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	461a      	mov	r2, r3
 80010c0:	21f2      	movs	r1, #242	; 0xf2
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f96a 	bl	800139c <write_register8>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <bmp280_init+0x12e>
			return 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e00b      	b.n	80010ea <bmp280_init+0x146>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	461a      	mov	r2, r3
 80010d6:	21f4      	movs	r1, #244	; 0xf4
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f95f 	bl	800139c <write_register8>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <bmp280_init+0x144>
		return 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e000      	b.n	80010ea <bmp280_init+0x146>
	}

	return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <read_data>:

int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,uint8_t len)
{
 80010f2:	b590      	push	{r4, r7, lr}
 80010f4:	b08b      	sub	sp, #44	; 0x2c
 80010f6:	af04      	add	r7, sp, #16
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	461a      	mov	r2, r3
 80010fe:	460b      	mov	r3, r1
 8001100:	72fb      	strb	r3, [r7, #11]
 8001102:	4613      	mov	r3, r2
 8001104:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	b29a      	uxth	r2, r3
 8001116:	7abb      	ldrb	r3, [r7, #10]
 8001118:	b29b      	uxth	r3, r3
 800111a:	8af9      	ldrh	r1, [r7, #22]
 800111c:	f241 3488 	movw	r4, #5000	; 0x1388
 8001120:	9402      	str	r4, [sp, #8]
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	f002 fc33 	bl	8003994 <HAL_I2C_Mem_Read>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <read_data+0x46>
		return 0;
 8001134:	2300      	movs	r3, #0
 8001136:	e000      	b.n	800113a <read_data+0x48>
	else
		return 1;
 8001138:	2301      	movs	r3, #1

}
 800113a:	4618      	mov	r0, r3
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}

08001142 <read_calibration_data>:
int read_calibration_data(BMP280_HandleTypedef *dev)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	461a      	mov	r2, r3
 800114e:	2188      	movs	r1, #136	; 0x88
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f8f4 	bl	800133e <read_register16>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d06f      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3302      	adds	r3, #2
 8001160:	461a      	mov	r2, r3
 8001162:	218a      	movs	r1, #138	; 0x8a
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f8ea 	bl	800133e <read_register16>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d065      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3304      	adds	r3, #4
 8001174:	461a      	mov	r2, r3
 8001176:	218c      	movs	r1, #140	; 0x8c
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f8e0 	bl	800133e <read_register16>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d05b      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3306      	adds	r3, #6
 8001188:	461a      	mov	r2, r3
 800118a:	218e      	movs	r1, #142	; 0x8e
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f8d6 	bl	800133e <read_register16>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d051      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3308      	adds	r3, #8
 800119c:	461a      	mov	r2, r3
 800119e:	2190      	movs	r1, #144	; 0x90
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f8cc 	bl	800133e <read_register16>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d047      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	330a      	adds	r3, #10
 80011b0:	461a      	mov	r2, r3
 80011b2:	2192      	movs	r1, #146	; 0x92
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f8c2 	bl	800133e <read_register16>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d03d      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	330c      	adds	r3, #12
 80011c4:	461a      	mov	r2, r3
 80011c6:	2194      	movs	r1, #148	; 0x94
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f8b8 	bl	800133e <read_register16>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d033      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	330e      	adds	r3, #14
 80011d8:	461a      	mov	r2, r3
 80011da:	2196      	movs	r1, #150	; 0x96
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f8ae 	bl	800133e <read_register16>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d029      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3310      	adds	r3, #16
 80011ec:	461a      	mov	r2, r3
 80011ee:	2198      	movs	r1, #152	; 0x98
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8a4 	bl	800133e <read_register16>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01f      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3312      	adds	r3, #18
 8001200:	461a      	mov	r2, r3
 8001202:	219a      	movs	r1, #154	; 0x9a
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f89a 	bl	800133e <read_register16>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3314      	adds	r3, #20
 8001214:	461a      	mov	r2, r3
 8001216:	219c      	movs	r1, #156	; 0x9c
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f890 	bl	800133e <read_register16>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001228:	461a      	mov	r2, r3
 800122a:	219e      	movs	r1, #158	; 0x9e
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f886 	bl	800133e <read_register16>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <read_calibration_data+0xfa>

		return 1;
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <read_calibration_data+0xfc>
	}

	return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <read_hum_calibration_data>:

int read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f103 0218 	add.w	r2, r3, #24
 8001254:	2301      	movs	r3, #1
 8001256:	21a1      	movs	r1, #161	; 0xa1
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff4a 	bl	80010f2 <read_data>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d14b      	bne.n	80012fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	331a      	adds	r3, #26
 8001268:	461a      	mov	r2, r3
 800126a:	21e1      	movs	r1, #225	; 0xe1
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f866 	bl	800133e <read_register16>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d041      	beq.n	80012fc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f103 021c 	add.w	r2, r3, #28
 800127e:	2301      	movs	r3, #1
 8001280:	21e3      	movs	r1, #227	; 0xe3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff35 	bl	80010f2 <read_data>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d136      	bne.n	80012fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800128e:	f107 030e 	add.w	r3, r7, #14
 8001292:	461a      	mov	r2, r3
 8001294:	21e4      	movs	r1, #228	; 0xe4
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f851 	bl	800133e <read_register16>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d02c      	beq.n	80012fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	461a      	mov	r2, r3
 80012a8:	21e5      	movs	r1, #229	; 0xe5
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f847 	bl	800133e <read_register16>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d022      	beq.n	80012fc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80012bc:	2301      	movs	r3, #1
 80012be:	21e7      	movs	r1, #231	; 0xe7
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff16 	bl	80010f2 <read_data>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d117      	bne.n	80012fc <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	121b      	asrs	r3, r3, #8
 80012dc:	b21b      	sxth	r3, r3
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	841a      	strh	r2, [r3, #32]

		return 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <read_hum_calibration_data+0xb8>
	}

	return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <bmp280_init_default_params>:

void bmp280_init_default_params(bmp280_params_t *params)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2203      	movs	r2, #3
 8001312:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2203      	movs	r2, #3
 8001330:	715a      	strb	r2, [r3, #5]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <read_register16>:

int read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b08a      	sub	sp, #40	; 0x28
 8001342:	af04      	add	r7, sp, #16
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	460b      	mov	r3, r1
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	b29a      	uxth	r2, r3
 800135c:	8af9      	ldrh	r1, [r7, #22]
 800135e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2302      	movs	r3, #2
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	f002 fb10 	bl	8003994 <HAL_I2C_Mem_Read>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10b      	bne.n	8001392 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800137a:	7d7b      	ldrb	r3, [r7, #21]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7d3b      	ldrb	r3, [r7, #20]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	b29a      	uxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	801a      	strh	r2, [r3, #0]
		return 1;
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <read_register16+0x56>
	} else
		return 0;
 8001392:	2300      	movs	r3, #0

}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <write_register8>:
int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
 80013a8:	4613      	mov	r3, r2
 80013aa:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	89f9      	ldrh	r1, [r7, #14]
 80013be:	f242 7310 	movw	r3, #10000	; 0x2710
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	1cbb      	adds	r3, r7, #2
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	f002 f9e7 	bl	80037a0 <HAL_I2C_Mem_Write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <write_register8+0x40>
		return 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	e000      	b.n	80013de <write_register8+0x42>
	else
		return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <bmp280_read_fixed>:
		}else{
			return ERROR;
		}
	}
}
int bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,uint32_t *humidity) {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b08c      	sub	sp, #48	; 0x30
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013fa:	2b60      	cmp	r3, #96	; 0x60
 80013fc:	d007      	beq.n	800140e <bmp280_read_fixed+0x28>
		if (humidity)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <bmp280_read_fixed+0x32>
 8001414:	2308      	movs	r3, #8
 8001416:	e000      	b.n	800141a <bmp280_read_fixed+0x34>
 8001418:	2306      	movs	r3, #6
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f107 0218 	add.w	r2, r7, #24
 8001424:	21f7      	movs	r1, #247	; 0xf7
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff fe63 	bl	80010f2 <read_data>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <bmp280_read_fixed+0x50>
		return 0;
 8001432:	2300      	movs	r3, #0
 8001434:	e038      	b.n	80014a8 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001436:	7e3b      	ldrb	r3, [r7, #24]
 8001438:	031a      	lsls	r2, r3, #12
 800143a:	7e7b      	ldrb	r3, [r7, #25]
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4313      	orrs	r3, r2
 8001440:	7eba      	ldrb	r2, [r7, #26]
 8001442:	0912      	lsrs	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	4313      	orrs	r3, r2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	031a      	lsls	r2, r3, #12
 800144e:	7f3b      	ldrb	r3, [r7, #28]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	4313      	orrs	r3, r2
 8001454:	7f7a      	ldrb	r2, [r7, #29]
 8001456:	0912      	lsrs	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	4313      	orrs	r3, r2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	461a      	mov	r2, r3
 8001464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f86e 	bl	8001548 <compensate_temperature>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	461a      	mov	r2, r3
 8001476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 f89e 	bl	80015ba <compensate_pressure>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00d      	beq.n	80014a6 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800148a:	7fbb      	ldrb	r3, [r7, #30]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	7ffa      	ldrb	r2, [r7, #31]
 8001490:	4313      	orrs	r3, r2
 8001492:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	461a      	mov	r2, r3
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fb4b 	bl	8001b36 <compensate_humidity>
 80014a0:	4602      	mov	r2, r0
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	601a      	str	r2, [r3, #0]
	}

	return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <bmp280_read_float>:

int bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,float *humidity)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,humidity ? &fixed_humidity : NULL))
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <bmp280_read_float+0x1a>
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	e000      	b.n	80014cc <bmp280_read_float+0x1c>
 80014ca:	2300      	movs	r3, #0
 80014cc:	f107 0218 	add.w	r2, r7, #24
 80014d0:	f107 011c 	add.w	r1, r7, #28
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff ff86 	bl	80013e6 <bmp280_read_fixed>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d028      	beq.n	8001532 <bmp280_read_float+0x82>
	{
		*temperature = (float) fixed_temperature / 100;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ea:	eddf 6a14 	vldr	s13, [pc, #80]	; 800153c <bmp280_read_float+0x8c>
 80014ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001502:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001540 <bmp280_read_float+0x90>
 8001506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001520:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001544 <bmp280_read_float+0x94>
 8001524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	edc3 7a00 	vstr	s15, [r3]
		return 1;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <bmp280_read_float+0x84>
	}

	return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	42c80000 	.word	0x42c80000
 8001540:	43800000 	.word	0x43800000
 8001544:	44800000 	.word	0x44800000

08001548 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	10da      	asrs	r2, r3, #3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800156a:	12db      	asrs	r3, r3, #11
 800156c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	111b      	asrs	r3, r3, #4
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	8812      	ldrh	r2, [r2, #0]
 8001576:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	1112      	asrs	r2, r2, #4
 800157c:	68f9      	ldr	r1, [r7, #12]
 800157e:	8809      	ldrh	r1, [r1, #0]
 8001580:	1a52      	subs	r2, r2, r1
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800158e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001592:	139b      	asrs	r3, r3, #14
 8001594:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	441a      	add	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3380      	adds	r3, #128	; 0x80
 80015ac:	121b      	asrs	r3, r3, #8
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80015ba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015be:	b0cc      	sub	sp, #304	; 0x130
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80015c6:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80015ca:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80015ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015d2:	17da      	asrs	r2, r3, #31
 80015d4:	461c      	mov	r4, r3
 80015d6:	4615      	mov	r5, r2
 80015d8:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015dc:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015e0:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80015e4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015ec:	fb03 f102 	mul.w	r1, r3, r2
 80015f0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	18ca      	adds	r2, r1, r3
 80015fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001602:	fba3 8903 	umull	r8, r9, r3, r3
 8001606:	eb02 0309 	add.w	r3, r2, r9
 800160a:	4699      	mov	r9, r3
 800160c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001610:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001614:	b21b      	sxth	r3, r3
 8001616:	17da      	asrs	r2, r3, #31
 8001618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800161c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001620:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001624:	4603      	mov	r3, r0
 8001626:	fb03 f209 	mul.w	r2, r3, r9
 800162a:	460b      	mov	r3, r1
 800162c:	fb08 f303 	mul.w	r3, r8, r3
 8001630:	4413      	add	r3, r2
 8001632:	4602      	mov	r2, r0
 8001634:	fba8 1202 	umull	r1, r2, r8, r2
 8001638:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800163c:	460a      	mov	r2, r1
 800163e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001646:	4413      	add	r3, r2
 8001648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800164c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001650:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001654:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800165c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001660:	b21b      	sxth	r3, r3
 8001662:	17da      	asrs	r2, r3, #31
 8001664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001668:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800166c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001670:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001674:	462a      	mov	r2, r5
 8001676:	fb02 f203 	mul.w	r2, r2, r3
 800167a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800167e:	4621      	mov	r1, r4
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	441a      	add	r2, r3
 8001686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800168a:	4621      	mov	r1, r4
 800168c:	fba3 1301 	umull	r1, r3, r3, r1
 8001690:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001694:	460b      	mov	r3, r1
 8001696:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800169a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800169e:	18d3      	adds	r3, r2, r3
 80016a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016a4:	f04f 0000 	mov.w	r0, #0
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80016b0:	462b      	mov	r3, r5
 80016b2:	0459      	lsls	r1, r3, #17
 80016b4:	4623      	mov	r3, r4
 80016b6:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80016ba:	4623      	mov	r3, r4
 80016bc:	0458      	lsls	r0, r3, #17
 80016be:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016c2:	1814      	adds	r4, r2, r0
 80016c4:	643c      	str	r4, [r7, #64]	; 0x40
 80016c6:	414b      	adcs	r3, r1
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
 80016ca:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016ce:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80016d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	17da      	asrs	r2, r3, #31
 80016de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016e2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016f2:	00d9      	lsls	r1, r3, #3
 80016f4:	2000      	movs	r0, #0
 80016f6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016fa:	1814      	adds	r4, r2, r0
 80016fc:	63bc      	str	r4, [r7, #56]	; 0x38
 80016fe:	414b      	adcs	r3, r1
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001702:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001706:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800170a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800170e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001712:	fb03 f102 	mul.w	r1, r3, r2
 8001716:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800171a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	18ca      	adds	r2, r1, r3
 8001724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001728:	fba3 1303 	umull	r1, r3, r3, r3
 800172c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001730:	460b      	mov	r3, r1
 8001732:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800173a:	18d3      	adds	r3, r2, r3
 800173c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001744:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001748:	b21b      	sxth	r3, r3
 800174a:	17da      	asrs	r2, r3, #31
 800174c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001750:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001754:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001758:	462b      	mov	r3, r5
 800175a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800175e:	4642      	mov	r2, r8
 8001760:	fb02 f203 	mul.w	r2, r2, r3
 8001764:	464b      	mov	r3, r9
 8001766:	4621      	mov	r1, r4
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	4622      	mov	r2, r4
 8001770:	4641      	mov	r1, r8
 8001772:	fba2 1201 	umull	r1, r2, r2, r1
 8001776:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800177a:	460a      	mov	r2, r1
 800177c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001780:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001784:	4413      	add	r3, r2
 8001786:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	f04f 0100 	mov.w	r1, #0
 8001792:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001796:	4623      	mov	r3, r4
 8001798:	0a18      	lsrs	r0, r3, #8
 800179a:	462b      	mov	r3, r5
 800179c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017a0:	462b      	mov	r3, r5
 80017a2:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80017a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	17da      	asrs	r2, r3, #31
 80017b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017b4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017bc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80017c0:	464a      	mov	r2, r9
 80017c2:	fb02 f203 	mul.w	r2, r2, r3
 80017c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017ca:	4644      	mov	r4, r8
 80017cc:	fb04 f303 	mul.w	r3, r4, r3
 80017d0:	441a      	add	r2, r3
 80017d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017d6:	4644      	mov	r4, r8
 80017d8:	fba3 4304 	umull	r4, r3, r3, r4
 80017dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017e0:	4623      	mov	r3, r4
 80017e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017ea:	18d3      	adds	r3, r2, r3
 80017ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017fc:	464c      	mov	r4, r9
 80017fe:	0323      	lsls	r3, r4, #12
 8001800:	4644      	mov	r4, r8
 8001802:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001806:	4644      	mov	r4, r8
 8001808:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800180a:	1884      	adds	r4, r0, r2
 800180c:	633c      	str	r4, [r7, #48]	; 0x30
 800180e:	eb41 0303 	adc.w	r3, r1, r3
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
 8001814:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001818:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800181c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001820:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001824:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001828:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800182c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001830:	88db      	ldrh	r3, [r3, #6]
 8001832:	b29b      	uxth	r3, r3
 8001834:	2200      	movs	r2, #0
 8001836:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800183a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800183e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001842:	462b      	mov	r3, r5
 8001844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001848:	4642      	mov	r2, r8
 800184a:	fb02 f203 	mul.w	r2, r2, r3
 800184e:	464b      	mov	r3, r9
 8001850:	4621      	mov	r1, r4
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	4622      	mov	r2, r4
 800185a:	4641      	mov	r1, r8
 800185c:	fba2 1201 	umull	r1, r2, r2, r1
 8001860:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001864:	460a      	mov	r2, r1
 8001866:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800186a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800186e:	4413      	add	r3, r2
 8001870:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001880:	4629      	mov	r1, r5
 8001882:	104a      	asrs	r2, r1, #1
 8001884:	4629      	mov	r1, r5
 8001886:	17cb      	asrs	r3, r1, #31
 8001888:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 800188c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001890:	4313      	orrs	r3, r2
 8001892:	d101      	bne.n	8001898 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001894:	2300      	movs	r3, #0
 8001896:	e148      	b.n	8001b2a <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001898:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018a0:	17da      	asrs	r2, r3, #31
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018a6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80018aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80018ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018b2:	105b      	asrs	r3, r3, #1
 80018b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018bc:	07db      	lsls	r3, r3, #31
 80018be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018c2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018c6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018ca:	4621      	mov	r1, r4
 80018cc:	1a89      	subs	r1, r1, r2
 80018ce:	67b9      	str	r1, [r7, #120]	; 0x78
 80018d0:	4629      	mov	r1, r5
 80018d2:	eb61 0303 	sbc.w	r3, r1, r3
 80018d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018d8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018dc:	4622      	mov	r2, r4
 80018de:	462b      	mov	r3, r5
 80018e0:	1891      	adds	r1, r2, r2
 80018e2:	6239      	str	r1, [r7, #32]
 80018e4:	415b      	adcs	r3, r3
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
 80018e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ec:	4621      	mov	r1, r4
 80018ee:	1851      	adds	r1, r2, r1
 80018f0:	61b9      	str	r1, [r7, #24]
 80018f2:	4629      	mov	r1, r5
 80018f4:	414b      	adcs	r3, r1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001904:	4649      	mov	r1, r9
 8001906:	018b      	lsls	r3, r1, #6
 8001908:	4641      	mov	r1, r8
 800190a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800190e:	4641      	mov	r1, r8
 8001910:	018a      	lsls	r2, r1, #6
 8001912:	4641      	mov	r1, r8
 8001914:	1889      	adds	r1, r1, r2
 8001916:	6139      	str	r1, [r7, #16]
 8001918:	4649      	mov	r1, r9
 800191a:	eb43 0101 	adc.w	r1, r3, r1
 800191e:	6179      	str	r1, [r7, #20]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800192c:	4649      	mov	r1, r9
 800192e:	008b      	lsls	r3, r1, #2
 8001930:	4641      	mov	r1, r8
 8001932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001936:	4641      	mov	r1, r8
 8001938:	008a      	lsls	r2, r1, #2
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	4603      	mov	r3, r0
 8001940:	4622      	mov	r2, r4
 8001942:	189b      	adds	r3, r3, r2
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	460b      	mov	r3, r1
 8001948:	462a      	mov	r2, r5
 800194a:	eb42 0303 	adc.w	r3, r2, r3
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800195c:	4649      	mov	r1, r9
 800195e:	008b      	lsls	r3, r1, #2
 8001960:	4641      	mov	r1, r8
 8001962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001966:	4641      	mov	r1, r8
 8001968:	008a      	lsls	r2, r1, #2
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	4603      	mov	r3, r0
 8001970:	4622      	mov	r2, r4
 8001972:	189b      	adds	r3, r3, r2
 8001974:	673b      	str	r3, [r7, #112]	; 0x70
 8001976:	462b      	mov	r3, r5
 8001978:	460a      	mov	r2, r1
 800197a:	eb42 0303 	adc.w	r3, r2, r3
 800197e:	677b      	str	r3, [r7, #116]	; 0x74
 8001980:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001984:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001988:	f7ff f93e 	bl	8000c08 <__aeabi_ldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001998:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800199c:	b21b      	sxth	r3, r3
 800199e:	17da      	asrs	r2, r3, #31
 80019a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80019a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019a4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	f04f 0100 	mov.w	r1, #0
 80019b0:	0b50      	lsrs	r0, r2, #13
 80019b2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019b6:	1359      	asrs	r1, r3, #13
 80019b8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019bc:	462b      	mov	r3, r5
 80019be:	fb00 f203 	mul.w	r2, r0, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	fb03 f301 	mul.w	r3, r3, r1
 80019c8:	4413      	add	r3, r2
 80019ca:	4622      	mov	r2, r4
 80019cc:	fba2 1200 	umull	r1, r2, r2, r0
 80019d0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019d4:	460a      	mov	r2, r1
 80019d6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019de:	4413      	add	r3, r2
 80019e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019e4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019e8:	f04f 0000 	mov.w	r0, #0
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	0b50      	lsrs	r0, r2, #13
 80019f2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019f6:	1359      	asrs	r1, r3, #13
 80019f8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019fc:	462b      	mov	r3, r5
 80019fe:	fb00 f203 	mul.w	r2, r0, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	fb03 f301 	mul.w	r3, r3, r1
 8001a08:	4413      	add	r3, r2
 8001a0a:	4622      	mov	r2, r4
 8001a0c:	fba2 1200 	umull	r1, r2, r2, r0
 8001a10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001a14:	460a      	mov	r2, r1
 8001a16:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a1a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a1e:	4413      	add	r3, r2
 8001a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a30:	4621      	mov	r1, r4
 8001a32:	0e4a      	lsrs	r2, r1, #25
 8001a34:	4629      	mov	r1, r5
 8001a36:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	164b      	asrs	r3, r1, #25
 8001a3e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a46:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	17da      	asrs	r2, r3, #31
 8001a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a50:	667a      	str	r2, [r7, #100]	; 0x64
 8001a52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a56:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a5a:	462a      	mov	r2, r5
 8001a5c:	fb02 f203 	mul.w	r2, r2, r3
 8001a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a64:	4621      	mov	r1, r4
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a70:	4621      	mov	r1, r4
 8001a72:	fba2 1201 	umull	r1, r2, r2, r1
 8001a76:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a80:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a84:	4413      	add	r3, r2
 8001a86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a96:	4621      	mov	r1, r4
 8001a98:	0cca      	lsrs	r2, r1, #19
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	14cb      	asrs	r3, r1, #19
 8001aa4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001aa8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001aac:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001ab0:	1884      	adds	r4, r0, r2
 8001ab2:	65bc      	str	r4, [r7, #88]	; 0x58
 8001ab4:	eb41 0303 	adc.w	r3, r1, r3
 8001ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001abe:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	1889      	adds	r1, r1, r2
 8001ac6:	6539      	str	r1, [r7, #80]	; 0x50
 8001ac8:	4629      	mov	r1, r5
 8001aca:	eb43 0101 	adc.w	r1, r3, r1
 8001ace:	6579      	str	r1, [r7, #84]	; 0x54
 8001ad0:	f04f 0000 	mov.w	r0, #0
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001adc:	4623      	mov	r3, r4
 8001ade:	0a18      	lsrs	r0, r3, #8
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ae6:	462b      	mov	r3, r5
 8001ae8:	1219      	asrs	r1, r3, #8
 8001aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001aee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	17da      	asrs	r2, r3, #31
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001af8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001b06:	464c      	mov	r4, r9
 8001b08:	0123      	lsls	r3, r4, #4
 8001b0a:	4644      	mov	r4, r8
 8001b0c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b10:	4644      	mov	r4, r8
 8001b12:	0122      	lsls	r2, r4, #4
 8001b14:	1884      	adds	r4, r0, r2
 8001b16:	603c      	str	r4, [r7, #0]
 8001b18:	eb41 0303 	adc.w	r3, r1, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b22:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001b26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b36 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001b36:	b480      	push	{r7}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b48:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	039a      	lsls	r2, r3, #14
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b54:	051b      	lsls	r3, r3, #20
 8001b56:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b6c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001b74:	4611      	mov	r1, r2
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	fb01 f202 	mul.w	r2, r1, r2
 8001b7c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	7f09      	ldrb	r1, [r1, #28]
 8001b82:	4608      	mov	r0, r1
 8001b84:	6979      	ldr	r1, [r7, #20]
 8001b86:	fb00 f101 	mul.w	r1, r0, r1
 8001b8a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b8c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b90:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b94:	1292      	asrs	r2, r2, #10
 8001b96:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001b9a:	68f9      	ldr	r1, [r7, #12]
 8001b9c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001ba0:	fb01 f202 	mul.w	r2, r1, r2
 8001ba4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001ba8:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	13db      	asrs	r3, r3, #15
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	13d2      	asrs	r2, r2, #15
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	7e12      	ldrb	r2, [r2, #24]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bd4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bdc:	bfa8      	it	ge
 8001bde:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001be2:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	131b      	asrs	r3, r3, #12
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bfa:	f000 fe8b 	bl	8002914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bfe:	f000 f8cd 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c02:	f000 f9f5 	bl	8001ff0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c06:	f000 f9c9 	bl	8001f9c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001c0a:	f000 f99d 	bl	8001f48 <MX_UART4_Init>
  MX_CAN1_Init();
 8001c0e:	f000 f937 	bl	8001e80 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001c12:	f000 f96b 	bl	8001eec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Prepare_Receive(&CMD_UART);
 8001c16:	4855      	ldr	r0, [pc, #340]	; (8001d6c <main+0x178>)
 8001c18:	f000 fd3a 	bl	8002690 <Prepare_Receive>
  bmp280_init_default_params(&bmp_params);
 8001c1c:	4854      	ldr	r0, [pc, #336]	; (8001d70 <main+0x17c>)
 8001c1e:	f7ff fb72 	bl	8001306 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_1;
 8001c22:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <main+0x180>)
 8001c24:	2277      	movs	r2, #119	; 0x77
 8001c26:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8001c28:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <main+0x180>)
 8001c2a:	4a53      	ldr	r2, [pc, #332]	; (8001d78 <main+0x184>)
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
  bmp280_init(&bmp280,&bmp_params);
 8001c2e:	4950      	ldr	r1, [pc, #320]	; (8001d70 <main+0x17c>)
 8001c30:	4850      	ldr	r0, [pc, #320]	; (8001d74 <main+0x180>)
 8001c32:	f7ff f9b7 	bl	8000fa4 <bmp280_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_CAN_Start (&hcan1);
 8001c36:	4851      	ldr	r0, [pc, #324]	; (8001d7c <main+0x188>)
 8001c38:	f000 fffd 	bl	8002c36 <HAL_CAN_Start>
  set_motor_angle(0);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f000 fa7f 	bl	8002140 <set_motor_angle>
  HAL_Delay(3000);
 8001c42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c46:	f000 fed7 	bl	80029f8 <HAL_Delay>
  reset_motor_angle();
 8001c4a:	f000 fa45 	bl	80020d8 <reset_motor_angle>


  while (1)
  {
	switch(CMD_UART)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <main+0x178>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d8fb      	bhi.n	8001c4e <main+0x5a>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <main+0x68>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001c4f 	.word	0x08001c4f
 8001c60:	08001c79 	.word	0x08001c79
 8001c64:	08001cb3 	.word	0x08001cb3
 8001c68:	08001ced 	.word	0x08001ced
 8001c6c:	08001cfb 	.word	0x08001cfb
 8001c70:	08001d17 	.word	0x08001d17
 8001c74:	08001d4d 	.word	0x08001d4d
	float Tempe = 0.0;
	float Press = 0.0;
	float Humid = 0.0;
	float Angle = 0.0;
	case GET_T:
		bmp280_read_float(&bmp280, &Tempe, &Press, &Humid);
 8001c78:	463b      	mov	r3, r7
 8001c7a:	1d3a      	adds	r2, r7, #4
 8001c7c:	f107 0108 	add.w	r1, r7, #8
 8001c80:	483c      	ldr	r0, [pc, #240]	; (8001d74 <main+0x180>)
 8001c82:	f7ff fc15 	bl	80014b0 <bmp280_read_float>
		printf("T = + %2.2f_C\r\n", Tempe);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc8d 	bl	80005a8 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	483b      	ldr	r0, [pc, #236]	; (8001d80 <main+0x18c>)
 8001c94:	f004 ffd8 	bl	8006c48 <iprintf>
		Print_RESULT_float(CMD_UART, Tempe);
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <main+0x178>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fd21 	bl	80026ec <Print_RESULT_float>
		CMD_UART = Null ; break;
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <main+0x178>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e05b      	b.n	8001d6a <main+0x176>

	case GET_P:
		bmp280_read_float(&bmp280, &Tempe, &Press, &Humid);
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	1d3a      	adds	r2, r7, #4
 8001cb6:	f107 0108 	add.w	r1, r7, #8
 8001cba:	482e      	ldr	r0, [pc, #184]	; (8001d74 <main+0x180>)
 8001cbc:	f7ff fbf8 	bl	80014b0 <bmp280_read_float>
		printf("P = %8.0f_Pa\r\n", Press);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc70 	bl	80005a8 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	482d      	ldr	r0, [pc, #180]	; (8001d84 <main+0x190>)
 8001cce:	f004 ffbb 	bl	8006c48 <iprintf>
		Print_RESULT_float(CMD_UART, Press);
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <main+0x178>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cda:	eeb0 0a67 	vmov.f32	s0, s15
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fd04 	bl	80026ec <Print_RESULT_float>
		CMD_UART = Null ; break;
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <main+0x178>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e03e      	b.n	8001d6a <main+0x176>

	case SET_K:
		printf("Set_K Cmd recognized \r\n");
 8001cec:	4826      	ldr	r0, [pc, #152]	; (8001d88 <main+0x194>)
 8001cee:	f005 f811 	bl	8006d14 <puts>
		CMD_UART = Null ; break;
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <main+0x178>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e037      	b.n	8001d6a <main+0x176>

	case GET_K:
		printf("Get_K Cmd recognized \r\n");
 8001cfa:	4824      	ldr	r0, [pc, #144]	; (8001d8c <main+0x198>)
 8001cfc:	f005 f80a 	bl	8006d14 <puts>
		Print_RESULT_float(CMD_UART, Null);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <main+0x178>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001d90 <main+0x19c>
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fcef 	bl	80026ec <Print_RESULT_float>
		CMD_UART = Null ; break;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <main+0x178>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e029      	b.n	8001d6a <main+0x176>

	case GET_A:
		Angle = (float)(get_motor_angle());
 8001d16:	f000 fa07 	bl	8002128 <get_motor_angle>
 8001d1a:	ee07 0a90 	vmov	s15, r0
 8001d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d22:	edc7 7a03 	vstr	s15, [r7, #12]
		printf("A = %3.0f_Pa\r\n", Angle);
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7fe fc3e 	bl	80005a8 <__aeabi_f2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4818      	ldr	r0, [pc, #96]	; (8001d94 <main+0x1a0>)
 8001d32:	f004 ff89 	bl	8006c48 <iprintf>
		Print_RESULT_float(CMD_UART, Angle);
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <main+0x178>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fcd4 	bl	80026ec <Print_RESULT_float>
		CMD_UART = Null ; break;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <main+0x178>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e00e      	b.n	8001d6a <main+0x176>

	case SET_A:
		printf("Set_A Cmd recognized \r\n");
 8001d4c:	4812      	ldr	r0, [pc, #72]	; (8001d98 <main+0x1a4>)
 8001d4e:	f004 ffe1 	bl	8006d14 <puts>
		Print_RESULT_float(CMD_UART,Null);
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <main+0x178>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001d90 <main+0x19c>
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fcc6 	bl	80026ec <Print_RESULT_float>
		CMD_UART = Null ; break;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <main+0x178>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	bf00      	nop
 8001d68:	e771      	b.n	8001c4e <main+0x5a>
	switch(CMD_UART)
 8001d6a:	e770      	b.n	8001c4e <main+0x5a>
 8001d6c:	2000032e 	.word	0x2000032e
 8001d70:	20000328 	.word	0x20000328
 8001d74:	200002f4 	.word	0x200002f4
 8001d78:	20000218 	.word	0x20000218
 8001d7c:	200001f0 	.word	0x200001f0
 8001d80:	08009020 	.word	0x08009020
 8001d84:	08009030 	.word	0x08009030
 8001d88:	08009040 	.word	0x08009040
 8001d8c:	08009058 	.word	0x08009058
 8001d90:	00000000 	.word	0x00000000
 8001d94:	08009070 	.word	0x08009070
 8001d98:	08009080 	.word	0x08009080

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	; 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	2234      	movs	r2, #52	; 0x34
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 f8c6 	bl	8006f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <SystemClock_Config+0xdc>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <SystemClock_Config+0xdc>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <SystemClock_Config+0xdc>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <SystemClock_Config+0xe0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <SystemClock_Config+0xe0>)
 8001de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <SystemClock_Config+0xe0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e00:	2310      	movs	r3, #16
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e04:	2302      	movs	r3, #2
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001e10:	23b4      	movs	r3, #180	; 0xb4
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e14:	2302      	movs	r3, #2
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fed1 	bl	8004bcc <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e30:	f000 f94c 	bl	80020cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e34:	f002 fb30 	bl	8004498 <HAL_PWREx_EnableOverDrive>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e3e:	f000 f945 	bl	80020cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e42:	230f      	movs	r3, #15
 8001e44:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e46:	2302      	movs	r3, #2
 8001e48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e58:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	2105      	movs	r1, #5
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fb69 	bl	8004538 <HAL_RCC_ClockConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e6c:	f000 f92e 	bl	80020cc <Error_Handler>
  }
}
 8001e70:	bf00      	nop
 8001e72:	3750      	adds	r7, #80	; 0x50
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000

08001e80 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e86:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <MX_CAN1_Init+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e8c:	2206      	movs	r2, #6
 8001e8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e9e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001ea2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ea6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eaa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ed2:	f000 fdb5 	bl	8002a40 <HAL_CAN_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001edc:	f000 f8f6 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200001f0 	.word	0x200001f0
 8001ee8:	40006400 	.word	0x40006400

08001eec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001ef2:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <MX_I2C1_Init+0x54>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001ef8:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <MX_I2C1_Init+0x58>)
 8001efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f2a:	f001 faf5 	bl	8003518 <HAL_I2C_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f34:	f000 f8ca 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000218 	.word	0x20000218
 8001f40:	40005400 	.word	0x40005400
 8001f44:	000186a0 	.word	0x000186a0

08001f48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <MX_UART4_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_UART4_Init+0x4c>)
 8001f80:	f003 f8c2 	bl	8005108 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f000 f89f 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000026c 	.word	0x2000026c
 8001f98:	40004c00 	.word	0x40004c00

08001f9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <MX_USART2_UART_Init+0x50>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	f003 f898 	bl	8005108 <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fde:	f000 f875 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200002b0 	.word	0x200002b0
 8001fec:	40004400 	.word	0x40004400

08001ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <MX_GPIO_Init+0xd0>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <MX_GPIO_Init+0xd0>)
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <MX_GPIO_Init+0xd0>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_GPIO_Init+0xd0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	2120      	movs	r1, #32
 800207a:	4812      	ldr	r0, [pc, #72]	; (80020c4 <MX_GPIO_Init+0xd4>)
 800207c:	f001 fa32 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002086:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800208a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	480c      	ldr	r0, [pc, #48]	; (80020c8 <MX_GPIO_Init+0xd8>)
 8002098:	f001 f890 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800209c:	2320      	movs	r3, #32
 800209e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_GPIO_Init+0xd4>)
 80020b4:	f001 f882 	bl	80031bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020800 	.word	0x40020800

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <Error_Handler+0x8>
	...

080020d8 <reset_motor_angle>:
extern CAN_HandleTypeDef hcan1;

int motor_angle = 0; // entre -180 et +180

void reset_motor_angle()
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
	uint32_t mailbox;
	CAN_TxHeaderTypeDef header;
	header.DLC 						= 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
	header.ExtId					= 0;//message ID extended
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
	header.IDE						= CAN_ID_STD; 	//Trame standard ou étendue
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
	header.RTR						= CAN_RTR_DATA; //Trame n'est pas remote
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
	header.StdId					= 0x62;			//Message ID
 80020ee:	2362      	movs	r3, #98	; 0x62
 80020f0:	607b      	str	r3, [r7, #4]
	header.TransmitGlobalTime		= DISABLE;		//Message ID étendu
 80020f2:	2300      	movs	r3, #0
 80020f4:	763b      	strb	r3, [r7, #24]
	if (HAL_CAN_AddTxMessage(&hcan1, &header, 0, &mailbox) != HAL_OK)
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	1d39      	adds	r1, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	4808      	ldr	r0, [pc, #32]	; (8002120 <reset_motor_angle+0x48>)
 8002100:	f000 fddd 	bl	8002cbe <HAL_CAN_AddTxMessage>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <reset_motor_angle+0x40>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800210a:	2201      	movs	r2, #1
 800210c:	2120      	movs	r1, #32
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <reset_motor_angle+0x4c>)
 8002110:	f001 f9e8 	bl	80034e4 <HAL_GPIO_WritePin>
		Error_Handler ();
 8002114:	f7ff ffda 	bl	80020cc <Error_Handler>
	}
}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200001f0 	.word	0x200001f0
 8002124:	40020000 	.word	0x40020000

08002128 <get_motor_angle>:

int get_motor_angle()
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
	return motor_angle;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <get_motor_angle+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000330 	.word	0x20000330

08002140 <set_motor_angle>:
int set_motor_angle(int angle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint32_t mailbox;
	CAN_TxHeaderTypeDef header;
	header.DLC 						= 2;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
	header.ExtId					= 0;//message ID extended
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
	header.IDE						= CAN_ID_STD; 	//Trame standard ou étendue
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
	header.RTR						= CAN_RTR_DATA; //Trame n'est pas remote
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
	header.StdId					= 0x61;			//Message ID
 8002158:	2361      	movs	r3, #97	; 0x61
 800215a:	60bb      	str	r3, [r7, #8]
	header.TransmitGlobalTime		= DISABLE;		//Message ID étendu
 800215c:	2300      	movs	r3, #0
 800215e:	773b      	strb	r3, [r7, #28]
	if ((angle>180)&&(angle<180))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2bb4      	cmp	r3, #180	; 0xb4
 8002164:	dd05      	ble.n	8002172 <set_motor_angle+0x32>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2bb3      	cmp	r3, #179	; 0xb3
 800216a:	dc02      	bgt.n	8002172 <set_motor_angle+0x32>
	{
		return -1;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
 8002170:	e02b      	b.n	80021ca <set_motor_angle+0x8a>
	}else{
		if(angle>=0)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <set_motor_angle+0x4e>
		{
			data[1]=1;//sens trigo
 8002178:	2301      	movs	r3, #1
 800217a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			data[0]=abs(angle);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	bfb8      	it	lt
 8002184:	425b      	neglt	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800218c:	e009      	b.n	80021a2 <set_motor_angle+0x62>
		}else{
			data[1]=0;//sens anti-trigo
 800218e:	2300      	movs	r3, #0
 8002190:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			data[0]=abs(angle);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	bfb8      	it	lt
 800219a:	425b      	neglt	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
		  if (HAL_CAN_AddTxMessage(&hcan1, &header, data, &mailbox) != HAL_OK)
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021aa:	f107 0108 	add.w	r1, r7, #8
 80021ae:	4809      	ldr	r0, [pc, #36]	; (80021d4 <set_motor_angle+0x94>)
 80021b0:	f000 fd85 	bl	8002cbe <HAL_CAN_AddTxMessage>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <set_motor_angle+0x88>
		  {
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80021ba:	2201      	movs	r2, #1
 80021bc:	2120      	movs	r1, #32
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <set_motor_angle+0x98>)
 80021c0:	f001 f990 	bl	80034e4 <HAL_GPIO_WritePin>
		     Error_Handler ();
 80021c4:	f7ff ff82 	bl	80020cc <Error_Handler>
		  }
		  return 0;
 80021c8:	2300      	movs	r3, #0
	}
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3728      	adds	r7, #40	; 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200001f0 	.word	0x200001f0
 80021d8:	40020000 	.word	0x40020000

080021dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_MspInit+0x4c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <HAL_MspInit+0x4c>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_MspInit+0x4c>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_MspInit+0x4c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_MspInit+0x4c>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_MspInit+0x4c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800221a:	2007      	movs	r0, #7
 800221c:	f000 fefa 	bl	8003014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800

0800222c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_CAN_MspInit+0x84>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d12c      	bne.n	80022a8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_CAN_MspInit+0x88>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_CAN_MspInit+0x88>)
 8002258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_CAN_MspInit+0x88>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_CAN_MspInit+0x88>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <HAL_CAN_MspInit+0x88>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_CAN_MspInit+0x88>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002286:	f44f 7340 	mov.w	r3, #768	; 0x300
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002298:	2309      	movs	r3, #9
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <HAL_CAN_MspInit+0x8c>)
 80022a4:	f000 ff8a 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40006400 	.word	0x40006400
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020400 	.word	0x40020400

080022bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_I2C_MspInit+0x84>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d12b      	bne.n	8002336 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_I2C_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_I2C_MspInit+0x88>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_I2C_MspInit+0x88>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022fa:	23c0      	movs	r3, #192	; 0xc0
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fe:	2312      	movs	r3, #18
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800230a:	2304      	movs	r3, #4
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <HAL_I2C_MspInit+0x8c>)
 8002316:	f000 ff51 	bl	80031bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_I2C_MspInit+0x88>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <HAL_I2C_MspInit+0x88>)
 8002324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_I2C_MspInit+0x88>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40005400 	.word	0x40005400
 8002344:	40023800 	.word	0x40023800
 8002348:	40020400 	.word	0x40020400

0800234c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a36      	ldr	r2, [pc, #216]	; (8002444 <HAL_UART_MspInit+0xf8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d134      	bne.n	80023d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	4b35      	ldr	r3, [pc, #212]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a34      	ldr	r2, [pc, #208]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b32      	ldr	r3, [pc, #200]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_UART_MspInit+0xfc>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023a6:	2303      	movs	r3, #3
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023b6:	2308      	movs	r3, #8
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	4822      	ldr	r0, [pc, #136]	; (800244c <HAL_UART_MspInit+0x100>)
 80023c2:	f000 fefb 	bl	80031bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2034      	movs	r0, #52	; 0x34
 80023cc:	f000 fe2d 	bl	800302a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80023d0:	2034      	movs	r0, #52	; 0x34
 80023d2:	f000 fe46 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023d6:	e030      	b.n	800243a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_UART_MspInit+0x104>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d12b      	bne.n	800243a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a10      	ldr	r2, [pc, #64]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800241a:	230c      	movs	r3, #12
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242a:	2307      	movs	r3, #7
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <HAL_UART_MspInit+0x100>)
 8002436:	f000 fec1 	bl	80031bc <HAL_GPIO_Init>
}
 800243a:	bf00      	nop
 800243c:	3730      	adds	r7, #48	; 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40004c00 	.word	0x40004c00
 8002448:	40023800 	.word	0x40023800
 800244c:	40020000 	.word	0x40020000
 8002450:	40004400 	.word	0x40004400

08002454 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800245c:	1d39      	adds	r1, r7, #4
 800245e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002462:	2201      	movs	r2, #1
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <__io_putchar+0x20>)
 8002466:	f002 fe9c 	bl	80051a2 <HAL_UART_Transmit>

  return ch;
 800246a:	687b      	ldr	r3, [r7, #4]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200002b0 	.word	0x200002b0

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800247c:	e7fe      	b.n	800247c <NMI_Handler+0x4>

0800247e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <UsageFault_Handler+0x4>

08002496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c4:	f000 fa78 	bl	80029b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <UART4_IRQHandler+0x10>)
 80024d2:	f002 ff29 	bl	8005328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000026c 	.word	0x2000026c

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fa:	f004 fd71 	bl	8006fe0 <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
  return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002522:	e7fe      	b.n	8002522 <_exit+0x12>

08002524 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e00a      	b.n	800254c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002536:	f3af 8000 	nop.w
 800253a:	4601      	mov	r1, r0
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	b2ca      	uxtb	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	dbf0      	blt.n	8002536 <_read+0x12>
  }

  return len;
 8002554:	687b      	ldr	r3, [r7, #4]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e009      	b.n	8002584 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff6b 	bl	8002454 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	dbf1      	blt.n	8002570 <_write+0x12>
  }
  return len;
 800258c:	687b      	ldr	r3, [r7, #4]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <_close>:

int _close(int file)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025be:	605a      	str	r2, [r3, #4]
  return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_isatty>:

int _isatty(int file)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f004 fcd6 	bl	8006fe0 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20020000 	.word	0x20020000
 8002660:	00000400 	.word	0x00000400
 8002664:	20000334 	.word	0x20000334
 8002668:	200004d8 	.word	0x200004d8

0800266c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <Prepare_Receive>:
uint8_t uartTxBuffer[UART_TX_BUFFER_SIZE];

enum CMD_type *pointerCMD = Null;

void Prepare_Receive(enum CMD_type *pCMD)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart4, RxBuff, RX_BUFF_SIZE);
 8002698:	2206      	movs	r2, #6
 800269a:	490e      	ldr	r1, [pc, #56]	; (80026d4 <Prepare_Receive+0x44>)
 800269c:	480e      	ldr	r0, [pc, #56]	; (80026d8 <Prepare_Receive+0x48>)
 800269e:	f002 fe12 	bl	80052c6 <HAL_UART_Receive_IT>
	pointerCMD = pCMD;
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <Prepare_Receive+0x4c>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6013      	str	r3, [r2, #0]
	int uartTxStringLength = snprintf((char *)uartTxBuffer,UART_TX_BUFFER_SIZE, "Ready\r\n");
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <Prepare_Receive+0x50>)
 80026aa:	2140      	movs	r1, #64	; 0x40
 80026ac:	480d      	ldr	r0, [pc, #52]	; (80026e4 <Prepare_Receive+0x54>)
 80026ae:	f004 fb39 	bl	8006d24 <sniprintf>
 80026b2:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart4, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	4909      	ldr	r1, [pc, #36]	; (80026e4 <Prepare_Receive+0x54>)
 80026be:	4806      	ldr	r0, [pc, #24]	; (80026d8 <Prepare_Receive+0x48>)
 80026c0:	f002 fd6f 	bl	80051a2 <HAL_UART_Transmit>
	printf("Ready\r\n");
 80026c4:	4808      	ldr	r0, [pc, #32]	; (80026e8 <Prepare_Receive+0x58>)
 80026c6:	f004 fb25 	bl	8006d14 <puts>
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000338 	.word	0x20000338
 80026d8:	2000026c 	.word	0x2000026c
 80026dc:	20000380 	.word	0x20000380
 80026e0:	08009098 	.word	0x08009098
 80026e4:	20000340 	.word	0x20000340
 80026e8:	080090a0 	.word	0x080090a0

080026ec <Print_RESULT_float>:

void Print_RESULT_float(enum CMD_type CMD, float val)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	4603      	mov	r3, r0
 80026f4:	ed87 0a00 	vstr	s0, [r7]
 80026f8:	71fb      	strb	r3, [r7, #7]
	switch(CMD)
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d85d      	bhi.n	80027be <Print_RESULT_float+0xd2>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <Print_RESULT_float+0x1c>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	0800271d 	.word	0x0800271d
 800270c:	08002749 	.word	0x08002749
 8002710:	080027bf 	.word	0x080027bf
 8002714:	080027a1 	.word	0x080027a1
 8002718:	08002775 	.word	0x08002775
	{
	int uartTxStringLength = 0;
	case GET_T:
		uartTxStringLength = snprintf((char *)uartTxBuffer,UART_TX_BUFFER_SIZE, "T = + %2.2f_C\r\n", val);
 800271c:	6838      	ldr	r0, [r7, #0]
 800271e:	f7fd ff43 	bl	80005a8 <__aeabi_f2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	e9cd 2300 	strd	r2, r3, [sp]
 800272a:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <Print_RESULT_float+0xdc>)
 800272c:	2140      	movs	r1, #64	; 0x40
 800272e:	4827      	ldr	r0, [pc, #156]	; (80027cc <Print_RESULT_float+0xe0>)
 8002730:	f004 faf8 	bl	8006d24 <sniprintf>
 8002734:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart4, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	b29a      	uxth	r2, r3
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	4923      	ldr	r1, [pc, #140]	; (80027cc <Print_RESULT_float+0xe0>)
 8002740:	4823      	ldr	r0, [pc, #140]	; (80027d0 <Print_RESULT_float+0xe4>)
 8002742:	f002 fd2e 	bl	80051a2 <HAL_UART_Transmit>
		break;
 8002746:	e03a      	b.n	80027be <Print_RESULT_float+0xd2>
	case GET_P:
		uartTxStringLength = snprintf((char *)uartTxBuffer,UART_TX_BUFFER_SIZE, "T = +%8.2f_Pa\r\n", val);
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f7fd ff2d 	bl	80005a8 <__aeabi_f2d>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	e9cd 2300 	strd	r2, r3, [sp]
 8002756:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <Print_RESULT_float+0xe8>)
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	481c      	ldr	r0, [pc, #112]	; (80027cc <Print_RESULT_float+0xe0>)
 800275c:	f004 fae2 	bl	8006d24 <sniprintf>
 8002760:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart4, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	b29a      	uxth	r2, r3
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	4918      	ldr	r1, [pc, #96]	; (80027cc <Print_RESULT_float+0xe0>)
 800276c:	4818      	ldr	r0, [pc, #96]	; (80027d0 <Print_RESULT_float+0xe4>)
 800276e:	f002 fd18 	bl	80051a2 <HAL_UART_Transmit>
		break;
 8002772:	e024      	b.n	80027be <Print_RESULT_float+0xd2>
	case GET_A:
		uartTxStringLength = snprintf((char *)uartTxBuffer,UART_TX_BUFFER_SIZE, "A = %3.0f_Degree\r\n", val);
 8002774:	6838      	ldr	r0, [r7, #0]
 8002776:	f7fd ff17 	bl	80005a8 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	e9cd 2300 	strd	r2, r3, [sp]
 8002782:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <Print_RESULT_float+0xec>)
 8002784:	2140      	movs	r1, #64	; 0x40
 8002786:	4811      	ldr	r0, [pc, #68]	; (80027cc <Print_RESULT_float+0xe0>)
 8002788:	f004 facc 	bl	8006d24 <sniprintf>
 800278c:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart4, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	b29a      	uxth	r2, r3
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	490d      	ldr	r1, [pc, #52]	; (80027cc <Print_RESULT_float+0xe0>)
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <Print_RESULT_float+0xe4>)
 800279a:	f002 fd02 	bl	80051a2 <HAL_UART_Transmit>
		break;
 800279e:	e00e      	b.n	80027be <Print_RESULT_float+0xd2>
	case GET_K:
		uartTxStringLength = snprintf((char *)uartTxBuffer,UART_TX_BUFFER_SIZE, "GET_K Cmd is good\r\n");
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <Print_RESULT_float+0xf0>)
 80027a2:	2140      	movs	r1, #64	; 0x40
 80027a4:	4809      	ldr	r0, [pc, #36]	; (80027cc <Print_RESULT_float+0xe0>)
 80027a6:	f004 fabd 	bl	8006d24 <sniprintf>
 80027aa:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart4, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	4905      	ldr	r1, [pc, #20]	; (80027cc <Print_RESULT_float+0xe0>)
 80027b6:	4806      	ldr	r0, [pc, #24]	; (80027d0 <Print_RESULT_float+0xe4>)
 80027b8:	f002 fcf3 	bl	80051a2 <HAL_UART_Transmit>
		break;
 80027bc:	bf00      	nop
	}
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	080090a8 	.word	0x080090a8
 80027cc:	20000340 	.word	0x20000340
 80027d0:	2000026c 	.word	0x2000026c
 80027d4:	080090b8 	.word	0x080090b8
 80027d8:	080090c8 	.word	0x080090c8
 80027dc:	080090dc 	.word	0x080090dc

080027e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

	if     ((strcmp(RxBuff, "GET_T\r"))==0) *pointerCMD = GET_T;
 80027e8:	492a      	ldr	r1, [pc, #168]	; (8002894 <HAL_UART_RxCpltCallback+0xb4>)
 80027ea:	482b      	ldr	r0, [pc, #172]	; (8002898 <HAL_UART_RxCpltCallback+0xb8>)
 80027ec:	f7fd fd10 	bl	8000210 <strcmp>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <HAL_UART_RxCpltCallback+0x20>
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_UART_RxCpltCallback+0xbc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e040      	b.n	8002882 <HAL_UART_RxCpltCallback+0xa2>
	else if((strcmp(RxBuff, "GET_P\r"))==0) *pointerCMD = GET_P;
 8002800:	4927      	ldr	r1, [pc, #156]	; (80028a0 <HAL_UART_RxCpltCallback+0xc0>)
 8002802:	4825      	ldr	r0, [pc, #148]	; (8002898 <HAL_UART_RxCpltCallback+0xb8>)
 8002804:	f7fd fd04 	bl	8000210 <strcmp>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d104      	bne.n	8002818 <HAL_UART_RxCpltCallback+0x38>
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_UART_RxCpltCallback+0xbc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e034      	b.n	8002882 <HAL_UART_RxCpltCallback+0xa2>
	else if((strcmp(RxBuff, "SET_K=" ))==0) *pointerCMD = SET_K;
 8002818:	4922      	ldr	r1, [pc, #136]	; (80028a4 <HAL_UART_RxCpltCallback+0xc4>)
 800281a:	481f      	ldr	r0, [pc, #124]	; (8002898 <HAL_UART_RxCpltCallback+0xb8>)
 800281c:	f7fd fcf8 	bl	8000210 <strcmp>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_UART_RxCpltCallback+0x50>
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_UART_RxCpltCallback+0xbc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2203      	movs	r2, #3
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e028      	b.n	8002882 <HAL_UART_RxCpltCallback+0xa2>
	else if((strcmp(RxBuff, "GET_K\r"))==0) *pointerCMD = GET_K;
 8002830:	491d      	ldr	r1, [pc, #116]	; (80028a8 <HAL_UART_RxCpltCallback+0xc8>)
 8002832:	4819      	ldr	r0, [pc, #100]	; (8002898 <HAL_UART_RxCpltCallback+0xb8>)
 8002834:	f7fd fcec 	bl	8000210 <strcmp>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_UART_RxCpltCallback+0x68>
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_UART_RxCpltCallback+0xbc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2204      	movs	r2, #4
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e01c      	b.n	8002882 <HAL_UART_RxCpltCallback+0xa2>
	else if((strcmp(RxBuff, "GET_A\r"))==0) *pointerCMD = GET_A;
 8002848:	4918      	ldr	r1, [pc, #96]	; (80028ac <HAL_UART_RxCpltCallback+0xcc>)
 800284a:	4813      	ldr	r0, [pc, #76]	; (8002898 <HAL_UART_RxCpltCallback+0xb8>)
 800284c:	f7fd fce0 	bl	8000210 <strcmp>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_UART_RxCpltCallback+0x80>
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_UART_RxCpltCallback+0xbc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2205      	movs	r2, #5
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e010      	b.n	8002882 <HAL_UART_RxCpltCallback+0xa2>
	else
	{
		int uartTxStringLength = snprintf((char *)uartTxBuffer,UART_TX_BUFFER_SIZE, "Cmd not found\r\n");
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <HAL_UART_RxCpltCallback+0xd0>)
 8002862:	2140      	movs	r1, #64	; 0x40
 8002864:	4813      	ldr	r0, [pc, #76]	; (80028b4 <HAL_UART_RxCpltCallback+0xd4>)
 8002866:	f004 fa5d 	bl	8006d24 <sniprintf>
 800286a:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart4, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	b29a      	uxth	r2, r3
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	490f      	ldr	r1, [pc, #60]	; (80028b4 <HAL_UART_RxCpltCallback+0xd4>)
 8002876:	4810      	ldr	r0, [pc, #64]	; (80028b8 <HAL_UART_RxCpltCallback+0xd8>)
 8002878:	f002 fc93 	bl	80051a2 <HAL_UART_Transmit>
		printf("Cmd not found\r\n");
 800287c:	480f      	ldr	r0, [pc, #60]	; (80028bc <HAL_UART_RxCpltCallback+0xdc>)
 800287e:	f004 fa49 	bl	8006d14 <puts>
	}

	HAL_UART_Receive_IT(&huart4, RxBuff, RX_BUFF_SIZE);
 8002882:	2206      	movs	r2, #6
 8002884:	4904      	ldr	r1, [pc, #16]	; (8002898 <HAL_UART_RxCpltCallback+0xb8>)
 8002886:	480c      	ldr	r0, [pc, #48]	; (80028b8 <HAL_UART_RxCpltCallback+0xd8>)
 8002888:	f002 fd1d 	bl	80052c6 <HAL_UART_Receive_IT>
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	080090f0 	.word	0x080090f0
 8002898:	20000338 	.word	0x20000338
 800289c:	20000380 	.word	0x20000380
 80028a0:	080090f8 	.word	0x080090f8
 80028a4:	08009100 	.word	0x08009100
 80028a8:	08009108 	.word	0x08009108
 80028ac:	08009110 	.word	0x08009110
 80028b0:	08009118 	.word	0x08009118
 80028b4:	20000340 	.word	0x20000340
 80028b8:	2000026c 	.word	0x2000026c
 80028bc:	08009128 	.word	0x08009128

080028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028c6:	490e      	ldr	r1, [pc, #56]	; (8002900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028c8:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028cc:	e002      	b.n	80028d4 <LoopCopyDataInit>

080028ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d2:	3304      	adds	r3, #4

080028d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d8:	d3f9      	bcc.n	80028ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028dc:	4c0b      	ldr	r4, [pc, #44]	; (800290c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e0:	e001      	b.n	80028e6 <LoopFillZerobss>

080028e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e4:	3204      	adds	r2, #4

080028e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e8:	d3fb      	bcc.n	80028e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028ea:	f7ff febf 	bl	800266c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ee:	f004 fb7d 	bl	8006fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f2:	f7ff f97f 	bl	8001bf4 <main>
  bx  lr    
 80028f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002900:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002904:	080094d4 	.word	0x080094d4
  ldr r2, =_sbss
 8002908:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800290c:	200004d4 	.word	0x200004d4

08002910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC_IRQHandler>
	...

08002914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <HAL_Init+0x40>)
 800291e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_Init+0x40>)
 800292a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800292e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_Init+0x40>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_Init+0x40>)
 8002936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 fb69 	bl	8003014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	2000      	movs	r0, #0
 8002944:	f000 f808 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f7ff fc48 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_InitTick+0x54>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_InitTick+0x58>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fb81 	bl	800307e <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f000 fb49 	bl	800302a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <HAL_InitTick+0x5c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000008 	.word	0x20000008
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_IncTick+0x20>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_IncTick+0x24>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <HAL_IncTick+0x24>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000008 	.word	0x20000008
 80029dc:	20000384 	.word	0x20000384

080029e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_GetTick+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000384 	.word	0x20000384

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff ffee 	bl	80029e0 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_Delay+0x44>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffde 	bl	80029e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000008 	.word	0x20000008

08002a40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0ed      	b.n	8002c2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fbe4 	bl	800222c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a74:	f7ff ffb4 	bl	80029e0 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a7a:	e012      	b.n	8002aa2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a7c:	f7ff ffb0 	bl	80029e0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b0a      	cmp	r3, #10
 8002a88:	d90b      	bls.n	8002aa2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2205      	movs	r2, #5
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0c5      	b.n	8002c2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0e5      	beq.n	8002a7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0202 	bic.w	r2, r2, #2
 8002abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac0:	f7ff ff8e 	bl	80029e0 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ac6:	e012      	b.n	8002aee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ac8:	f7ff ff8a 	bl	80029e0 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b0a      	cmp	r3, #10
 8002ad4:	d90b      	bls.n	8002aee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2205      	movs	r2, #5
 8002ae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e09f      	b.n	8002c2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e5      	bne.n	8002ac8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7e1b      	ldrb	r3, [r3, #24]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d108      	bne.n	8002b16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e007      	b.n	8002b26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7e5b      	ldrb	r3, [r3, #25]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d108      	bne.n	8002b40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e007      	b.n	8002b50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7e9b      	ldrb	r3, [r3, #26]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d108      	bne.n	8002b6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0220 	orr.w	r2, r2, #32
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e007      	b.n	8002b7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0220 	bic.w	r2, r2, #32
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7edb      	ldrb	r3, [r3, #27]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d108      	bne.n	8002b94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0210 	bic.w	r2, r2, #16
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e007      	b.n	8002ba4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0210 	orr.w	r2, r2, #16
 8002ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7f1b      	ldrb	r3, [r3, #28]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d108      	bne.n	8002bbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e007      	b.n	8002bce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0208 	bic.w	r2, r2, #8
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7f5b      	ldrb	r3, [r3, #29]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d108      	bne.n	8002be8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0204 	orr.w	r2, r2, #4
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e007      	b.n	8002bf8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0204 	bic.w	r2, r2, #4
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	ea42 0103 	orr.w	r1, r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d12e      	bne.n	8002ca8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c62:	f7ff febd 	bl	80029e0 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c68:	e012      	b.n	8002c90 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c6a:	f7ff feb9 	bl	80029e0 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b0a      	cmp	r3, #10
 8002c76:	d90b      	bls.n	8002c90 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2205      	movs	r2, #5
 8002c88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e012      	b.n	8002cb6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e006      	b.n	8002cb6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b089      	sub	sp, #36	; 0x24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cdc:	7ffb      	ldrb	r3, [r7, #31]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d003      	beq.n	8002cea <HAL_CAN_AddTxMessage+0x2c>
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	f040 80b8 	bne.w	8002e5a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a0 	beq.w	8002e4a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	0e1b      	lsrs	r3, r3, #24
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d907      	bls.n	8002d2a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e09e      	b.n	8002e68 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	6809      	ldr	r1, [r1, #0]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3318      	adds	r3, #24
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	440b      	add	r3, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e00f      	b.n	8002d78 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d62:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d6c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3318      	adds	r3, #24
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	440b      	add	r3, r1
 8002d76:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	3318      	adds	r3, #24
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	440b      	add	r3, r1
 8002d88:	3304      	adds	r3, #4
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	7d1b      	ldrb	r3, [r3, #20]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d111      	bne.n	8002db8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	4413      	add	r3, r2
 8002da0:	3304      	adds	r3, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	6811      	ldr	r1, [r2, #0]
 8002da8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3318      	adds	r3, #24
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	440b      	add	r3, r1
 8002db4:	3304      	adds	r3, #4
 8002db6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3307      	adds	r3, #7
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	061a      	lsls	r2, r3, #24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3306      	adds	r3, #6
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3305      	adds	r3, #5
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	3204      	adds	r2, #4
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	4610      	mov	r0, r2
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6811      	ldr	r1, [r2, #0]
 8002de0:	ea43 0200 	orr.w	r2, r3, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	440b      	add	r3, r1
 8002dea:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002dee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3303      	adds	r3, #3
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	061a      	lsls	r2, r3, #24
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3301      	adds	r3, #1
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	4610      	mov	r0, r2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	6811      	ldr	r1, [r2, #0]
 8002e16:	ea43 0200 	orr.w	r2, r3, r0
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3318      	adds	r3, #24
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	4413      	add	r3, r2
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	6811      	ldr	r1, [r2, #0]
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3318      	adds	r3, #24
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	440b      	add	r3, r1
 8002e44:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e00e      	b.n	8002e68 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e006      	b.n	8002e68 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3724      	adds	r7, #36	; 0x24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e90:	4013      	ands	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea6:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	60d3      	str	r3, [r2, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	f003 0307 	and.w	r3, r3, #7
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	db0b      	blt.n	8002f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	4907      	ldr	r1, [pc, #28]	; (8002f10 <__NVIC_EnableIRQ+0x38>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2001      	movs	r0, #1
 8002efa:	fa00 f202 	lsl.w	r2, r0, r2
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000e100 	.word	0xe000e100

08002f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db0a      	blt.n	8002f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	490c      	ldr	r1, [pc, #48]	; (8002f60 <__NVIC_SetPriority+0x4c>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	440b      	add	r3, r1
 8002f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f3c:	e00a      	b.n	8002f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4908      	ldr	r1, [pc, #32]	; (8002f64 <__NVIC_SetPriority+0x50>)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	440b      	add	r3, r1
 8002f52:	761a      	strb	r2, [r3, #24]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000e100 	.word	0xe000e100
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f1c3 0307 	rsb	r3, r3, #7
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	bf28      	it	cs
 8002f86:	2304      	movcs	r3, #4
 8002f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d902      	bls.n	8002f98 <NVIC_EncodePriority+0x30>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3b03      	subs	r3, #3
 8002f96:	e000      	b.n	8002f9a <NVIC_EncodePriority+0x32>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	401a      	ands	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43d9      	mvns	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	4313      	orrs	r3, r2
         );
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	; 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe0:	d301      	bcc.n	8002fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00f      	b.n	8003006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <SysTick_Config+0x40>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fee:	210f      	movs	r1, #15
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f7ff ff8e 	bl	8002f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <SysTick_Config+0x40>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffe:	4b04      	ldr	r3, [pc, #16]	; (8003010 <SysTick_Config+0x40>)
 8003000:	2207      	movs	r2, #7
 8003002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	e000e010 	.word	0xe000e010

08003014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff29 	bl	8002e74 <__NVIC_SetPriorityGrouping>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800303c:	f7ff ff3e 	bl	8002ebc <__NVIC_GetPriorityGrouping>
 8003040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f7ff ff8e 	bl	8002f68 <NVIC_EncodePriority>
 800304c:	4602      	mov	r2, r0
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff5d 	bl	8002f14 <__NVIC_SetPriority>
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff31 	bl	8002ed8 <__NVIC_EnableIRQ>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ffa2 	bl	8002fd0 <SysTick_Config>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff fc9c 	bl	80029e0 <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d008      	beq.n	80030c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e052      	b.n	800316e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0216 	bic.w	r2, r2, #22
 80030d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d103      	bne.n	80030f8 <HAL_DMA_Abort+0x62>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0208 	bic.w	r2, r2, #8
 8003106:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003118:	e013      	b.n	8003142 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800311a:	f7ff fc61 	bl	80029e0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b05      	cmp	r3, #5
 8003126:	d90c      	bls.n	8003142 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2203      	movs	r2, #3
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e015      	b.n	800316e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e4      	bne.n	800311a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	223f      	movs	r2, #63	; 0x3f
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d004      	beq.n	8003194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e00c      	b.n	80031ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2205      	movs	r2, #5
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e165      	b.n	80034a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f040 8154 	bne.w	800349e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d005      	beq.n	800320e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320a:	2b02      	cmp	r3, #2
 800320c:	d130      	bne.n	8003270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 0201 	and.w	r2, r3, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d017      	beq.n	80032ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d123      	bne.n	8003300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80ae 	beq.w	800349e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <HAL_GPIO_Init+0x300>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	4a5c      	ldr	r2, [pc, #368]	; (80034bc <HAL_GPIO_Init+0x300>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6453      	str	r3, [r2, #68]	; 0x44
 8003352:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <HAL_GPIO_Init+0x300>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335e:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4f      	ldr	r2, [pc, #316]	; (80034c4 <HAL_GPIO_Init+0x308>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d025      	beq.n	80033d6 <HAL_GPIO_Init+0x21a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4e      	ldr	r2, [pc, #312]	; (80034c8 <HAL_GPIO_Init+0x30c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01f      	beq.n	80033d2 <HAL_GPIO_Init+0x216>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4d      	ldr	r2, [pc, #308]	; (80034cc <HAL_GPIO_Init+0x310>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d019      	beq.n	80033ce <HAL_GPIO_Init+0x212>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4c      	ldr	r2, [pc, #304]	; (80034d0 <HAL_GPIO_Init+0x314>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_GPIO_Init+0x20e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_GPIO_Init+0x318>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00d      	beq.n	80033c6 <HAL_GPIO_Init+0x20a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <HAL_GPIO_Init+0x31c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <HAL_GPIO_Init+0x206>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a49      	ldr	r2, [pc, #292]	; (80034dc <HAL_GPIO_Init+0x320>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_GPIO_Init+0x202>
 80033ba:	2306      	movs	r3, #6
 80033bc:	e00c      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033be:	2307      	movs	r3, #7
 80033c0:	e00a      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033c2:	2305      	movs	r3, #5
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033c6:	2304      	movs	r3, #4
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	; (80034c0 <HAL_GPIO_Init+0x304>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f6:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_GPIO_Init+0x324>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341a:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_GPIO_Init+0x324>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344a:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_GPIO_Init+0x324>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003498:	4a11      	ldr	r2, [pc, #68]	; (80034e0 <HAL_GPIO_Init+0x324>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f ae96 	bls.w	80031d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40021400 	.word	0x40021400
 80034dc:	40021800 	.word	0x40021800
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003500:	e003      	b.n	800350a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e12b      	b.n	8003782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe febc 	bl	80022bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	; 0x24
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800357c:	f001 f8ce 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8003580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a81      	ldr	r2, [pc, #516]	; (800378c <HAL_I2C_Init+0x274>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d807      	bhi.n	800359c <HAL_I2C_Init+0x84>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a80      	ldr	r2, [pc, #512]	; (8003790 <HAL_I2C_Init+0x278>)
 8003590:	4293      	cmp	r3, r2
 8003592:	bf94      	ite	ls
 8003594:	2301      	movls	r3, #1
 8003596:	2300      	movhi	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e006      	b.n	80035aa <HAL_I2C_Init+0x92>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a7d      	ldr	r2, [pc, #500]	; (8003794 <HAL_I2C_Init+0x27c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	bf94      	ite	ls
 80035a4:	2301      	movls	r3, #1
 80035a6:	2300      	movhi	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0e7      	b.n	8003782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a78      	ldr	r2, [pc, #480]	; (8003798 <HAL_I2C_Init+0x280>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0c9b      	lsrs	r3, r3, #18
 80035bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_I2C_Init+0x274>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d802      	bhi.n	80035ec <HAL_I2C_Init+0xd4>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3301      	adds	r3, #1
 80035ea:	e009      	b.n	8003600 <HAL_I2C_Init+0xe8>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	4a69      	ldr	r2, [pc, #420]	; (800379c <HAL_I2C_Init+0x284>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	3301      	adds	r3, #1
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	495c      	ldr	r1, [pc, #368]	; (800378c <HAL_I2C_Init+0x274>)
 800361c:	428b      	cmp	r3, r1
 800361e:	d819      	bhi.n	8003654 <HAL_I2C_Init+0x13c>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e59      	subs	r1, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fbb1 f3f3 	udiv	r3, r1, r3
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003634:	400b      	ands	r3, r1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_I2C_Init+0x138>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1e59      	subs	r1, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fbb1 f3f3 	udiv	r3, r1, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364e:	e051      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 8003650:	2304      	movs	r3, #4
 8003652:	e04f      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d111      	bne.n	8003680 <HAL_I2C_Init+0x168>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e58      	subs	r0, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e012      	b.n	80036a6 <HAL_I2C_Init+0x18e>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	0099      	lsls	r1, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Init+0x196>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e022      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10e      	bne.n	80036d4 <HAL_I2C_Init+0x1bc>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e58      	subs	r0, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	440b      	add	r3, r1
 80036c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	0099      	lsls	r1, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	6809      	ldr	r1, [r1, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6911      	ldr	r1, [r2, #16]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68d2      	ldr	r2, [r2, #12]
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	000186a0 	.word	0x000186a0
 8003790:	001e847f 	.word	0x001e847f
 8003794:	003d08ff 	.word	0x003d08ff
 8003798:	431bde83 	.word	0x431bde83
 800379c:	10624dd3 	.word	0x10624dd3

080037a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ba:	f7ff f911 	bl	80029e0 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 80d9 	bne.w	8003980 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2319      	movs	r3, #25
 80037d4:	2201      	movs	r2, #1
 80037d6:	496d      	ldr	r1, [pc, #436]	; (800398c <HAL_I2C_Mem_Write+0x1ec>)
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fc7f 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	e0cc      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Mem_Write+0x56>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0c5      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d007      	beq.n	800381c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_I2C_Mem_Write+0x1f0>)
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800385e:	88f8      	ldrh	r0, [r7, #6]
 8003860:	893a      	ldrh	r2, [r7, #8]
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fab6 	bl	8003de0 <I2C_RequestMemoryWrite>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d052      	beq.n	8003920 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e081      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fd00 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b04      	cmp	r3, #4
 8003894:	d107      	bne.n	80038a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d11b      	bne.n	8003920 <HAL_I2C_Mem_Write+0x180>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1aa      	bne.n	800387e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fcec 	bl	800430a <I2C_WaitOnBTFFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b04      	cmp	r3, #4
 800393e:	d107      	bne.n	8003950 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e016      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	00100002 	.word	0x00100002
 8003990:	ffff0000 	.word	0xffff0000

08003994 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	460b      	mov	r3, r1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ae:	f7ff f817 	bl	80029e0 <HAL_GetTick>
 80039b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	f040 8208 	bne.w	8003dd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2319      	movs	r3, #25
 80039c8:	2201      	movs	r2, #1
 80039ca:	497b      	ldr	r1, [pc, #492]	; (8003bb8 <HAL_I2C_Mem_Read+0x224>)
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fb85 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	e1fb      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Mem_Read+0x56>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e1f4      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d007      	beq.n	8003a10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2222      	movs	r2, #34	; 0x22
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <HAL_I2C_Mem_Read+0x228>)
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a52:	88f8      	ldrh	r0, [r7, #6]
 8003a54:	893a      	ldrh	r2, [r7, #8]
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	4603      	mov	r3, r0
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fa52 	bl	8003f0c <I2C_RequestMemoryRead>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1b0      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d113      	bne.n	8003aa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e184      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e164      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d11b      	bne.n	8003b22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	e144      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b38:	e138      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	f200 80f1 	bhi.w	8003d26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d123      	bne.n	8003b94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fc1b 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e139      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b92:	e10b      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d14e      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4906      	ldr	r1, [pc, #24]	; (8003bc0 <HAL_I2C_Mem_Read+0x22c>)
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fa98 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e10e      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c38:	e0b8      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	2200      	movs	r2, #0
 8003c42:	4966      	ldr	r1, [pc, #408]	; (8003ddc <HAL_I2C_Mem_Read+0x448>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fa49 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0bf      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	494f      	ldr	r1, [pc, #316]	; (8003ddc <HAL_I2C_Mem_Read+0x448>)
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fa1b 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e091      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d24:	e042      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fb2e 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e04c      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d118      	bne.n	8003dac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f aec2 	bne.w	8003b3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3728      	adds	r7, #40	; 0x28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	00010004 	.word	0x00010004

08003de0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f960 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e30:	d103      	bne.n	8003e3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e05f      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	492d      	ldr	r1, [pc, #180]	; (8003f08 <I2C_RequestMemoryWrite+0x128>)
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f998 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e04c      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	6a39      	ldr	r1, [r7, #32]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fa02 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d107      	bne.n	8003ea2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e02b      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eac:	893b      	ldrh	r3, [r7, #8]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]
 8003eb6:	e021      	b.n	8003efc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f9dc 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e005      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef2:	893b      	ldrh	r3, [r7, #8]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	00010002 	.word	0x00010002

08003f0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	813b      	strh	r3, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f8c2 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6c:	d103      	bne.n	8003f76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0aa      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	4952      	ldr	r1, [pc, #328]	; (80040d8 <I2C_RequestMemoryRead+0x1cc>)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f8fa 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e097      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb8:	6a39      	ldr	r1, [r7, #32]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f964 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d107      	bne.n	8003fde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e076      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe8:	893b      	ldrh	r3, [r7, #8]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	e021      	b.n	8004038 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ff4:	893b      	ldrh	r3, [r7, #8]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	6a39      	ldr	r1, [r7, #32]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f93e 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b04      	cmp	r3, #4
 8004018:	d107      	bne.n	800402a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e050      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800402e:	893b      	ldrh	r3, [r7, #8]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403a:	6a39      	ldr	r1, [r7, #32]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f923 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	2b04      	cmp	r3, #4
 800404e:	d107      	bne.n	8004060 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e035      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004072:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2200      	movs	r2, #0
 800407c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f82b 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d103      	bne.n	80040a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e013      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040a8:	897b      	ldrh	r3, [r7, #10]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	6a3a      	ldr	r2, [r7, #32]
 80040bc:	4906      	ldr	r1, [pc, #24]	; (80040d8 <I2C_RequestMemoryRead+0x1cc>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f863 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	00010002 	.word	0x00010002

080040dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ec:	e025      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d021      	beq.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fe fc73 	bl	80029e0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e023      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10d      	bne.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	e00c      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	429a      	cmp	r2, r3
 800417e:	d0b6      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004198:	e051      	b.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d123      	bne.n	80041f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e046      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d021      	beq.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fe fbf1 	bl	80029e0 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e020      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10c      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4013      	ands	r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e00b      	b.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d18d      	bne.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004294:	e02d      	b.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8ce 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02d      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d021      	beq.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fe fb97 	bl	80029e0 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e007      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b80      	cmp	r3, #128	; 0x80
 80042fe:	d1ca      	bne.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004316:	e02d      	b.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f88d 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e02d      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d021      	beq.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fe fb56 	bl	80029e0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1ca      	bne.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e042      	b.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d119      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e029      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fe fb00 	bl	80029e0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e007      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d1b5      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d11b      	bne.n	8004488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	603b      	str	r3, [r7, #0]
 80044a6:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_PWREx_EnableOverDrive+0x90>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_PWREx_EnableOverDrive+0x90>)
 80044ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_PWREx_EnableOverDrive+0x90>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044be:	4b1b      	ldr	r3, [pc, #108]	; (800452c <HAL_PWREx_EnableOverDrive+0x94>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c4:	f7fe fa8c 	bl	80029e0 <HAL_GetTick>
 80044c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044ca:	e009      	b.n	80044e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044cc:	f7fe fa88 	bl	80029e0 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044da:	d901      	bls.n	80044e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e01f      	b.n	8004520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <HAL_PWREx_EnableOverDrive+0x98>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ec:	d1ee      	bne.n	80044cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f4:	f7fe fa74 	bl	80029e0 <HAL_GetTick>
 80044f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044fa:	e009      	b.n	8004510 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044fc:	f7fe fa70 	bl	80029e0 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800450a:	d901      	bls.n	8004510 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e007      	b.n	8004520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <HAL_PWREx_EnableOverDrive+0x98>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800451c:	d1ee      	bne.n	80044fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	420e0040 	.word	0x420e0040
 8004530:	40007000 	.word	0x40007000
 8004534:	420e0044 	.word	0x420e0044

08004538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0cc      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b68      	ldr	r3, [pc, #416]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d90c      	bls.n	8004574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b65      	ldr	r3, [pc, #404]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0b8      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800458c:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a4:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a52      	ldr	r2, [pc, #328]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b0:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	494d      	ldr	r1, [pc, #308]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d044      	beq.n	8004658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d119      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f6:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e06f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	4b3b      	ldr	r3, [pc, #236]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e067      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4934      	ldr	r1, [pc, #208]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004628:	f7fe f9da 	bl	80029e0 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fe f9d6 	bl	80029e0 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e04f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d20c      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e032      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4916      	ldr	r1, [pc, #88]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046be:	f000 f855 	bl	800476c <HAL_RCC_GetSysClockFreq>
 80046c2:	4602      	mov	r2, r0
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	490a      	ldr	r1, [pc, #40]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	5ccb      	ldrb	r3, [r1, r3]
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe f93a 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40023c00 	.word	0x40023c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	08009138 	.word	0x08009138
 80046fc:	20000000 	.word	0x20000000
 8004700:	20000004 	.word	0x20000004

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000000 	.word	0x20000000

0800471c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004720:	f7ff fff0 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	08009148 	.word	0x08009148

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004748:	f7ff ffdc 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0b5b      	lsrs	r3, r3, #13
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4903      	ldr	r1, [pc, #12]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800
 8004768:	08009148 	.word	0x08009148

0800476c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800476c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004770:	b0ae      	sub	sp, #184	; 0xb8
 8004772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004792:	4bcb      	ldr	r3, [pc, #812]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b0c      	cmp	r3, #12
 800479c:	f200 8206 	bhi.w	8004bac <HAL_RCC_GetSysClockFreq+0x440>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	08004bad 	.word	0x08004bad
 80047b0:	08004bad 	.word	0x08004bad
 80047b4:	08004bad 	.word	0x08004bad
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	08004bad 	.word	0x08004bad
 80047c0:	08004bad 	.word	0x08004bad
 80047c4:	08004bad 	.word	0x08004bad
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	08004bad 	.word	0x08004bad
 80047d0:	08004bad 	.word	0x08004bad
 80047d4:	08004bad 	.word	0x08004bad
 80047d8:	080049dd 	.word	0x080049dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4bb9      	ldr	r3, [pc, #740]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x358>)
 80047de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80047e2:	e1e7      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e4:	4bb8      	ldr	r3, [pc, #736]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80047e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047ea:	e1e3      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ec:	4bb4      	ldr	r3, [pc, #720]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f8:	4bb1      	ldr	r3, [pc, #708]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d071      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004804:	4bae      	ldr	r3, [pc, #696]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	2200      	movs	r2, #0
 800480c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004810:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800482a:	4622      	mov	r2, r4
 800482c:	462b      	mov	r3, r5
 800482e:	f04f 0000 	mov.w	r0, #0
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	0159      	lsls	r1, r3, #5
 8004838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483c:	0150      	lsls	r0, r2, #5
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4621      	mov	r1, r4
 8004844:	1a51      	subs	r1, r2, r1
 8004846:	6439      	str	r1, [r7, #64]	; 0x40
 8004848:	4629      	mov	r1, r5
 800484a:	eb63 0301 	sbc.w	r3, r3, r1
 800484e:	647b      	str	r3, [r7, #68]	; 0x44
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800485c:	4649      	mov	r1, r9
 800485e:	018b      	lsls	r3, r1, #6
 8004860:	4641      	mov	r1, r8
 8004862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004866:	4641      	mov	r1, r8
 8004868:	018a      	lsls	r2, r1, #6
 800486a:	4641      	mov	r1, r8
 800486c:	1a51      	subs	r1, r2, r1
 800486e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004870:	4649      	mov	r1, r9
 8004872:	eb63 0301 	sbc.w	r3, r3, r1
 8004876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004884:	4649      	mov	r1, r9
 8004886:	00cb      	lsls	r3, r1, #3
 8004888:	4641      	mov	r1, r8
 800488a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488e:	4641      	mov	r1, r8
 8004890:	00ca      	lsls	r2, r1, #3
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	4603      	mov	r3, r0
 8004898:	4622      	mov	r2, r4
 800489a:	189b      	adds	r3, r3, r2
 800489c:	633b      	str	r3, [r7, #48]	; 0x30
 800489e:	462b      	mov	r3, r5
 80048a0:	460a      	mov	r2, r1
 80048a2:	eb42 0303 	adc.w	r3, r2, r3
 80048a6:	637b      	str	r3, [r7, #52]	; 0x34
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048b4:	4629      	mov	r1, r5
 80048b6:	024b      	lsls	r3, r1, #9
 80048b8:	4621      	mov	r1, r4
 80048ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048be:	4621      	mov	r1, r4
 80048c0:	024a      	lsls	r2, r1, #9
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048d8:	f7fc f9e6 	bl	8000ca8 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e6:	e067      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4b75      	ldr	r3, [pc, #468]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80048f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004900:	67bb      	str	r3, [r7, #120]	; 0x78
 8004902:	2300      	movs	r3, #0
 8004904:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004906:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	f04f 0000 	mov.w	r0, #0
 8004912:	f04f 0100 	mov.w	r1, #0
 8004916:	0159      	lsls	r1, r3, #5
 8004918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491c:	0150      	lsls	r0, r2, #5
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4621      	mov	r1, r4
 8004924:	1a51      	subs	r1, r2, r1
 8004926:	62b9      	str	r1, [r7, #40]	; 0x28
 8004928:	4629      	mov	r1, r5
 800492a:	eb63 0301 	sbc.w	r3, r3, r1
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800493c:	4649      	mov	r1, r9
 800493e:	018b      	lsls	r3, r1, #6
 8004940:	4641      	mov	r1, r8
 8004942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004946:	4641      	mov	r1, r8
 8004948:	018a      	lsls	r2, r1, #6
 800494a:	4641      	mov	r1, r8
 800494c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004950:	4649      	mov	r1, r9
 8004952:	eb63 0b01 	sbc.w	fp, r3, r1
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004962:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496a:	4692      	mov	sl, r2
 800496c:	469b      	mov	fp, r3
 800496e:	4623      	mov	r3, r4
 8004970:	eb1a 0303 	adds.w	r3, sl, r3
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	462b      	mov	r3, r5
 8004978:	eb4b 0303 	adc.w	r3, fp, r3
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800498a:	4629      	mov	r1, r5
 800498c:	028b      	lsls	r3, r1, #10
 800498e:	4621      	mov	r1, r4
 8004990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004994:	4621      	mov	r1, r4
 8004996:	028a      	lsls	r2, r1, #10
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049a0:	2200      	movs	r2, #0
 80049a2:	673b      	str	r3, [r7, #112]	; 0x70
 80049a4:	677a      	str	r2, [r7, #116]	; 0x74
 80049a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80049aa:	f7fc f97d 	bl	8000ca8 <__aeabi_uldivmod>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4613      	mov	r3, r2
 80049b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b8:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	3301      	adds	r3, #1
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80049ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049da:	e0eb      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049dc:	4b38      	ldr	r3, [pc, #224]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049e8:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d06b      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f4:	4b32      	ldr	r3, [pc, #200]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	2200      	movs	r2, #0
 80049fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80049fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a06:	663b      	str	r3, [r7, #96]	; 0x60
 8004a08:	2300      	movs	r3, #0
 8004a0a:	667b      	str	r3, [r7, #100]	; 0x64
 8004a0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	0159      	lsls	r1, r3, #5
 8004a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a22:	0150      	lsls	r0, r2, #5
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4621      	mov	r1, r4
 8004a2a:	1a51      	subs	r1, r2, r1
 8004a2c:	61b9      	str	r1, [r7, #24]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	eb63 0301 	sbc.w	r3, r3, r1
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a42:	4659      	mov	r1, fp
 8004a44:	018b      	lsls	r3, r1, #6
 8004a46:	4651      	mov	r1, sl
 8004a48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	018a      	lsls	r2, r1, #6
 8004a50:	4651      	mov	r1, sl
 8004a52:	ebb2 0801 	subs.w	r8, r2, r1
 8004a56:	4659      	mov	r1, fp
 8004a58:	eb63 0901 	sbc.w	r9, r3, r1
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a70:	4690      	mov	r8, r2
 8004a72:	4699      	mov	r9, r3
 8004a74:	4623      	mov	r3, r4
 8004a76:	eb18 0303 	adds.w	r3, r8, r3
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	eb49 0303 	adc.w	r3, r9, r3
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a90:	4629      	mov	r1, r5
 8004a92:	024b      	lsls	r3, r1, #9
 8004a94:	4621      	mov	r1, r4
 8004a96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	024a      	lsls	r2, r1, #9
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aaa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004aac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ab0:	f7fc f8fa 	bl	8000ca8 <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004abe:	e065      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x420>
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	00f42400 	.word	0x00f42400
 8004ac8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004acc:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004adc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ade:	2300      	movs	r3, #0
 8004ae0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ae2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	464b      	mov	r3, r9
 8004aea:	f04f 0000 	mov.w	r0, #0
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	0159      	lsls	r1, r3, #5
 8004af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af8:	0150      	lsls	r0, r2, #5
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4641      	mov	r1, r8
 8004b00:	1a51      	subs	r1, r2, r1
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	4649      	mov	r1, r9
 8004b06:	eb63 0301 	sbc.w	r3, r3, r1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b18:	4659      	mov	r1, fp
 8004b1a:	018b      	lsls	r3, r1, #6
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b22:	4651      	mov	r1, sl
 8004b24:	018a      	lsls	r2, r1, #6
 8004b26:	4651      	mov	r1, sl
 8004b28:	1a54      	subs	r4, r2, r1
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	eb63 0501 	sbc.w	r5, r3, r1
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	00eb      	lsls	r3, r5, #3
 8004b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b3e:	00e2      	lsls	r2, r4, #3
 8004b40:	4614      	mov	r4, r2
 8004b42:	461d      	mov	r5, r3
 8004b44:	4643      	mov	r3, r8
 8004b46:	18e3      	adds	r3, r4, r3
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	eb45 0303 	adc.w	r3, r5, r3
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b5e:	4629      	mov	r1, r5
 8004b60:	028b      	lsls	r3, r1, #10
 8004b62:	4621      	mov	r1, r4
 8004b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b68:	4621      	mov	r1, r4
 8004b6a:	028a      	lsls	r2, r1, #10
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b74:	2200      	movs	r2, #0
 8004b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b7e:	f7fc f893 	bl	8000ca8 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4613      	mov	r3, r2
 8004b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	0f1b      	lsrs	r3, r3, #28
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004baa:	e003      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	37b8      	adds	r7, #184	; 0xb8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	00f42400 	.word	0x00f42400

08004bcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e28d      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8083 	beq.w	8004cf2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bec:	4b94      	ldr	r3, [pc, #592]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d019      	beq.n	8004c2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bf8:	4b91      	ldr	r3, [pc, #580]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c04:	4b8e      	ldr	r3, [pc, #568]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c10:	d00c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c12:	4b8b      	ldr	r3, [pc, #556]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d112      	bne.n	8004c44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1e:	4b88      	ldr	r3, [pc, #544]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2a:	d10b      	bne.n	8004c44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	4b84      	ldr	r3, [pc, #528]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05b      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x124>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d157      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e25a      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCC_OscConfig+0x90>
 8004c4e:	4b7c      	ldr	r3, [pc, #496]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a7b      	ldr	r2, [pc, #492]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e01d      	b.n	8004c98 <HAL_RCC_OscConfig+0xcc>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0xb4>
 8004c66:	4b76      	ldr	r3, [pc, #472]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a75      	ldr	r2, [pc, #468]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b73      	ldr	r3, [pc, #460]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a72      	ldr	r2, [pc, #456]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0xcc>
 8004c80:	4b6f      	ldr	r3, [pc, #444]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6e      	ldr	r2, [pc, #440]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b6c      	ldr	r3, [pc, #432]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a6b      	ldr	r2, [pc, #428]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fe9e 	bl	80029e0 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fd fe9a 	bl	80029e0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e21f      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b61      	ldr	r3, [pc, #388]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xdc>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fe8a 	bl	80029e0 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd0:	f7fd fe86 	bl	80029e0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e20b      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	4b57      	ldr	r3, [pc, #348]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x104>
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d06f      	beq.n	8004dde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cfe:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d017      	beq.n	8004d3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d0a:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d105      	bne.n	8004d22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d16:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d11c      	bne.n	8004d68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2e:	4b44      	ldr	r3, [pc, #272]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d116      	bne.n	8004d68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3a:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_RCC_OscConfig+0x186>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d001      	beq.n	8004d52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e1d3      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4937      	ldr	r1, [pc, #220]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d66:	e03a      	b.n	8004dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d020      	beq.n	8004db2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d70:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <HAL_RCC_OscConfig+0x278>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d76:	f7fd fe33 	bl	80029e0 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7e:	f7fd fe2f 	bl	80029e0 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e1b4      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d90:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9c:	4b28      	ldr	r3, [pc, #160]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	4925      	ldr	r1, [pc, #148]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	600b      	str	r3, [r1, #0]
 8004db0:	e015      	b.n	8004dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <HAL_RCC_OscConfig+0x278>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd fe12 	bl	80029e0 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc0:	f7fd fe0e 	bl	80029e0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e193      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d036      	beq.n	8004e58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d016      	beq.n	8004e20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <HAL_RCC_OscConfig+0x27c>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fd fdf2 	bl	80029e0 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e00:	f7fd fdee 	bl	80029e0 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e173      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_OscConfig+0x274>)
 8004e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x234>
 8004e1e:	e01b      	b.n	8004e58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_OscConfig+0x27c>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e26:	f7fd fddb 	bl	80029e0 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e2c:	e00e      	b.n	8004e4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2e:	f7fd fdd7 	bl	80029e0 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d907      	bls.n	8004e4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e15c      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
 8004e40:	40023800 	.word	0x40023800
 8004e44:	42470000 	.word	0x42470000
 8004e48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e4c:	4b8a      	ldr	r3, [pc, #552]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ea      	bne.n	8004e2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8097 	beq.w	8004f94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e66:	2300      	movs	r3, #0
 8004e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6a:	4b83      	ldr	r3, [pc, #524]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10f      	bne.n	8004e96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	4b7f      	ldr	r3, [pc, #508]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a7e      	ldr	r2, [pc, #504]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
 8004e86:	4b7c      	ldr	r3, [pc, #496]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e92:	2301      	movs	r3, #1
 8004e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e96:	4b79      	ldr	r3, [pc, #484]	; (800507c <HAL_RCC_OscConfig+0x4b0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d118      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea2:	4b76      	ldr	r3, [pc, #472]	; (800507c <HAL_RCC_OscConfig+0x4b0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a75      	ldr	r2, [pc, #468]	; (800507c <HAL_RCC_OscConfig+0x4b0>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eae:	f7fd fd97 	bl	80029e0 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fd fd93 	bl	80029e0 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e118      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec8:	4b6c      	ldr	r3, [pc, #432]	; (800507c <HAL_RCC_OscConfig+0x4b0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_OscConfig+0x31e>
 8004edc:	4b66      	ldr	r3, [pc, #408]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a65      	ldr	r2, [pc, #404]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee8:	e01c      	b.n	8004f24 <HAL_RCC_OscConfig+0x358>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x340>
 8004ef2:	4b61      	ldr	r3, [pc, #388]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a60      	ldr	r2, [pc, #384]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70
 8004efe:	4b5e      	ldr	r3, [pc, #376]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	4a5d      	ldr	r2, [pc, #372]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCC_OscConfig+0x358>
 8004f0c:	4b5a      	ldr	r3, [pc, #360]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	4a59      	ldr	r2, [pc, #356]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	6713      	str	r3, [r2, #112]	; 0x70
 8004f18:	4b57      	ldr	r3, [pc, #348]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1c:	4a56      	ldr	r2, [pc, #344]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f1e:	f023 0304 	bic.w	r3, r3, #4
 8004f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d015      	beq.n	8004f58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fd fd58 	bl	80029e0 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fd fd54 	bl	80029e0 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e0d7      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4a:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ee      	beq.n	8004f34 <HAL_RCC_OscConfig+0x368>
 8004f56:	e014      	b.n	8004f82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fd fd42 	bl	80029e0 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fd fd3e 	bl	80029e0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0c1      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f76:	4b40      	ldr	r3, [pc, #256]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1ee      	bne.n	8004f60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d105      	bne.n	8004f94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f88:	4b3b      	ldr	r3, [pc, #236]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80ad 	beq.w	80050f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f9e:	4b36      	ldr	r3, [pc, #216]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d060      	beq.n	800506c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d145      	bne.n	800503e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb2:	4b33      	ldr	r3, [pc, #204]	; (8005080 <HAL_RCC_OscConfig+0x4b4>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fd fd12 	bl	80029e0 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fd fd0e 	bl	80029e0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e093      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	019b      	lsls	r3, r3, #6
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	041b      	lsls	r3, r3, #16
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	061b      	lsls	r3, r3, #24
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	071b      	lsls	r3, r3, #28
 800500a:	491b      	ldr	r1, [pc, #108]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 800500c:	4313      	orrs	r3, r2
 800500e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x4b4>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005016:	f7fd fce3 	bl	80029e0 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501e:	f7fd fcdf 	bl	80029e0 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e064      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005030:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x452>
 800503c:	e05c      	b.n	80050f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_RCC_OscConfig+0x4b4>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd fccc 	bl	80029e0 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd fcc8 	bl	80029e0 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e04d      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_RCC_OscConfig+0x4ac>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x480>
 800506a:	e045      	b.n	80050f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d107      	bne.n	8005084 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e040      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
 8005078:	40023800 	.word	0x40023800
 800507c:	40007000 	.word	0x40007000
 8005080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <HAL_RCC_OscConfig+0x538>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d030      	beq.n	80050f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d129      	bne.n	80050f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d122      	bne.n	80050f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050b4:	4013      	ands	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050bc:	4293      	cmp	r3, r2
 80050be:	d119      	bne.n	80050f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	3b01      	subs	r3, #1
 80050ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d10f      	bne.n	80050f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800

08005108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e03f      	b.n	800519a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fd f90c 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800514a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fddf 	bl	8005d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b08a      	sub	sp, #40	; 0x28
 80051a6:	af02      	add	r7, sp, #8
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d17c      	bne.n	80052bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_UART_Transmit+0x2c>
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e075      	b.n	80052be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_UART_Transmit+0x3e>
 80051dc:	2302      	movs	r3, #2
 80051de:	e06e      	b.n	80052be <HAL_UART_Transmit+0x11c>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2221      	movs	r2, #33	; 0x21
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f6:	f7fd fbf3 	bl	80029e0 <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	d108      	bne.n	8005224 <HAL_UART_Transmit+0x82>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d104      	bne.n	8005224 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e003      	b.n	800522c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005234:	e02a      	b.n	800528c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2200      	movs	r2, #0
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fb1f 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e036      	b.n	80052be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3302      	adds	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e007      	b.n	800527e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3301      	adds	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1cf      	bne.n	8005236 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2200      	movs	r2, #0
 800529e:	2140      	movs	r1, #64	; 0x40
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 faef 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e006      	b.n	80052be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d11d      	bne.n	800531c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Receive_IT+0x26>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e016      	b.n	800531e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Receive_IT+0x38>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e00f      	b.n	800531e <HAL_UART_Receive_IT+0x58>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	461a      	mov	r2, r3
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fb24 	bl	8005960 <UART_Start_Receive_IT>
 8005318:	4603      	mov	r3, r0
 800531a:	e000      	b.n	800531e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b0ba      	sub	sp, #232	; 0xe8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800534e:	2300      	movs	r3, #0
 8005350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <HAL_UART_IRQHandler+0x66>
 800537a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fc07 	bl	8005b9a <UART_Receive_IT>
      return;
 800538c:	e256      	b.n	800583c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800538e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80de 	beq.w	8005554 <HAL_UART_IRQHandler+0x22c>
 8005398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80d1 	beq.w	8005554 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <HAL_UART_IRQHandler+0xae>
 80053be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f043 0201 	orr.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_UART_IRQHandler+0xd2>
 80053e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f043 0202 	orr.w	r2, r3, #2
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_UART_IRQHandler+0xf6>
 8005406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f043 0204 	orr.w	r2, r3, #4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d011      	beq.n	800544e <HAL_UART_IRQHandler+0x126>
 800542a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d105      	bne.n	8005442 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0208 	orr.w	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 81ed 	beq.w	8005832 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_UART_IRQHandler+0x14e>
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fb92 	bl	8005b9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_UART_IRQHandler+0x17a>
 800549a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d04f      	beq.n	8005542 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa9a 	bl	80059dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d141      	bne.n	800553a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3314      	adds	r3, #20
 80054bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1d9      	bne.n	80054b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d013      	beq.n	8005532 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	4a7d      	ldr	r2, [pc, #500]	; (8005704 <HAL_UART_IRQHandler+0x3dc>)
 8005510:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	4618      	mov	r0, r3
 8005518:	f7fd fe2d 	bl	8003176 <HAL_DMA_Abort_IT>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d016      	beq.n	8005550 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800552c:	4610      	mov	r0, r2
 800552e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e00e      	b.n	8005550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f990 	bl	8005858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e00a      	b.n	8005550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f98c 	bl	8005858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	e006      	b.n	8005550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f988 	bl	8005858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800554e:	e170      	b.n	8005832 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	bf00      	nop
    return;
 8005552:	e16e      	b.n	8005832 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	2b01      	cmp	r3, #1
 800555a:	f040 814a 	bne.w	80057f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8143 	beq.w	80057f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800556c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 813c 	beq.w	80057f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	f040 80b4 	bne.w	8005708 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8140 	beq.w	8005836 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055be:	429a      	cmp	r2, r3
 80055c0:	f080 8139 	bcs.w	8005836 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	f000 8088 	beq.w	80056ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800560a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800561e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1d9      	bne.n	80055da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3314      	adds	r3, #20
 800562c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800564a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800564e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005652:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800565c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e1      	bne.n	8005626 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3314      	adds	r3, #20
 8005668:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3314      	adds	r3, #20
 8005682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005686:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005688:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800568c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e3      	bne.n	8005662 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ba:	f023 0310 	bic.w	r3, r3, #16
 80056be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80056ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e3      	bne.n	80056a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fd fcd6 	bl	8003096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8b6 	bl	800586c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005700:	e099      	b.n	8005836 <HAL_UART_IRQHandler+0x50e>
 8005702:	bf00      	nop
 8005704:	08005aa3 	.word	0x08005aa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005710:	b29b      	uxth	r3, r3
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 808b 	beq.w	800583a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8086 	beq.w	800583a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005752:	647a      	str	r2, [r7, #68]	; 0x44
 8005754:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e3      	bne.n	800572e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3314      	adds	r3, #20
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	623b      	str	r3, [r7, #32]
   return(result);
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3314      	adds	r3, #20
 8005786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800578a:	633a      	str	r2, [r7, #48]	; 0x30
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e3      	bne.n	8005766 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0310 	bic.w	r3, r3, #16
 80057c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057d0:	61fa      	str	r2, [r7, #28]
 80057d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	69b9      	ldr	r1, [r7, #24]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	617b      	str	r3, [r7, #20]
   return(result);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e3      	bne.n	80057ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f83e 	bl	800586c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057f0:	e023      	b.n	800583a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_UART_IRQHandler+0x4ea>
 80057fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f95d 	bl	8005aca <UART_Transmit_IT>
    return;
 8005810:	e014      	b.n	800583c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <HAL_UART_IRQHandler+0x514>
 800581e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f99d 	bl	8005b6a <UART_EndTransmit_IT>
    return;
 8005830:	e004      	b.n	800583c <HAL_UART_IRQHandler+0x514>
    return;
 8005832:	bf00      	nop
 8005834:	e002      	b.n	800583c <HAL_UART_IRQHandler+0x514>
      return;
 8005836:	bf00      	nop
 8005838:	e000      	b.n	800583c <HAL_UART_IRQHandler+0x514>
      return;
 800583a:	bf00      	nop
  }
}
 800583c:	37e8      	adds	r7, #232	; 0xe8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop

08005844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b090      	sub	sp, #64	; 0x40
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005894:	e050      	b.n	8005938 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d04c      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800589e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058a4:	f7fd f89c 	bl	80029e0 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d241      	bcs.n	8005938 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058d4:	637a      	str	r2, [r7, #52]	; 0x34
 80058d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e5      	bne.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3314      	adds	r3, #20
 80058ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	613b      	str	r3, [r7, #16]
   return(result);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3314      	adds	r3, #20
 8005906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005908:	623a      	str	r2, [r7, #32]
 800590a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	61bb      	str	r3, [r7, #24]
   return(result);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e5      	bne.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e00f      	b.n	8005958 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	429a      	cmp	r2, r3
 8005954:	d09f      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3740      	adds	r7, #64	; 0x40
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2222      	movs	r2, #34	; 0x22
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0201 	orr.w	r2, r2, #1
 80059bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0220 	orr.w	r2, r2, #32
 80059cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059dc:	b480      	push	{r7}
 80059de:	b095      	sub	sp, #84	; 0x54
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a04:	643a      	str	r2, [r7, #64]	; 0x40
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e5      	bne.n	80059e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f023 0301 	bic.w	r3, r3, #1
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3314      	adds	r3, #20
 8005a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e5      	bne.n	8005a18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d119      	bne.n	8005a88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f023 0310 	bic.w	r3, r3, #16
 8005a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a74:	61ba      	str	r2, [r7, #24]
 8005a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6979      	ldr	r1, [r7, #20]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	613b      	str	r3, [r7, #16]
   return(result);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a96:	bf00      	nop
 8005a98:	3754      	adds	r7, #84	; 0x54
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff fecb 	bl	8005858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b21      	cmp	r3, #33	; 0x21
 8005adc:	d13e      	bne.n	8005b5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d114      	bne.n	8005b12 <UART_Transmit_IT+0x48>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d110      	bne.n	8005b12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	621a      	str	r2, [r3, #32]
 8005b10:	e008      	b.n	8005b24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6211      	str	r1, [r2, #32]
 8005b1c:	781a      	ldrb	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4619      	mov	r1, r3
 8005b32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10f      	bne.n	8005b58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e000      	b.n	8005b5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fe5a 	bl	8005844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b08c      	sub	sp, #48	; 0x30
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b22      	cmp	r3, #34	; 0x22
 8005bac:	f040 80ab 	bne.w	8005d06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb8:	d117      	bne.n	8005bea <UART_Receive_IT+0x50>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d113      	bne.n	8005bea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
 8005be8:	e026      	b.n	8005c38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d007      	beq.n	8005c0e <UART_Receive_IT+0x74>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <UART_Receive_IT+0x82>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	e008      	b.n	8005c2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4619      	mov	r1, r3
 8005c46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d15a      	bne.n	8005d02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0220 	bic.w	r2, r2, #32
 8005c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d135      	bne.n	8005cf8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f023 0310 	bic.w	r3, r3, #16
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	623a      	str	r2, [r7, #32]
 8005cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	69f9      	ldr	r1, [r7, #28]
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b10      	cmp	r3, #16
 8005cd2:	d10a      	bne.n	8005cea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff fdbb 	bl	800586c <HAL_UARTEx_RxEventCallback>
 8005cf6:	e002      	b.n	8005cfe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fc fd71 	bl	80027e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e002      	b.n	8005d08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
  }
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3730      	adds	r7, #48	; 0x30
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d14:	b0c0      	sub	sp, #256	; 0x100
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2c:	68d9      	ldr	r1, [r3, #12]
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	ea40 0301 	orr.w	r3, r0, r1
 8005d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d68:	f021 010c 	bic.w	r1, r1, #12
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d76:	430b      	orrs	r3, r1
 8005d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8a:	6999      	ldr	r1, [r3, #24]
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	ea40 0301 	orr.w	r3, r0, r1
 8005d96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b8f      	ldr	r3, [pc, #572]	; (8005fdc <UART_SetConfig+0x2cc>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d005      	beq.n	8005db0 <UART_SetConfig+0xa0>
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b8d      	ldr	r3, [pc, #564]	; (8005fe0 <UART_SetConfig+0x2d0>)
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d104      	bne.n	8005dba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db0:	f7fe fcc8 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8005db4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005db8:	e003      	b.n	8005dc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dba:	f7fe fcaf 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8005dbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dcc:	f040 810c 	bne.w	8005fe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	1891      	adds	r1, r2, r2
 8005de8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dea:	415b      	adcs	r3, r3
 8005dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005df2:	4621      	mov	r1, r4
 8005df4:	eb12 0801 	adds.w	r8, r2, r1
 8005df8:	4629      	mov	r1, r5
 8005dfa:	eb43 0901 	adc.w	r9, r3, r1
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e12:	4690      	mov	r8, r2
 8005e14:	4699      	mov	r9, r3
 8005e16:	4623      	mov	r3, r4
 8005e18:	eb18 0303 	adds.w	r3, r8, r3
 8005e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e20:	462b      	mov	r3, r5
 8005e22:	eb49 0303 	adc.w	r3, r9, r3
 8005e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e3e:	460b      	mov	r3, r1
 8005e40:	18db      	adds	r3, r3, r3
 8005e42:	653b      	str	r3, [r7, #80]	; 0x50
 8005e44:	4613      	mov	r3, r2
 8005e46:	eb42 0303 	adc.w	r3, r2, r3
 8005e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e54:	f7fa ff28 	bl	8000ca8 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4b61      	ldr	r3, [pc, #388]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	011c      	lsls	r4, r3, #4
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	1891      	adds	r1, r2, r2
 8005e7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e80:	415b      	adcs	r3, r3
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e88:	4641      	mov	r1, r8
 8005e8a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e8e:	4649      	mov	r1, r9
 8005e90:	eb43 0b01 	adc.w	fp, r3, r1
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ea8:	4692      	mov	sl, r2
 8005eaa:	469b      	mov	fp, r3
 8005eac:	4643      	mov	r3, r8
 8005eae:	eb1a 0303 	adds.w	r3, sl, r3
 8005eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8005ebc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ecc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ed0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	18db      	adds	r3, r3, r3
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eda:	4613      	mov	r3, r2
 8005edc:	eb42 0303 	adc.w	r3, r2, r3
 8005ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005eea:	f7fa fedd 	bl	8000ca8 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2264      	movs	r2, #100	; 0x64
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	1acb      	subs	r3, r1, r3
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f18:	441c      	add	r4, r3
 8005f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	1891      	adds	r1, r2, r2
 8005f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f34:	415b      	adcs	r3, r3
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	1851      	adds	r1, r2, r1
 8005f40:	6339      	str	r1, [r7, #48]	; 0x30
 8005f42:	4649      	mov	r1, r9
 8005f44:	414b      	adcs	r3, r1
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f54:	4659      	mov	r1, fp
 8005f56:	00cb      	lsls	r3, r1, #3
 8005f58:	4651      	mov	r1, sl
 8005f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5e:	4651      	mov	r1, sl
 8005f60:	00ca      	lsls	r2, r1, #3
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	4642      	mov	r2, r8
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f70:	464b      	mov	r3, r9
 8005f72:	460a      	mov	r2, r1
 8005f74:	eb42 0303 	adc.w	r3, r2, r3
 8005f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f90:	460b      	mov	r3, r1
 8005f92:	18db      	adds	r3, r3, r3
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f96:	4613      	mov	r3, r2
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fa6:	f7fa fe7f 	bl	8000ca8 <__aeabi_uldivmod>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	2164      	movs	r1, #100	; 0x64
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	3332      	adds	r3, #50	; 0x32
 8005fc2:	4a08      	ldr	r2, [pc, #32]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	f003 0207 	and.w	r2, r3, #7
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4422      	add	r2, r4
 8005fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fd8:	e106      	b.n	80061e8 <UART_SetConfig+0x4d8>
 8005fda:	bf00      	nop
 8005fdc:	40011000 	.word	0x40011000
 8005fe0:	40011400 	.word	0x40011400
 8005fe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ff2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ffa:	4642      	mov	r2, r8
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	1891      	adds	r1, r2, r2
 8006000:	6239      	str	r1, [r7, #32]
 8006002:	415b      	adcs	r3, r3
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800600a:	4641      	mov	r1, r8
 800600c:	1854      	adds	r4, r2, r1
 800600e:	4649      	mov	r1, r9
 8006010:	eb43 0501 	adc.w	r5, r3, r1
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	00eb      	lsls	r3, r5, #3
 800601e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006022:	00e2      	lsls	r2, r4, #3
 8006024:	4614      	mov	r4, r2
 8006026:	461d      	mov	r5, r3
 8006028:	4643      	mov	r3, r8
 800602a:	18e3      	adds	r3, r4, r3
 800602c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006030:	464b      	mov	r3, r9
 8006032:	eb45 0303 	adc.w	r3, r5, r3
 8006036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006056:	4629      	mov	r1, r5
 8006058:	008b      	lsls	r3, r1, #2
 800605a:	4621      	mov	r1, r4
 800605c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006060:	4621      	mov	r1, r4
 8006062:	008a      	lsls	r2, r1, #2
 8006064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006068:	f7fa fe1e 	bl	8000ca8 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4b60      	ldr	r3, [pc, #384]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006072:	fba3 2302 	umull	r2, r3, r3, r2
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	011c      	lsls	r4, r3, #4
 800607a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006084:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	1891      	adds	r1, r2, r2
 8006092:	61b9      	str	r1, [r7, #24]
 8006094:	415b      	adcs	r3, r3
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800609c:	4641      	mov	r1, r8
 800609e:	1851      	adds	r1, r2, r1
 80060a0:	6139      	str	r1, [r7, #16]
 80060a2:	4649      	mov	r1, r9
 80060a4:	414b      	adcs	r3, r1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b4:	4659      	mov	r1, fp
 80060b6:	00cb      	lsls	r3, r1, #3
 80060b8:	4651      	mov	r1, sl
 80060ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060be:	4651      	mov	r1, sl
 80060c0:	00ca      	lsls	r2, r1, #3
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	4642      	mov	r2, r8
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d0:	464b      	mov	r3, r9
 80060d2:	460a      	mov	r2, r1
 80060d4:	eb42 0303 	adc.w	r3, r2, r3
 80060d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80060e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060f4:	4649      	mov	r1, r9
 80060f6:	008b      	lsls	r3, r1, #2
 80060f8:	4641      	mov	r1, r8
 80060fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060fe:	4641      	mov	r1, r8
 8006100:	008a      	lsls	r2, r1, #2
 8006102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006106:	f7fa fdcf 	bl	8000ca8 <__aeabi_uldivmod>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4611      	mov	r1, r2
 8006110:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006112:	fba3 2301 	umull	r2, r3, r3, r1
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	2264      	movs	r2, #100	; 0x64
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	1acb      	subs	r3, r1, r3
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	3332      	adds	r3, #50	; 0x32
 8006124:	4a33      	ldr	r2, [pc, #204]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006130:	441c      	add	r4, r3
 8006132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006136:	2200      	movs	r2, #0
 8006138:	673b      	str	r3, [r7, #112]	; 0x70
 800613a:	677a      	str	r2, [r7, #116]	; 0x74
 800613c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	1891      	adds	r1, r2, r2
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	415b      	adcs	r3, r3
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006150:	4641      	mov	r1, r8
 8006152:	1851      	adds	r1, r2, r1
 8006154:	6039      	str	r1, [r7, #0]
 8006156:	4649      	mov	r1, r9
 8006158:	414b      	adcs	r3, r1
 800615a:	607b      	str	r3, [r7, #4]
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006168:	4659      	mov	r1, fp
 800616a:	00cb      	lsls	r3, r1, #3
 800616c:	4651      	mov	r1, sl
 800616e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006172:	4651      	mov	r1, sl
 8006174:	00ca      	lsls	r2, r1, #3
 8006176:	4610      	mov	r0, r2
 8006178:	4619      	mov	r1, r3
 800617a:	4603      	mov	r3, r0
 800617c:	4642      	mov	r2, r8
 800617e:	189b      	adds	r3, r3, r2
 8006180:	66bb      	str	r3, [r7, #104]	; 0x68
 8006182:	464b      	mov	r3, r9
 8006184:	460a      	mov	r2, r1
 8006186:	eb42 0303 	adc.w	r3, r2, r3
 800618a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	663b      	str	r3, [r7, #96]	; 0x60
 8006196:	667a      	str	r2, [r7, #100]	; 0x64
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061a4:	4649      	mov	r1, r9
 80061a6:	008b      	lsls	r3, r1, #2
 80061a8:	4641      	mov	r1, r8
 80061aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ae:	4641      	mov	r1, r8
 80061b0:	008a      	lsls	r2, r1, #2
 80061b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061b6:	f7fa fd77 	bl	8000ca8 <__aeabi_uldivmod>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <UART_SetConfig+0x4e4>)
 80061c0:	fba3 1302 	umull	r1, r3, r3, r2
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	2164      	movs	r1, #100	; 0x64
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	3332      	adds	r3, #50	; 0x32
 80061d2:	4a08      	ldr	r2, [pc, #32]	; (80061f4 <UART_SetConfig+0x4e4>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f003 020f 	and.w	r2, r3, #15
 80061de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4422      	add	r2, r4
 80061e6:	609a      	str	r2, [r3, #8]
}
 80061e8:	bf00      	nop
 80061ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061ee:	46bd      	mov	sp, r7
 80061f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f4:	51eb851f 	.word	0x51eb851f

080061f8 <__cvt>:
 80061f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	ec55 4b10 	vmov	r4, r5, d0
 8006200:	2d00      	cmp	r5, #0
 8006202:	460e      	mov	r6, r1
 8006204:	4619      	mov	r1, r3
 8006206:	462b      	mov	r3, r5
 8006208:	bfbb      	ittet	lt
 800620a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800620e:	461d      	movlt	r5, r3
 8006210:	2300      	movge	r3, #0
 8006212:	232d      	movlt	r3, #45	; 0x2d
 8006214:	700b      	strb	r3, [r1, #0]
 8006216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006218:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800621c:	4691      	mov	r9, r2
 800621e:	f023 0820 	bic.w	r8, r3, #32
 8006222:	bfbc      	itt	lt
 8006224:	4622      	movlt	r2, r4
 8006226:	4614      	movlt	r4, r2
 8006228:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800622c:	d005      	beq.n	800623a <__cvt+0x42>
 800622e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006232:	d100      	bne.n	8006236 <__cvt+0x3e>
 8006234:	3601      	adds	r6, #1
 8006236:	2102      	movs	r1, #2
 8006238:	e000      	b.n	800623c <__cvt+0x44>
 800623a:	2103      	movs	r1, #3
 800623c:	ab03      	add	r3, sp, #12
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	ab02      	add	r3, sp, #8
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	ec45 4b10 	vmov	d0, r4, r5
 8006248:	4653      	mov	r3, sl
 800624a:	4632      	mov	r2, r6
 800624c:	f000 ff80 	bl	8007150 <_dtoa_r>
 8006250:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006254:	4607      	mov	r7, r0
 8006256:	d102      	bne.n	800625e <__cvt+0x66>
 8006258:	f019 0f01 	tst.w	r9, #1
 800625c:	d022      	beq.n	80062a4 <__cvt+0xac>
 800625e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006262:	eb07 0906 	add.w	r9, r7, r6
 8006266:	d110      	bne.n	800628a <__cvt+0x92>
 8006268:	783b      	ldrb	r3, [r7, #0]
 800626a:	2b30      	cmp	r3, #48	; 0x30
 800626c:	d10a      	bne.n	8006284 <__cvt+0x8c>
 800626e:	2200      	movs	r2, #0
 8006270:	2300      	movs	r3, #0
 8006272:	4620      	mov	r0, r4
 8006274:	4629      	mov	r1, r5
 8006276:	f7fa fc57 	bl	8000b28 <__aeabi_dcmpeq>
 800627a:	b918      	cbnz	r0, 8006284 <__cvt+0x8c>
 800627c:	f1c6 0601 	rsb	r6, r6, #1
 8006280:	f8ca 6000 	str.w	r6, [sl]
 8006284:	f8da 3000 	ldr.w	r3, [sl]
 8006288:	4499      	add	r9, r3
 800628a:	2200      	movs	r2, #0
 800628c:	2300      	movs	r3, #0
 800628e:	4620      	mov	r0, r4
 8006290:	4629      	mov	r1, r5
 8006292:	f7fa fc49 	bl	8000b28 <__aeabi_dcmpeq>
 8006296:	b108      	cbz	r0, 800629c <__cvt+0xa4>
 8006298:	f8cd 900c 	str.w	r9, [sp, #12]
 800629c:	2230      	movs	r2, #48	; 0x30
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	454b      	cmp	r3, r9
 80062a2:	d307      	bcc.n	80062b4 <__cvt+0xbc>
 80062a4:	9b03      	ldr	r3, [sp, #12]
 80062a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062a8:	1bdb      	subs	r3, r3, r7
 80062aa:	4638      	mov	r0, r7
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	b004      	add	sp, #16
 80062b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b4:	1c59      	adds	r1, r3, #1
 80062b6:	9103      	str	r1, [sp, #12]
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	e7f0      	b.n	800629e <__cvt+0xa6>

080062bc <__exponent>:
 80062bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062be:	4603      	mov	r3, r0
 80062c0:	2900      	cmp	r1, #0
 80062c2:	bfb8      	it	lt
 80062c4:	4249      	neglt	r1, r1
 80062c6:	f803 2b02 	strb.w	r2, [r3], #2
 80062ca:	bfb4      	ite	lt
 80062cc:	222d      	movlt	r2, #45	; 0x2d
 80062ce:	222b      	movge	r2, #43	; 0x2b
 80062d0:	2909      	cmp	r1, #9
 80062d2:	7042      	strb	r2, [r0, #1]
 80062d4:	dd2a      	ble.n	800632c <__exponent+0x70>
 80062d6:	f10d 0207 	add.w	r2, sp, #7
 80062da:	4617      	mov	r7, r2
 80062dc:	260a      	movs	r6, #10
 80062de:	4694      	mov	ip, r2
 80062e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80062e4:	fb06 1415 	mls	r4, r6, r5, r1
 80062e8:	3430      	adds	r4, #48	; 0x30
 80062ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80062ee:	460c      	mov	r4, r1
 80062f0:	2c63      	cmp	r4, #99	; 0x63
 80062f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80062f6:	4629      	mov	r1, r5
 80062f8:	dcf1      	bgt.n	80062de <__exponent+0x22>
 80062fa:	3130      	adds	r1, #48	; 0x30
 80062fc:	f1ac 0402 	sub.w	r4, ip, #2
 8006300:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006304:	1c41      	adds	r1, r0, #1
 8006306:	4622      	mov	r2, r4
 8006308:	42ba      	cmp	r2, r7
 800630a:	d30a      	bcc.n	8006322 <__exponent+0x66>
 800630c:	f10d 0209 	add.w	r2, sp, #9
 8006310:	eba2 020c 	sub.w	r2, r2, ip
 8006314:	42bc      	cmp	r4, r7
 8006316:	bf88      	it	hi
 8006318:	2200      	movhi	r2, #0
 800631a:	4413      	add	r3, r2
 800631c:	1a18      	subs	r0, r3, r0
 800631e:	b003      	add	sp, #12
 8006320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006322:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006326:	f801 5f01 	strb.w	r5, [r1, #1]!
 800632a:	e7ed      	b.n	8006308 <__exponent+0x4c>
 800632c:	2330      	movs	r3, #48	; 0x30
 800632e:	3130      	adds	r1, #48	; 0x30
 8006330:	7083      	strb	r3, [r0, #2]
 8006332:	70c1      	strb	r1, [r0, #3]
 8006334:	1d03      	adds	r3, r0, #4
 8006336:	e7f1      	b.n	800631c <__exponent+0x60>

08006338 <_printf_float>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	ed2d 8b02 	vpush	{d8}
 8006340:	b08d      	sub	sp, #52	; 0x34
 8006342:	460c      	mov	r4, r1
 8006344:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006348:	4616      	mov	r6, r2
 800634a:	461f      	mov	r7, r3
 800634c:	4605      	mov	r5, r0
 800634e:	f000 fdfd 	bl	8006f4c <_localeconv_r>
 8006352:	f8d0 a000 	ldr.w	sl, [r0]
 8006356:	4650      	mov	r0, sl
 8006358:	f7f9 ffba 	bl	80002d0 <strlen>
 800635c:	2300      	movs	r3, #0
 800635e:	930a      	str	r3, [sp, #40]	; 0x28
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	9305      	str	r3, [sp, #20]
 8006364:	f8d8 3000 	ldr.w	r3, [r8]
 8006368:	f894 b018 	ldrb.w	fp, [r4, #24]
 800636c:	3307      	adds	r3, #7
 800636e:	f023 0307 	bic.w	r3, r3, #7
 8006372:	f103 0208 	add.w	r2, r3, #8
 8006376:	f8c8 2000 	str.w	r2, [r8]
 800637a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800637e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	f8cd 8018 	str.w	r8, [sp, #24]
 8006388:	ee08 0a10 	vmov	s16, r0
 800638c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006394:	4b9e      	ldr	r3, [pc, #632]	; (8006610 <_printf_float+0x2d8>)
 8006396:	f04f 32ff 	mov.w	r2, #4294967295
 800639a:	f7fa fbf7 	bl	8000b8c <__aeabi_dcmpun>
 800639e:	bb88      	cbnz	r0, 8006404 <_printf_float+0xcc>
 80063a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063a4:	4b9a      	ldr	r3, [pc, #616]	; (8006610 <_printf_float+0x2d8>)
 80063a6:	f04f 32ff 	mov.w	r2, #4294967295
 80063aa:	f7fa fbd1 	bl	8000b50 <__aeabi_dcmple>
 80063ae:	bb48      	cbnz	r0, 8006404 <_printf_float+0xcc>
 80063b0:	2200      	movs	r2, #0
 80063b2:	2300      	movs	r3, #0
 80063b4:	4640      	mov	r0, r8
 80063b6:	4649      	mov	r1, r9
 80063b8:	f7fa fbc0 	bl	8000b3c <__aeabi_dcmplt>
 80063bc:	b110      	cbz	r0, 80063c4 <_printf_float+0x8c>
 80063be:	232d      	movs	r3, #45	; 0x2d
 80063c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c4:	4a93      	ldr	r2, [pc, #588]	; (8006614 <_printf_float+0x2dc>)
 80063c6:	4b94      	ldr	r3, [pc, #592]	; (8006618 <_printf_float+0x2e0>)
 80063c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80063cc:	bf94      	ite	ls
 80063ce:	4690      	movls	r8, r2
 80063d0:	4698      	movhi	r8, r3
 80063d2:	2303      	movs	r3, #3
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	9b05      	ldr	r3, [sp, #20]
 80063d8:	f023 0304 	bic.w	r3, r3, #4
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	f04f 0900 	mov.w	r9, #0
 80063e2:	9700      	str	r7, [sp, #0]
 80063e4:	4633      	mov	r3, r6
 80063e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80063e8:	4621      	mov	r1, r4
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 f9da 	bl	80067a4 <_printf_common>
 80063f0:	3001      	adds	r0, #1
 80063f2:	f040 8090 	bne.w	8006516 <_printf_float+0x1de>
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295
 80063fa:	b00d      	add	sp, #52	; 0x34
 80063fc:	ecbd 8b02 	vpop	{d8}
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	4640      	mov	r0, r8
 800640a:	4649      	mov	r1, r9
 800640c:	f7fa fbbe 	bl	8000b8c <__aeabi_dcmpun>
 8006410:	b140      	cbz	r0, 8006424 <_printf_float+0xec>
 8006412:	464b      	mov	r3, r9
 8006414:	2b00      	cmp	r3, #0
 8006416:	bfbc      	itt	lt
 8006418:	232d      	movlt	r3, #45	; 0x2d
 800641a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800641e:	4a7f      	ldr	r2, [pc, #508]	; (800661c <_printf_float+0x2e4>)
 8006420:	4b7f      	ldr	r3, [pc, #508]	; (8006620 <_printf_float+0x2e8>)
 8006422:	e7d1      	b.n	80063c8 <_printf_float+0x90>
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800642a:	9206      	str	r2, [sp, #24]
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	d13f      	bne.n	80064b0 <_printf_float+0x178>
 8006430:	2306      	movs	r3, #6
 8006432:	6063      	str	r3, [r4, #4]
 8006434:	9b05      	ldr	r3, [sp, #20]
 8006436:	6861      	ldr	r1, [r4, #4]
 8006438:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800643c:	2300      	movs	r3, #0
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	ab0a      	add	r3, sp, #40	; 0x28
 8006442:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006446:	ab09      	add	r3, sp, #36	; 0x24
 8006448:	ec49 8b10 	vmov	d0, r8, r9
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	6022      	str	r2, [r4, #0]
 8006450:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006454:	4628      	mov	r0, r5
 8006456:	f7ff fecf 	bl	80061f8 <__cvt>
 800645a:	9b06      	ldr	r3, [sp, #24]
 800645c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800645e:	2b47      	cmp	r3, #71	; 0x47
 8006460:	4680      	mov	r8, r0
 8006462:	d108      	bne.n	8006476 <_printf_float+0x13e>
 8006464:	1cc8      	adds	r0, r1, #3
 8006466:	db02      	blt.n	800646e <_printf_float+0x136>
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	4299      	cmp	r1, r3
 800646c:	dd41      	ble.n	80064f2 <_printf_float+0x1ba>
 800646e:	f1ab 0302 	sub.w	r3, fp, #2
 8006472:	fa5f fb83 	uxtb.w	fp, r3
 8006476:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800647a:	d820      	bhi.n	80064be <_printf_float+0x186>
 800647c:	3901      	subs	r1, #1
 800647e:	465a      	mov	r2, fp
 8006480:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006484:	9109      	str	r1, [sp, #36]	; 0x24
 8006486:	f7ff ff19 	bl	80062bc <__exponent>
 800648a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800648c:	1813      	adds	r3, r2, r0
 800648e:	2a01      	cmp	r2, #1
 8006490:	4681      	mov	r9, r0
 8006492:	6123      	str	r3, [r4, #16]
 8006494:	dc02      	bgt.n	800649c <_printf_float+0x164>
 8006496:	6822      	ldr	r2, [r4, #0]
 8006498:	07d2      	lsls	r2, r2, #31
 800649a:	d501      	bpl.n	80064a0 <_printf_float+0x168>
 800649c:	3301      	adds	r3, #1
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d09c      	beq.n	80063e2 <_printf_float+0xaa>
 80064a8:	232d      	movs	r3, #45	; 0x2d
 80064aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ae:	e798      	b.n	80063e2 <_printf_float+0xaa>
 80064b0:	9a06      	ldr	r2, [sp, #24]
 80064b2:	2a47      	cmp	r2, #71	; 0x47
 80064b4:	d1be      	bne.n	8006434 <_printf_float+0xfc>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1bc      	bne.n	8006434 <_printf_float+0xfc>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7b9      	b.n	8006432 <_printf_float+0xfa>
 80064be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80064c2:	d118      	bne.n	80064f6 <_printf_float+0x1be>
 80064c4:	2900      	cmp	r1, #0
 80064c6:	6863      	ldr	r3, [r4, #4]
 80064c8:	dd0b      	ble.n	80064e2 <_printf_float+0x1aa>
 80064ca:	6121      	str	r1, [r4, #16]
 80064cc:	b913      	cbnz	r3, 80064d4 <_printf_float+0x19c>
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	07d0      	lsls	r0, r2, #31
 80064d2:	d502      	bpl.n	80064da <_printf_float+0x1a2>
 80064d4:	3301      	adds	r3, #1
 80064d6:	440b      	add	r3, r1
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	65a1      	str	r1, [r4, #88]	; 0x58
 80064dc:	f04f 0900 	mov.w	r9, #0
 80064e0:	e7de      	b.n	80064a0 <_printf_float+0x168>
 80064e2:	b913      	cbnz	r3, 80064ea <_printf_float+0x1b2>
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	07d2      	lsls	r2, r2, #31
 80064e8:	d501      	bpl.n	80064ee <_printf_float+0x1b6>
 80064ea:	3302      	adds	r3, #2
 80064ec:	e7f4      	b.n	80064d8 <_printf_float+0x1a0>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e7f2      	b.n	80064d8 <_printf_float+0x1a0>
 80064f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f8:	4299      	cmp	r1, r3
 80064fa:	db05      	blt.n	8006508 <_printf_float+0x1d0>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	6121      	str	r1, [r4, #16]
 8006500:	07d8      	lsls	r0, r3, #31
 8006502:	d5ea      	bpl.n	80064da <_printf_float+0x1a2>
 8006504:	1c4b      	adds	r3, r1, #1
 8006506:	e7e7      	b.n	80064d8 <_printf_float+0x1a0>
 8006508:	2900      	cmp	r1, #0
 800650a:	bfd4      	ite	le
 800650c:	f1c1 0202 	rsble	r2, r1, #2
 8006510:	2201      	movgt	r2, #1
 8006512:	4413      	add	r3, r2
 8006514:	e7e0      	b.n	80064d8 <_printf_float+0x1a0>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	055a      	lsls	r2, r3, #21
 800651a:	d407      	bmi.n	800652c <_printf_float+0x1f4>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	4642      	mov	r2, r8
 8006520:	4631      	mov	r1, r6
 8006522:	4628      	mov	r0, r5
 8006524:	47b8      	blx	r7
 8006526:	3001      	adds	r0, #1
 8006528:	d12c      	bne.n	8006584 <_printf_float+0x24c>
 800652a:	e764      	b.n	80063f6 <_printf_float+0xbe>
 800652c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006530:	f240 80e0 	bls.w	80066f4 <_printf_float+0x3bc>
 8006534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006538:	2200      	movs	r2, #0
 800653a:	2300      	movs	r3, #0
 800653c:	f7fa faf4 	bl	8000b28 <__aeabi_dcmpeq>
 8006540:	2800      	cmp	r0, #0
 8006542:	d034      	beq.n	80065ae <_printf_float+0x276>
 8006544:	4a37      	ldr	r2, [pc, #220]	; (8006624 <_printf_float+0x2ec>)
 8006546:	2301      	movs	r3, #1
 8006548:	4631      	mov	r1, r6
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	f43f af51 	beq.w	80063f6 <_printf_float+0xbe>
 8006554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006558:	429a      	cmp	r2, r3
 800655a:	db02      	blt.n	8006562 <_printf_float+0x22a>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	07d8      	lsls	r0, r3, #31
 8006560:	d510      	bpl.n	8006584 <_printf_float+0x24c>
 8006562:	ee18 3a10 	vmov	r3, s16
 8006566:	4652      	mov	r2, sl
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f af41 	beq.w	80063f6 <_printf_float+0xbe>
 8006574:	f04f 0800 	mov.w	r8, #0
 8006578:	f104 091a 	add.w	r9, r4, #26
 800657c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800657e:	3b01      	subs	r3, #1
 8006580:	4543      	cmp	r3, r8
 8006582:	dc09      	bgt.n	8006598 <_printf_float+0x260>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	079b      	lsls	r3, r3, #30
 8006588:	f100 8107 	bmi.w	800679a <_printf_float+0x462>
 800658c:	68e0      	ldr	r0, [r4, #12]
 800658e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006590:	4298      	cmp	r0, r3
 8006592:	bfb8      	it	lt
 8006594:	4618      	movlt	r0, r3
 8006596:	e730      	b.n	80063fa <_printf_float+0xc2>
 8006598:	2301      	movs	r3, #1
 800659a:	464a      	mov	r2, r9
 800659c:	4631      	mov	r1, r6
 800659e:	4628      	mov	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f af27 	beq.w	80063f6 <_printf_float+0xbe>
 80065a8:	f108 0801 	add.w	r8, r8, #1
 80065ac:	e7e6      	b.n	800657c <_printf_float+0x244>
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	dc39      	bgt.n	8006628 <_printf_float+0x2f0>
 80065b4:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <_printf_float+0x2ec>)
 80065b6:	2301      	movs	r3, #1
 80065b8:	4631      	mov	r1, r6
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	f43f af19 	beq.w	80063f6 <_printf_float+0xbe>
 80065c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80065c8:	4313      	orrs	r3, r2
 80065ca:	d102      	bne.n	80065d2 <_printf_float+0x29a>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07d9      	lsls	r1, r3, #31
 80065d0:	d5d8      	bpl.n	8006584 <_printf_float+0x24c>
 80065d2:	ee18 3a10 	vmov	r3, s16
 80065d6:	4652      	mov	r2, sl
 80065d8:	4631      	mov	r1, r6
 80065da:	4628      	mov	r0, r5
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	f43f af09 	beq.w	80063f6 <_printf_float+0xbe>
 80065e4:	f04f 0900 	mov.w	r9, #0
 80065e8:	f104 0a1a 	add.w	sl, r4, #26
 80065ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ee:	425b      	negs	r3, r3
 80065f0:	454b      	cmp	r3, r9
 80065f2:	dc01      	bgt.n	80065f8 <_printf_float+0x2c0>
 80065f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f6:	e792      	b.n	800651e <_printf_float+0x1e6>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4652      	mov	r2, sl
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f aef7 	beq.w	80063f6 <_printf_float+0xbe>
 8006608:	f109 0901 	add.w	r9, r9, #1
 800660c:	e7ee      	b.n	80065ec <_printf_float+0x2b4>
 800660e:	bf00      	nop
 8006610:	7fefffff 	.word	0x7fefffff
 8006614:	08009150 	.word	0x08009150
 8006618:	08009154 	.word	0x08009154
 800661c:	08009158 	.word	0x08009158
 8006620:	0800915c 	.word	0x0800915c
 8006624:	08009160 	.word	0x08009160
 8006628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800662c:	429a      	cmp	r2, r3
 800662e:	bfa8      	it	ge
 8006630:	461a      	movge	r2, r3
 8006632:	2a00      	cmp	r2, #0
 8006634:	4691      	mov	r9, r2
 8006636:	dc37      	bgt.n	80066a8 <_printf_float+0x370>
 8006638:	f04f 0b00 	mov.w	fp, #0
 800663c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006640:	f104 021a 	add.w	r2, r4, #26
 8006644:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006646:	9305      	str	r3, [sp, #20]
 8006648:	eba3 0309 	sub.w	r3, r3, r9
 800664c:	455b      	cmp	r3, fp
 800664e:	dc33      	bgt.n	80066b8 <_printf_float+0x380>
 8006650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006654:	429a      	cmp	r2, r3
 8006656:	db3b      	blt.n	80066d0 <_printf_float+0x398>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	07da      	lsls	r2, r3, #31
 800665c:	d438      	bmi.n	80066d0 <_printf_float+0x398>
 800665e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006662:	eba2 0903 	sub.w	r9, r2, r3
 8006666:	9b05      	ldr	r3, [sp, #20]
 8006668:	1ad2      	subs	r2, r2, r3
 800666a:	4591      	cmp	r9, r2
 800666c:	bfa8      	it	ge
 800666e:	4691      	movge	r9, r2
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	dc35      	bgt.n	80066e2 <_printf_float+0x3aa>
 8006676:	f04f 0800 	mov.w	r8, #0
 800667a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800667e:	f104 0a1a 	add.w	sl, r4, #26
 8006682:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	eba3 0309 	sub.w	r3, r3, r9
 800668c:	4543      	cmp	r3, r8
 800668e:	f77f af79 	ble.w	8006584 <_printf_float+0x24c>
 8006692:	2301      	movs	r3, #1
 8006694:	4652      	mov	r2, sl
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f aeaa 	beq.w	80063f6 <_printf_float+0xbe>
 80066a2:	f108 0801 	add.w	r8, r8, #1
 80066a6:	e7ec      	b.n	8006682 <_printf_float+0x34a>
 80066a8:	4613      	mov	r3, r2
 80066aa:	4631      	mov	r1, r6
 80066ac:	4642      	mov	r2, r8
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	d1c0      	bne.n	8006638 <_printf_float+0x300>
 80066b6:	e69e      	b.n	80063f6 <_printf_float+0xbe>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	9205      	str	r2, [sp, #20]
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f ae97 	beq.w	80063f6 <_printf_float+0xbe>
 80066c8:	9a05      	ldr	r2, [sp, #20]
 80066ca:	f10b 0b01 	add.w	fp, fp, #1
 80066ce:	e7b9      	b.n	8006644 <_printf_float+0x30c>
 80066d0:	ee18 3a10 	vmov	r3, s16
 80066d4:	4652      	mov	r2, sl
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d1be      	bne.n	800665e <_printf_float+0x326>
 80066e0:	e689      	b.n	80063f6 <_printf_float+0xbe>
 80066e2:	9a05      	ldr	r2, [sp, #20]
 80066e4:	464b      	mov	r3, r9
 80066e6:	4442      	add	r2, r8
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	d1c1      	bne.n	8006676 <_printf_float+0x33e>
 80066f2:	e680      	b.n	80063f6 <_printf_float+0xbe>
 80066f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f6:	2a01      	cmp	r2, #1
 80066f8:	dc01      	bgt.n	80066fe <_printf_float+0x3c6>
 80066fa:	07db      	lsls	r3, r3, #31
 80066fc:	d53a      	bpl.n	8006774 <_printf_float+0x43c>
 80066fe:	2301      	movs	r3, #1
 8006700:	4642      	mov	r2, r8
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	f43f ae74 	beq.w	80063f6 <_printf_float+0xbe>
 800670e:	ee18 3a10 	vmov	r3, s16
 8006712:	4652      	mov	r2, sl
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	f43f ae6b 	beq.w	80063f6 <_printf_float+0xbe>
 8006720:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006724:	2200      	movs	r2, #0
 8006726:	2300      	movs	r3, #0
 8006728:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800672c:	f7fa f9fc 	bl	8000b28 <__aeabi_dcmpeq>
 8006730:	b9d8      	cbnz	r0, 800676a <_printf_float+0x432>
 8006732:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006736:	f108 0201 	add.w	r2, r8, #1
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	d10e      	bne.n	8006762 <_printf_float+0x42a>
 8006744:	e657      	b.n	80063f6 <_printf_float+0xbe>
 8006746:	2301      	movs	r3, #1
 8006748:	4652      	mov	r2, sl
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	f43f ae50 	beq.w	80063f6 <_printf_float+0xbe>
 8006756:	f108 0801 	add.w	r8, r8, #1
 800675a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675c:	3b01      	subs	r3, #1
 800675e:	4543      	cmp	r3, r8
 8006760:	dcf1      	bgt.n	8006746 <_printf_float+0x40e>
 8006762:	464b      	mov	r3, r9
 8006764:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006768:	e6da      	b.n	8006520 <_printf_float+0x1e8>
 800676a:	f04f 0800 	mov.w	r8, #0
 800676e:	f104 0a1a 	add.w	sl, r4, #26
 8006772:	e7f2      	b.n	800675a <_printf_float+0x422>
 8006774:	2301      	movs	r3, #1
 8006776:	4642      	mov	r2, r8
 8006778:	e7df      	b.n	800673a <_printf_float+0x402>
 800677a:	2301      	movs	r3, #1
 800677c:	464a      	mov	r2, r9
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	f43f ae36 	beq.w	80063f6 <_printf_float+0xbe>
 800678a:	f108 0801 	add.w	r8, r8, #1
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006792:	1a5b      	subs	r3, r3, r1
 8006794:	4543      	cmp	r3, r8
 8006796:	dcf0      	bgt.n	800677a <_printf_float+0x442>
 8006798:	e6f8      	b.n	800658c <_printf_float+0x254>
 800679a:	f04f 0800 	mov.w	r8, #0
 800679e:	f104 0919 	add.w	r9, r4, #25
 80067a2:	e7f4      	b.n	800678e <_printf_float+0x456>

080067a4 <_printf_common>:
 80067a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a8:	4616      	mov	r6, r2
 80067aa:	4699      	mov	r9, r3
 80067ac:	688a      	ldr	r2, [r1, #8]
 80067ae:	690b      	ldr	r3, [r1, #16]
 80067b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067b4:	4293      	cmp	r3, r2
 80067b6:	bfb8      	it	lt
 80067b8:	4613      	movlt	r3, r2
 80067ba:	6033      	str	r3, [r6, #0]
 80067bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067c0:	4607      	mov	r7, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	b10a      	cbz	r2, 80067ca <_printf_common+0x26>
 80067c6:	3301      	adds	r3, #1
 80067c8:	6033      	str	r3, [r6, #0]
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	0699      	lsls	r1, r3, #26
 80067ce:	bf42      	ittt	mi
 80067d0:	6833      	ldrmi	r3, [r6, #0]
 80067d2:	3302      	addmi	r3, #2
 80067d4:	6033      	strmi	r3, [r6, #0]
 80067d6:	6825      	ldr	r5, [r4, #0]
 80067d8:	f015 0506 	ands.w	r5, r5, #6
 80067dc:	d106      	bne.n	80067ec <_printf_common+0x48>
 80067de:	f104 0a19 	add.w	sl, r4, #25
 80067e2:	68e3      	ldr	r3, [r4, #12]
 80067e4:	6832      	ldr	r2, [r6, #0]
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	42ab      	cmp	r3, r5
 80067ea:	dc26      	bgt.n	800683a <_printf_common+0x96>
 80067ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067f0:	1e13      	subs	r3, r2, #0
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	bf18      	it	ne
 80067f6:	2301      	movne	r3, #1
 80067f8:	0692      	lsls	r2, r2, #26
 80067fa:	d42b      	bmi.n	8006854 <_printf_common+0xb0>
 80067fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006800:	4649      	mov	r1, r9
 8006802:	4638      	mov	r0, r7
 8006804:	47c0      	blx	r8
 8006806:	3001      	adds	r0, #1
 8006808:	d01e      	beq.n	8006848 <_printf_common+0xa4>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	6922      	ldr	r2, [r4, #16]
 800680e:	f003 0306 	and.w	r3, r3, #6
 8006812:	2b04      	cmp	r3, #4
 8006814:	bf02      	ittt	eq
 8006816:	68e5      	ldreq	r5, [r4, #12]
 8006818:	6833      	ldreq	r3, [r6, #0]
 800681a:	1aed      	subeq	r5, r5, r3
 800681c:	68a3      	ldr	r3, [r4, #8]
 800681e:	bf0c      	ite	eq
 8006820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006824:	2500      	movne	r5, #0
 8006826:	4293      	cmp	r3, r2
 8006828:	bfc4      	itt	gt
 800682a:	1a9b      	subgt	r3, r3, r2
 800682c:	18ed      	addgt	r5, r5, r3
 800682e:	2600      	movs	r6, #0
 8006830:	341a      	adds	r4, #26
 8006832:	42b5      	cmp	r5, r6
 8006834:	d11a      	bne.n	800686c <_printf_common+0xc8>
 8006836:	2000      	movs	r0, #0
 8006838:	e008      	b.n	800684c <_printf_common+0xa8>
 800683a:	2301      	movs	r3, #1
 800683c:	4652      	mov	r2, sl
 800683e:	4649      	mov	r1, r9
 8006840:	4638      	mov	r0, r7
 8006842:	47c0      	blx	r8
 8006844:	3001      	adds	r0, #1
 8006846:	d103      	bne.n	8006850 <_printf_common+0xac>
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006850:	3501      	adds	r5, #1
 8006852:	e7c6      	b.n	80067e2 <_printf_common+0x3e>
 8006854:	18e1      	adds	r1, r4, r3
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	2030      	movs	r0, #48	; 0x30
 800685a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800685e:	4422      	add	r2, r4
 8006860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006868:	3302      	adds	r3, #2
 800686a:	e7c7      	b.n	80067fc <_printf_common+0x58>
 800686c:	2301      	movs	r3, #1
 800686e:	4622      	mov	r2, r4
 8006870:	4649      	mov	r1, r9
 8006872:	4638      	mov	r0, r7
 8006874:	47c0      	blx	r8
 8006876:	3001      	adds	r0, #1
 8006878:	d0e6      	beq.n	8006848 <_printf_common+0xa4>
 800687a:	3601      	adds	r6, #1
 800687c:	e7d9      	b.n	8006832 <_printf_common+0x8e>
	...

08006880 <_printf_i>:
 8006880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	7e0f      	ldrb	r7, [r1, #24]
 8006886:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006888:	2f78      	cmp	r7, #120	; 0x78
 800688a:	4691      	mov	r9, r2
 800688c:	4680      	mov	r8, r0
 800688e:	460c      	mov	r4, r1
 8006890:	469a      	mov	sl, r3
 8006892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006896:	d807      	bhi.n	80068a8 <_printf_i+0x28>
 8006898:	2f62      	cmp	r7, #98	; 0x62
 800689a:	d80a      	bhi.n	80068b2 <_printf_i+0x32>
 800689c:	2f00      	cmp	r7, #0
 800689e:	f000 80d4 	beq.w	8006a4a <_printf_i+0x1ca>
 80068a2:	2f58      	cmp	r7, #88	; 0x58
 80068a4:	f000 80c0 	beq.w	8006a28 <_printf_i+0x1a8>
 80068a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068b0:	e03a      	b.n	8006928 <_printf_i+0xa8>
 80068b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068b6:	2b15      	cmp	r3, #21
 80068b8:	d8f6      	bhi.n	80068a8 <_printf_i+0x28>
 80068ba:	a101      	add	r1, pc, #4	; (adr r1, 80068c0 <_printf_i+0x40>)
 80068bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068c0:	08006919 	.word	0x08006919
 80068c4:	0800692d 	.word	0x0800692d
 80068c8:	080068a9 	.word	0x080068a9
 80068cc:	080068a9 	.word	0x080068a9
 80068d0:	080068a9 	.word	0x080068a9
 80068d4:	080068a9 	.word	0x080068a9
 80068d8:	0800692d 	.word	0x0800692d
 80068dc:	080068a9 	.word	0x080068a9
 80068e0:	080068a9 	.word	0x080068a9
 80068e4:	080068a9 	.word	0x080068a9
 80068e8:	080068a9 	.word	0x080068a9
 80068ec:	08006a31 	.word	0x08006a31
 80068f0:	08006959 	.word	0x08006959
 80068f4:	080069eb 	.word	0x080069eb
 80068f8:	080068a9 	.word	0x080068a9
 80068fc:	080068a9 	.word	0x080068a9
 8006900:	08006a53 	.word	0x08006a53
 8006904:	080068a9 	.word	0x080068a9
 8006908:	08006959 	.word	0x08006959
 800690c:	080068a9 	.word	0x080068a9
 8006910:	080068a9 	.word	0x080068a9
 8006914:	080069f3 	.word	0x080069f3
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	1d1a      	adds	r2, r3, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	602a      	str	r2, [r5, #0]
 8006920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006928:	2301      	movs	r3, #1
 800692a:	e09f      	b.n	8006a6c <_printf_i+0x1ec>
 800692c:	6820      	ldr	r0, [r4, #0]
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	0607      	lsls	r7, r0, #24
 8006932:	f103 0104 	add.w	r1, r3, #4
 8006936:	6029      	str	r1, [r5, #0]
 8006938:	d501      	bpl.n	800693e <_printf_i+0xbe>
 800693a:	681e      	ldr	r6, [r3, #0]
 800693c:	e003      	b.n	8006946 <_printf_i+0xc6>
 800693e:	0646      	lsls	r6, r0, #25
 8006940:	d5fb      	bpl.n	800693a <_printf_i+0xba>
 8006942:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006946:	2e00      	cmp	r6, #0
 8006948:	da03      	bge.n	8006952 <_printf_i+0xd2>
 800694a:	232d      	movs	r3, #45	; 0x2d
 800694c:	4276      	negs	r6, r6
 800694e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006952:	485a      	ldr	r0, [pc, #360]	; (8006abc <_printf_i+0x23c>)
 8006954:	230a      	movs	r3, #10
 8006956:	e012      	b.n	800697e <_printf_i+0xfe>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	6820      	ldr	r0, [r4, #0]
 800695c:	1d19      	adds	r1, r3, #4
 800695e:	6029      	str	r1, [r5, #0]
 8006960:	0605      	lsls	r5, r0, #24
 8006962:	d501      	bpl.n	8006968 <_printf_i+0xe8>
 8006964:	681e      	ldr	r6, [r3, #0]
 8006966:	e002      	b.n	800696e <_printf_i+0xee>
 8006968:	0641      	lsls	r1, r0, #25
 800696a:	d5fb      	bpl.n	8006964 <_printf_i+0xe4>
 800696c:	881e      	ldrh	r6, [r3, #0]
 800696e:	4853      	ldr	r0, [pc, #332]	; (8006abc <_printf_i+0x23c>)
 8006970:	2f6f      	cmp	r7, #111	; 0x6f
 8006972:	bf0c      	ite	eq
 8006974:	2308      	moveq	r3, #8
 8006976:	230a      	movne	r3, #10
 8006978:	2100      	movs	r1, #0
 800697a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800697e:	6865      	ldr	r5, [r4, #4]
 8006980:	60a5      	str	r5, [r4, #8]
 8006982:	2d00      	cmp	r5, #0
 8006984:	bfa2      	ittt	ge
 8006986:	6821      	ldrge	r1, [r4, #0]
 8006988:	f021 0104 	bicge.w	r1, r1, #4
 800698c:	6021      	strge	r1, [r4, #0]
 800698e:	b90e      	cbnz	r6, 8006994 <_printf_i+0x114>
 8006990:	2d00      	cmp	r5, #0
 8006992:	d04b      	beq.n	8006a2c <_printf_i+0x1ac>
 8006994:	4615      	mov	r5, r2
 8006996:	fbb6 f1f3 	udiv	r1, r6, r3
 800699a:	fb03 6711 	mls	r7, r3, r1, r6
 800699e:	5dc7      	ldrb	r7, [r0, r7]
 80069a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069a4:	4637      	mov	r7, r6
 80069a6:	42bb      	cmp	r3, r7
 80069a8:	460e      	mov	r6, r1
 80069aa:	d9f4      	bls.n	8006996 <_printf_i+0x116>
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d10b      	bne.n	80069c8 <_printf_i+0x148>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	07de      	lsls	r6, r3, #31
 80069b4:	d508      	bpl.n	80069c8 <_printf_i+0x148>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	6861      	ldr	r1, [r4, #4]
 80069ba:	4299      	cmp	r1, r3
 80069bc:	bfde      	ittt	le
 80069be:	2330      	movle	r3, #48	; 0x30
 80069c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069c8:	1b52      	subs	r2, r2, r5
 80069ca:	6122      	str	r2, [r4, #16]
 80069cc:	f8cd a000 	str.w	sl, [sp]
 80069d0:	464b      	mov	r3, r9
 80069d2:	aa03      	add	r2, sp, #12
 80069d4:	4621      	mov	r1, r4
 80069d6:	4640      	mov	r0, r8
 80069d8:	f7ff fee4 	bl	80067a4 <_printf_common>
 80069dc:	3001      	adds	r0, #1
 80069de:	d14a      	bne.n	8006a76 <_printf_i+0x1f6>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	b004      	add	sp, #16
 80069e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	f043 0320 	orr.w	r3, r3, #32
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	4833      	ldr	r0, [pc, #204]	; (8006ac0 <_printf_i+0x240>)
 80069f4:	2778      	movs	r7, #120	; 0x78
 80069f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	6829      	ldr	r1, [r5, #0]
 80069fe:	061f      	lsls	r7, r3, #24
 8006a00:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a04:	d402      	bmi.n	8006a0c <_printf_i+0x18c>
 8006a06:	065f      	lsls	r7, r3, #25
 8006a08:	bf48      	it	mi
 8006a0a:	b2b6      	uxthmi	r6, r6
 8006a0c:	07df      	lsls	r7, r3, #31
 8006a0e:	bf48      	it	mi
 8006a10:	f043 0320 	orrmi.w	r3, r3, #32
 8006a14:	6029      	str	r1, [r5, #0]
 8006a16:	bf48      	it	mi
 8006a18:	6023      	strmi	r3, [r4, #0]
 8006a1a:	b91e      	cbnz	r6, 8006a24 <_printf_i+0x1a4>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	f023 0320 	bic.w	r3, r3, #32
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	2310      	movs	r3, #16
 8006a26:	e7a7      	b.n	8006978 <_printf_i+0xf8>
 8006a28:	4824      	ldr	r0, [pc, #144]	; (8006abc <_printf_i+0x23c>)
 8006a2a:	e7e4      	b.n	80069f6 <_printf_i+0x176>
 8006a2c:	4615      	mov	r5, r2
 8006a2e:	e7bd      	b.n	80069ac <_printf_i+0x12c>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	6826      	ldr	r6, [r4, #0]
 8006a34:	6961      	ldr	r1, [r4, #20]
 8006a36:	1d18      	adds	r0, r3, #4
 8006a38:	6028      	str	r0, [r5, #0]
 8006a3a:	0635      	lsls	r5, r6, #24
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	d501      	bpl.n	8006a44 <_printf_i+0x1c4>
 8006a40:	6019      	str	r1, [r3, #0]
 8006a42:	e002      	b.n	8006a4a <_printf_i+0x1ca>
 8006a44:	0670      	lsls	r0, r6, #25
 8006a46:	d5fb      	bpl.n	8006a40 <_printf_i+0x1c0>
 8006a48:	8019      	strh	r1, [r3, #0]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6123      	str	r3, [r4, #16]
 8006a4e:	4615      	mov	r5, r2
 8006a50:	e7bc      	b.n	80069cc <_printf_i+0x14c>
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	1d1a      	adds	r2, r3, #4
 8006a56:	602a      	str	r2, [r5, #0]
 8006a58:	681d      	ldr	r5, [r3, #0]
 8006a5a:	6862      	ldr	r2, [r4, #4]
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f7f9 fbe6 	bl	8000230 <memchr>
 8006a64:	b108      	cbz	r0, 8006a6a <_printf_i+0x1ea>
 8006a66:	1b40      	subs	r0, r0, r5
 8006a68:	6060      	str	r0, [r4, #4]
 8006a6a:	6863      	ldr	r3, [r4, #4]
 8006a6c:	6123      	str	r3, [r4, #16]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a74:	e7aa      	b.n	80069cc <_printf_i+0x14c>
 8006a76:	6923      	ldr	r3, [r4, #16]
 8006a78:	462a      	mov	r2, r5
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	47d0      	blx	sl
 8006a80:	3001      	adds	r0, #1
 8006a82:	d0ad      	beq.n	80069e0 <_printf_i+0x160>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	079b      	lsls	r3, r3, #30
 8006a88:	d413      	bmi.n	8006ab2 <_printf_i+0x232>
 8006a8a:	68e0      	ldr	r0, [r4, #12]
 8006a8c:	9b03      	ldr	r3, [sp, #12]
 8006a8e:	4298      	cmp	r0, r3
 8006a90:	bfb8      	it	lt
 8006a92:	4618      	movlt	r0, r3
 8006a94:	e7a6      	b.n	80069e4 <_printf_i+0x164>
 8006a96:	2301      	movs	r3, #1
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	47d0      	blx	sl
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d09d      	beq.n	80069e0 <_printf_i+0x160>
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	9903      	ldr	r1, [sp, #12]
 8006aaa:	1a5b      	subs	r3, r3, r1
 8006aac:	42ab      	cmp	r3, r5
 8006aae:	dcf2      	bgt.n	8006a96 <_printf_i+0x216>
 8006ab0:	e7eb      	b.n	8006a8a <_printf_i+0x20a>
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	f104 0619 	add.w	r6, r4, #25
 8006ab8:	e7f5      	b.n	8006aa6 <_printf_i+0x226>
 8006aba:	bf00      	nop
 8006abc:	08009162 	.word	0x08009162
 8006ac0:	08009173 	.word	0x08009173

08006ac4 <std>:
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4604      	mov	r4, r0
 8006aca:	e9c0 3300 	strd	r3, r3, [r0]
 8006ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ad2:	6083      	str	r3, [r0, #8]
 8006ad4:	8181      	strh	r1, [r0, #12]
 8006ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ad8:	81c2      	strh	r2, [r0, #14]
 8006ada:	6183      	str	r3, [r0, #24]
 8006adc:	4619      	mov	r1, r3
 8006ade:	2208      	movs	r2, #8
 8006ae0:	305c      	adds	r0, #92	; 0x5c
 8006ae2:	f000 fa2b 	bl	8006f3c <memset>
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <std+0x58>)
 8006ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8006aea:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <std+0x5c>)
 8006aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <std+0x60>)
 8006af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <std+0x64>)
 8006af4:	6323      	str	r3, [r4, #48]	; 0x30
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <std+0x68>)
 8006af8:	6224      	str	r4, [r4, #32]
 8006afa:	429c      	cmp	r4, r3
 8006afc:	d006      	beq.n	8006b0c <std+0x48>
 8006afe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b02:	4294      	cmp	r4, r2
 8006b04:	d002      	beq.n	8006b0c <std+0x48>
 8006b06:	33d0      	adds	r3, #208	; 0xd0
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	d105      	bne.n	8006b18 <std+0x54>
 8006b0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b14:	f000 ba8e 	b.w	8007034 <__retarget_lock_init_recursive>
 8006b18:	bd10      	pop	{r4, pc}
 8006b1a:	bf00      	nop
 8006b1c:	08006d8d 	.word	0x08006d8d
 8006b20:	08006daf 	.word	0x08006daf
 8006b24:	08006de7 	.word	0x08006de7
 8006b28:	08006e0b 	.word	0x08006e0b
 8006b2c:	20000388 	.word	0x20000388

08006b30 <stdio_exit_handler>:
 8006b30:	4a02      	ldr	r2, [pc, #8]	; (8006b3c <stdio_exit_handler+0xc>)
 8006b32:	4903      	ldr	r1, [pc, #12]	; (8006b40 <stdio_exit_handler+0x10>)
 8006b34:	4803      	ldr	r0, [pc, #12]	; (8006b44 <stdio_exit_handler+0x14>)
 8006b36:	f000 b869 	b.w	8006c0c <_fwalk_sglue>
 8006b3a:	bf00      	nop
 8006b3c:	2000000c 	.word	0x2000000c
 8006b40:	08008c71 	.word	0x08008c71
 8006b44:	20000018 	.word	0x20000018

08006b48 <cleanup_stdio>:
 8006b48:	6841      	ldr	r1, [r0, #4]
 8006b4a:	4b0c      	ldr	r3, [pc, #48]	; (8006b7c <cleanup_stdio+0x34>)
 8006b4c:	4299      	cmp	r1, r3
 8006b4e:	b510      	push	{r4, lr}
 8006b50:	4604      	mov	r4, r0
 8006b52:	d001      	beq.n	8006b58 <cleanup_stdio+0x10>
 8006b54:	f002 f88c 	bl	8008c70 <_fflush_r>
 8006b58:	68a1      	ldr	r1, [r4, #8]
 8006b5a:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <cleanup_stdio+0x38>)
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	d002      	beq.n	8006b66 <cleanup_stdio+0x1e>
 8006b60:	4620      	mov	r0, r4
 8006b62:	f002 f885 	bl	8008c70 <_fflush_r>
 8006b66:	68e1      	ldr	r1, [r4, #12]
 8006b68:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <cleanup_stdio+0x3c>)
 8006b6a:	4299      	cmp	r1, r3
 8006b6c:	d004      	beq.n	8006b78 <cleanup_stdio+0x30>
 8006b6e:	4620      	mov	r0, r4
 8006b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b74:	f002 b87c 	b.w	8008c70 <_fflush_r>
 8006b78:	bd10      	pop	{r4, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000388 	.word	0x20000388
 8006b80:	200003f0 	.word	0x200003f0
 8006b84:	20000458 	.word	0x20000458

08006b88 <global_stdio_init.part.0>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <global_stdio_init.part.0+0x30>)
 8006b8c:	4c0b      	ldr	r4, [pc, #44]	; (8006bbc <global_stdio_init.part.0+0x34>)
 8006b8e:	4a0c      	ldr	r2, [pc, #48]	; (8006bc0 <global_stdio_init.part.0+0x38>)
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	4620      	mov	r0, r4
 8006b94:	2200      	movs	r2, #0
 8006b96:	2104      	movs	r1, #4
 8006b98:	f7ff ff94 	bl	8006ac4 <std>
 8006b9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	2109      	movs	r1, #9
 8006ba4:	f7ff ff8e 	bl	8006ac4 <std>
 8006ba8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006bac:	2202      	movs	r2, #2
 8006bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb2:	2112      	movs	r1, #18
 8006bb4:	f7ff bf86 	b.w	8006ac4 <std>
 8006bb8:	200004c0 	.word	0x200004c0
 8006bbc:	20000388 	.word	0x20000388
 8006bc0:	08006b31 	.word	0x08006b31

08006bc4 <__sfp_lock_acquire>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__sfp_lock_acquire+0x8>)
 8006bc6:	f000 ba36 	b.w	8007036 <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	200004c9 	.word	0x200004c9

08006bd0 <__sfp_lock_release>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__sfp_lock_release+0x8>)
 8006bd2:	f000 ba31 	b.w	8007038 <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	200004c9 	.word	0x200004c9

08006bdc <__sinit>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4604      	mov	r4, r0
 8006be0:	f7ff fff0 	bl	8006bc4 <__sfp_lock_acquire>
 8006be4:	6a23      	ldr	r3, [r4, #32]
 8006be6:	b11b      	cbz	r3, 8006bf0 <__sinit+0x14>
 8006be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bec:	f7ff bff0 	b.w	8006bd0 <__sfp_lock_release>
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <__sinit+0x28>)
 8006bf2:	6223      	str	r3, [r4, #32]
 8006bf4:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <__sinit+0x2c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f5      	bne.n	8006be8 <__sinit+0xc>
 8006bfc:	f7ff ffc4 	bl	8006b88 <global_stdio_init.part.0>
 8006c00:	e7f2      	b.n	8006be8 <__sinit+0xc>
 8006c02:	bf00      	nop
 8006c04:	08006b49 	.word	0x08006b49
 8006c08:	200004c0 	.word	0x200004c0

08006c0c <_fwalk_sglue>:
 8006c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c10:	4607      	mov	r7, r0
 8006c12:	4688      	mov	r8, r1
 8006c14:	4614      	mov	r4, r2
 8006c16:	2600      	movs	r6, #0
 8006c18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c20:	d505      	bpl.n	8006c2e <_fwalk_sglue+0x22>
 8006c22:	6824      	ldr	r4, [r4, #0]
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	d1f7      	bne.n	8006c18 <_fwalk_sglue+0xc>
 8006c28:	4630      	mov	r0, r6
 8006c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d907      	bls.n	8006c44 <_fwalk_sglue+0x38>
 8006c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	d003      	beq.n	8006c44 <_fwalk_sglue+0x38>
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4638      	mov	r0, r7
 8006c40:	47c0      	blx	r8
 8006c42:	4306      	orrs	r6, r0
 8006c44:	3568      	adds	r5, #104	; 0x68
 8006c46:	e7e9      	b.n	8006c1c <_fwalk_sglue+0x10>

08006c48 <iprintf>:
 8006c48:	b40f      	push	{r0, r1, r2, r3}
 8006c4a:	b507      	push	{r0, r1, r2, lr}
 8006c4c:	4906      	ldr	r1, [pc, #24]	; (8006c68 <iprintf+0x20>)
 8006c4e:	ab04      	add	r3, sp, #16
 8006c50:	6808      	ldr	r0, [r1, #0]
 8006c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c56:	6881      	ldr	r1, [r0, #8]
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	f001 fe69 	bl	8008930 <_vfiprintf_r>
 8006c5e:	b003      	add	sp, #12
 8006c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c64:	b004      	add	sp, #16
 8006c66:	4770      	bx	lr
 8006c68:	20000064 	.word	0x20000064

08006c6c <_puts_r>:
 8006c6c:	6a03      	ldr	r3, [r0, #32]
 8006c6e:	b570      	push	{r4, r5, r6, lr}
 8006c70:	6884      	ldr	r4, [r0, #8]
 8006c72:	4605      	mov	r5, r0
 8006c74:	460e      	mov	r6, r1
 8006c76:	b90b      	cbnz	r3, 8006c7c <_puts_r+0x10>
 8006c78:	f7ff ffb0 	bl	8006bdc <__sinit>
 8006c7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c7e:	07db      	lsls	r3, r3, #31
 8006c80:	d405      	bmi.n	8006c8e <_puts_r+0x22>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	0598      	lsls	r0, r3, #22
 8006c86:	d402      	bmi.n	8006c8e <_puts_r+0x22>
 8006c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c8a:	f000 f9d4 	bl	8007036 <__retarget_lock_acquire_recursive>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	0719      	lsls	r1, r3, #28
 8006c92:	d513      	bpl.n	8006cbc <_puts_r+0x50>
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	b18b      	cbz	r3, 8006cbc <_puts_r+0x50>
 8006c98:	3e01      	subs	r6, #1
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	60a3      	str	r3, [r4, #8]
 8006ca4:	b9e9      	cbnz	r1, 8006ce2 <_puts_r+0x76>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da2e      	bge.n	8006d08 <_puts_r+0x9c>
 8006caa:	4622      	mov	r2, r4
 8006cac:	210a      	movs	r1, #10
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 f8af 	bl	8006e12 <__swbuf_r>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d007      	beq.n	8006cc8 <_puts_r+0x5c>
 8006cb8:	250a      	movs	r5, #10
 8006cba:	e007      	b.n	8006ccc <_puts_r+0x60>
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f8e4 	bl	8006e8c <__swsetup_r>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d0e7      	beq.n	8006c98 <_puts_r+0x2c>
 8006cc8:	f04f 35ff 	mov.w	r5, #4294967295
 8006ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cce:	07da      	lsls	r2, r3, #31
 8006cd0:	d405      	bmi.n	8006cde <_puts_r+0x72>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	059b      	lsls	r3, r3, #22
 8006cd6:	d402      	bmi.n	8006cde <_puts_r+0x72>
 8006cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cda:	f000 f9ad 	bl	8007038 <__retarget_lock_release_recursive>
 8006cde:	4628      	mov	r0, r5
 8006ce0:	bd70      	pop	{r4, r5, r6, pc}
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da04      	bge.n	8006cf0 <_puts_r+0x84>
 8006ce6:	69a2      	ldr	r2, [r4, #24]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	dc06      	bgt.n	8006cfa <_puts_r+0x8e>
 8006cec:	290a      	cmp	r1, #10
 8006cee:	d004      	beq.n	8006cfa <_puts_r+0x8e>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	6022      	str	r2, [r4, #0]
 8006cf6:	7019      	strb	r1, [r3, #0]
 8006cf8:	e7cf      	b.n	8006c9a <_puts_r+0x2e>
 8006cfa:	4622      	mov	r2, r4
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f000 f888 	bl	8006e12 <__swbuf_r>
 8006d02:	3001      	adds	r0, #1
 8006d04:	d1c9      	bne.n	8006c9a <_puts_r+0x2e>
 8006d06:	e7df      	b.n	8006cc8 <_puts_r+0x5c>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	250a      	movs	r5, #10
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	6022      	str	r2, [r4, #0]
 8006d10:	701d      	strb	r5, [r3, #0]
 8006d12:	e7db      	b.n	8006ccc <_puts_r+0x60>

08006d14 <puts>:
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <puts+0xc>)
 8006d16:	4601      	mov	r1, r0
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	f7ff bfa7 	b.w	8006c6c <_puts_r>
 8006d1e:	bf00      	nop
 8006d20:	20000064 	.word	0x20000064

08006d24 <sniprintf>:
 8006d24:	b40c      	push	{r2, r3}
 8006d26:	b530      	push	{r4, r5, lr}
 8006d28:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <sniprintf+0x64>)
 8006d2a:	1e0c      	subs	r4, r1, #0
 8006d2c:	681d      	ldr	r5, [r3, #0]
 8006d2e:	b09d      	sub	sp, #116	; 0x74
 8006d30:	da08      	bge.n	8006d44 <sniprintf+0x20>
 8006d32:	238b      	movs	r3, #139	; 0x8b
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3a:	b01d      	add	sp, #116	; 0x74
 8006d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d40:	b002      	add	sp, #8
 8006d42:	4770      	bx	lr
 8006d44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d4c:	bf14      	ite	ne
 8006d4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d52:	4623      	moveq	r3, r4
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d5c:	9002      	str	r0, [sp, #8]
 8006d5e:	9006      	str	r0, [sp, #24]
 8006d60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d66:	ab21      	add	r3, sp, #132	; 0x84
 8006d68:	a902      	add	r1, sp, #8
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	f001 fcb7 	bl	80086e0 <_svfiprintf_r>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	bfbc      	itt	lt
 8006d76:	238b      	movlt	r3, #139	; 0x8b
 8006d78:	602b      	strlt	r3, [r5, #0]
 8006d7a:	2c00      	cmp	r4, #0
 8006d7c:	d0dd      	beq.n	8006d3a <sniprintf+0x16>
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e7d9      	b.n	8006d3a <sniprintf+0x16>
 8006d86:	bf00      	nop
 8006d88:	20000064 	.word	0x20000064

08006d8c <__sread>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	460c      	mov	r4, r1
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	f000 f900 	bl	8006f98 <_read_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	bfab      	itete	ge
 8006d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006da0:	181b      	addge	r3, r3, r0
 8006da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006da6:	bfac      	ite	ge
 8006da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006daa:	81a3      	strhlt	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__swrite>:
 8006dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db2:	461f      	mov	r7, r3
 8006db4:	898b      	ldrh	r3, [r1, #12]
 8006db6:	05db      	lsls	r3, r3, #23
 8006db8:	4605      	mov	r5, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	d505      	bpl.n	8006dcc <__swrite+0x1e>
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f000 f8d4 	bl	8006f74 <_lseek_r>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	4632      	mov	r2, r6
 8006dda:	463b      	mov	r3, r7
 8006ddc:	4628      	mov	r0, r5
 8006dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de2:	f000 b8eb 	b.w	8006fbc <_write_r>

08006de6 <__sseek>:
 8006de6:	b510      	push	{r4, lr}
 8006de8:	460c      	mov	r4, r1
 8006dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dee:	f000 f8c1 	bl	8006f74 <_lseek_r>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	bf15      	itete	ne
 8006df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e02:	81a3      	strheq	r3, [r4, #12]
 8006e04:	bf18      	it	ne
 8006e06:	81a3      	strhne	r3, [r4, #12]
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <__sclose>:
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 b8a1 	b.w	8006f54 <_close_r>

08006e12 <__swbuf_r>:
 8006e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e14:	460e      	mov	r6, r1
 8006e16:	4614      	mov	r4, r2
 8006e18:	4605      	mov	r5, r0
 8006e1a:	b118      	cbz	r0, 8006e24 <__swbuf_r+0x12>
 8006e1c:	6a03      	ldr	r3, [r0, #32]
 8006e1e:	b90b      	cbnz	r3, 8006e24 <__swbuf_r+0x12>
 8006e20:	f7ff fedc 	bl	8006bdc <__sinit>
 8006e24:	69a3      	ldr	r3, [r4, #24]
 8006e26:	60a3      	str	r3, [r4, #8]
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	071a      	lsls	r2, r3, #28
 8006e2c:	d525      	bpl.n	8006e7a <__swbuf_r+0x68>
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	b31b      	cbz	r3, 8006e7a <__swbuf_r+0x68>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	6922      	ldr	r2, [r4, #16]
 8006e36:	1a98      	subs	r0, r3, r2
 8006e38:	6963      	ldr	r3, [r4, #20]
 8006e3a:	b2f6      	uxtb	r6, r6
 8006e3c:	4283      	cmp	r3, r0
 8006e3e:	4637      	mov	r7, r6
 8006e40:	dc04      	bgt.n	8006e4c <__swbuf_r+0x3a>
 8006e42:	4621      	mov	r1, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	f001 ff13 	bl	8008c70 <_fflush_r>
 8006e4a:	b9e0      	cbnz	r0, 8006e86 <__swbuf_r+0x74>
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	60a3      	str	r3, [r4, #8]
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	6022      	str	r2, [r4, #0]
 8006e58:	701e      	strb	r6, [r3, #0]
 8006e5a:	6962      	ldr	r2, [r4, #20]
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d004      	beq.n	8006e6c <__swbuf_r+0x5a>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	07db      	lsls	r3, r3, #31
 8006e66:	d506      	bpl.n	8006e76 <__swbuf_r+0x64>
 8006e68:	2e0a      	cmp	r6, #10
 8006e6a:	d104      	bne.n	8006e76 <__swbuf_r+0x64>
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f001 fefe 	bl	8008c70 <_fflush_r>
 8006e74:	b938      	cbnz	r0, 8006e86 <__swbuf_r+0x74>
 8006e76:	4638      	mov	r0, r7
 8006e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f000 f805 	bl	8006e8c <__swsetup_r>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d0d5      	beq.n	8006e32 <__swbuf_r+0x20>
 8006e86:	f04f 37ff 	mov.w	r7, #4294967295
 8006e8a:	e7f4      	b.n	8006e76 <__swbuf_r+0x64>

08006e8c <__swsetup_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4b2a      	ldr	r3, [pc, #168]	; (8006f38 <__swsetup_r+0xac>)
 8006e90:	4605      	mov	r5, r0
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	460c      	mov	r4, r1
 8006e96:	b118      	cbz	r0, 8006ea0 <__swsetup_r+0x14>
 8006e98:	6a03      	ldr	r3, [r0, #32]
 8006e9a:	b90b      	cbnz	r3, 8006ea0 <__swsetup_r+0x14>
 8006e9c:	f7ff fe9e 	bl	8006bdc <__sinit>
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ea6:	0718      	lsls	r0, r3, #28
 8006ea8:	d422      	bmi.n	8006ef0 <__swsetup_r+0x64>
 8006eaa:	06d9      	lsls	r1, r3, #27
 8006eac:	d407      	bmi.n	8006ebe <__swsetup_r+0x32>
 8006eae:	2309      	movs	r3, #9
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	e034      	b.n	8006f28 <__swsetup_r+0x9c>
 8006ebe:	0758      	lsls	r0, r3, #29
 8006ec0:	d512      	bpl.n	8006ee8 <__swsetup_r+0x5c>
 8006ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ec4:	b141      	cbz	r1, 8006ed8 <__swsetup_r+0x4c>
 8006ec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eca:	4299      	cmp	r1, r3
 8006ecc:	d002      	beq.n	8006ed4 <__swsetup_r+0x48>
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 ff30 	bl	8007d34 <_free_r>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6363      	str	r3, [r4, #52]	; 0x34
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ede:	81a3      	strh	r3, [r4, #12]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	6923      	ldr	r3, [r4, #16]
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f043 0308 	orr.w	r3, r3, #8
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	b94b      	cbnz	r3, 8006f08 <__swsetup_r+0x7c>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efe:	d003      	beq.n	8006f08 <__swsetup_r+0x7c>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4628      	mov	r0, r5
 8006f04:	f001 ff02 	bl	8008d0c <__smakebuf_r>
 8006f08:	89a0      	ldrh	r0, [r4, #12]
 8006f0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f0e:	f010 0301 	ands.w	r3, r0, #1
 8006f12:	d00a      	beq.n	8006f2a <__swsetup_r+0x9e>
 8006f14:	2300      	movs	r3, #0
 8006f16:	60a3      	str	r3, [r4, #8]
 8006f18:	6963      	ldr	r3, [r4, #20]
 8006f1a:	425b      	negs	r3, r3
 8006f1c:	61a3      	str	r3, [r4, #24]
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	b943      	cbnz	r3, 8006f34 <__swsetup_r+0xa8>
 8006f22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f26:	d1c4      	bne.n	8006eb2 <__swsetup_r+0x26>
 8006f28:	bd38      	pop	{r3, r4, r5, pc}
 8006f2a:	0781      	lsls	r1, r0, #30
 8006f2c:	bf58      	it	pl
 8006f2e:	6963      	ldrpl	r3, [r4, #20]
 8006f30:	60a3      	str	r3, [r4, #8]
 8006f32:	e7f4      	b.n	8006f1e <__swsetup_r+0x92>
 8006f34:	2000      	movs	r0, #0
 8006f36:	e7f7      	b.n	8006f28 <__swsetup_r+0x9c>
 8006f38:	20000064 	.word	0x20000064

08006f3c <memset>:
 8006f3c:	4402      	add	r2, r0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d100      	bne.n	8006f46 <memset+0xa>
 8006f44:	4770      	bx	lr
 8006f46:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4a:	e7f9      	b.n	8006f40 <memset+0x4>

08006f4c <_localeconv_r>:
 8006f4c:	4800      	ldr	r0, [pc, #0]	; (8006f50 <_localeconv_r+0x4>)
 8006f4e:	4770      	bx	lr
 8006f50:	20000158 	.word	0x20000158

08006f54 <_close_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d06      	ldr	r5, [pc, #24]	; (8006f70 <_close_r+0x1c>)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7fb fb19 	bl	8002596 <_close>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_close_r+0x1a>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_close_r+0x1a>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	200004c4 	.word	0x200004c4

08006f74 <_lseek_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_lseek_r+0x20>)
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f7fb fb2e 	bl	80025e4 <_lseek>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_lseek_r+0x1e>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_lseek_r+0x1e>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	200004c4 	.word	0x200004c4

08006f98 <_read_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	; (8006fb8 <_read_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fb fabc 	bl	8002524 <_read>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_read_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_read_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	200004c4 	.word	0x200004c4

08006fbc <_write_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d07      	ldr	r5, [pc, #28]	; (8006fdc <_write_r+0x20>)
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	602a      	str	r2, [r5, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f7fb fac7 	bl	800255e <_write>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_write_r+0x1e>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_write_r+0x1e>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	200004c4 	.word	0x200004c4

08006fe0 <__errno>:
 8006fe0:	4b01      	ldr	r3, [pc, #4]	; (8006fe8 <__errno+0x8>)
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000064 	.word	0x20000064

08006fec <__libc_init_array>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4d0d      	ldr	r5, [pc, #52]	; (8007024 <__libc_init_array+0x38>)
 8006ff0:	4c0d      	ldr	r4, [pc, #52]	; (8007028 <__libc_init_array+0x3c>)
 8006ff2:	1b64      	subs	r4, r4, r5
 8006ff4:	10a4      	asrs	r4, r4, #2
 8006ff6:	2600      	movs	r6, #0
 8006ff8:	42a6      	cmp	r6, r4
 8006ffa:	d109      	bne.n	8007010 <__libc_init_array+0x24>
 8006ffc:	4d0b      	ldr	r5, [pc, #44]	; (800702c <__libc_init_array+0x40>)
 8006ffe:	4c0c      	ldr	r4, [pc, #48]	; (8007030 <__libc_init_array+0x44>)
 8007000:	f002 f802 	bl	8009008 <_init>
 8007004:	1b64      	subs	r4, r4, r5
 8007006:	10a4      	asrs	r4, r4, #2
 8007008:	2600      	movs	r6, #0
 800700a:	42a6      	cmp	r6, r4
 800700c:	d105      	bne.n	800701a <__libc_init_array+0x2e>
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	f855 3b04 	ldr.w	r3, [r5], #4
 8007014:	4798      	blx	r3
 8007016:	3601      	adds	r6, #1
 8007018:	e7ee      	b.n	8006ff8 <__libc_init_array+0xc>
 800701a:	f855 3b04 	ldr.w	r3, [r5], #4
 800701e:	4798      	blx	r3
 8007020:	3601      	adds	r6, #1
 8007022:	e7f2      	b.n	800700a <__libc_init_array+0x1e>
 8007024:	080094cc 	.word	0x080094cc
 8007028:	080094cc 	.word	0x080094cc
 800702c:	080094cc 	.word	0x080094cc
 8007030:	080094d0 	.word	0x080094d0

08007034 <__retarget_lock_init_recursive>:
 8007034:	4770      	bx	lr

08007036 <__retarget_lock_acquire_recursive>:
 8007036:	4770      	bx	lr

08007038 <__retarget_lock_release_recursive>:
 8007038:	4770      	bx	lr

0800703a <quorem>:
 800703a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703e:	6903      	ldr	r3, [r0, #16]
 8007040:	690c      	ldr	r4, [r1, #16]
 8007042:	42a3      	cmp	r3, r4
 8007044:	4607      	mov	r7, r0
 8007046:	db7e      	blt.n	8007146 <quorem+0x10c>
 8007048:	3c01      	subs	r4, #1
 800704a:	f101 0814 	add.w	r8, r1, #20
 800704e:	f100 0514 	add.w	r5, r0, #20
 8007052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800705c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007060:	3301      	adds	r3, #1
 8007062:	429a      	cmp	r2, r3
 8007064:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007068:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800706c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007070:	d331      	bcc.n	80070d6 <quorem+0x9c>
 8007072:	f04f 0e00 	mov.w	lr, #0
 8007076:	4640      	mov	r0, r8
 8007078:	46ac      	mov	ip, r5
 800707a:	46f2      	mov	sl, lr
 800707c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007080:	b293      	uxth	r3, r2
 8007082:	fb06 e303 	mla	r3, r6, r3, lr
 8007086:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800708a:	0c1a      	lsrs	r2, r3, #16
 800708c:	b29b      	uxth	r3, r3
 800708e:	ebaa 0303 	sub.w	r3, sl, r3
 8007092:	f8dc a000 	ldr.w	sl, [ip]
 8007096:	fa13 f38a 	uxtah	r3, r3, sl
 800709a:	fb06 220e 	mla	r2, r6, lr, r2
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	9b00      	ldr	r3, [sp, #0]
 80070a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070a6:	b292      	uxth	r2, r2
 80070a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80070b4:	4581      	cmp	r9, r0
 80070b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ba:	f84c 3b04 	str.w	r3, [ip], #4
 80070be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070c2:	d2db      	bcs.n	800707c <quorem+0x42>
 80070c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80070c8:	b92b      	cbnz	r3, 80070d6 <quorem+0x9c>
 80070ca:	9b01      	ldr	r3, [sp, #4]
 80070cc:	3b04      	subs	r3, #4
 80070ce:	429d      	cmp	r5, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	d32c      	bcc.n	800712e <quorem+0xf4>
 80070d4:	613c      	str	r4, [r7, #16]
 80070d6:	4638      	mov	r0, r7
 80070d8:	f001 f9a8 	bl	800842c <__mcmp>
 80070dc:	2800      	cmp	r0, #0
 80070de:	db22      	blt.n	8007126 <quorem+0xec>
 80070e0:	3601      	adds	r6, #1
 80070e2:	4629      	mov	r1, r5
 80070e4:	2000      	movs	r0, #0
 80070e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80070ea:	f8d1 c000 	ldr.w	ip, [r1]
 80070ee:	b293      	uxth	r3, r2
 80070f0:	1ac3      	subs	r3, r0, r3
 80070f2:	0c12      	lsrs	r2, r2, #16
 80070f4:	fa13 f38c 	uxtah	r3, r3, ip
 80070f8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80070fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007100:	b29b      	uxth	r3, r3
 8007102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007106:	45c1      	cmp	r9, r8
 8007108:	f841 3b04 	str.w	r3, [r1], #4
 800710c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007110:	d2e9      	bcs.n	80070e6 <quorem+0xac>
 8007112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800711a:	b922      	cbnz	r2, 8007126 <quorem+0xec>
 800711c:	3b04      	subs	r3, #4
 800711e:	429d      	cmp	r5, r3
 8007120:	461a      	mov	r2, r3
 8007122:	d30a      	bcc.n	800713a <quorem+0x100>
 8007124:	613c      	str	r4, [r7, #16]
 8007126:	4630      	mov	r0, r6
 8007128:	b003      	add	sp, #12
 800712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	3b04      	subs	r3, #4
 8007132:	2a00      	cmp	r2, #0
 8007134:	d1ce      	bne.n	80070d4 <quorem+0x9a>
 8007136:	3c01      	subs	r4, #1
 8007138:	e7c9      	b.n	80070ce <quorem+0x94>
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	3b04      	subs	r3, #4
 800713e:	2a00      	cmp	r2, #0
 8007140:	d1f0      	bne.n	8007124 <quorem+0xea>
 8007142:	3c01      	subs	r4, #1
 8007144:	e7eb      	b.n	800711e <quorem+0xe4>
 8007146:	2000      	movs	r0, #0
 8007148:	e7ee      	b.n	8007128 <quorem+0xee>
 800714a:	0000      	movs	r0, r0
 800714c:	0000      	movs	r0, r0
	...

08007150 <_dtoa_r>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	ed2d 8b04 	vpush	{d8-d9}
 8007158:	69c5      	ldr	r5, [r0, #28]
 800715a:	b093      	sub	sp, #76	; 0x4c
 800715c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007160:	ec57 6b10 	vmov	r6, r7, d0
 8007164:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007168:	9107      	str	r1, [sp, #28]
 800716a:	4604      	mov	r4, r0
 800716c:	920a      	str	r2, [sp, #40]	; 0x28
 800716e:	930d      	str	r3, [sp, #52]	; 0x34
 8007170:	b975      	cbnz	r5, 8007190 <_dtoa_r+0x40>
 8007172:	2010      	movs	r0, #16
 8007174:	f000 fe2a 	bl	8007dcc <malloc>
 8007178:	4602      	mov	r2, r0
 800717a:	61e0      	str	r0, [r4, #28]
 800717c:	b920      	cbnz	r0, 8007188 <_dtoa_r+0x38>
 800717e:	4bae      	ldr	r3, [pc, #696]	; (8007438 <_dtoa_r+0x2e8>)
 8007180:	21ef      	movs	r1, #239	; 0xef
 8007182:	48ae      	ldr	r0, [pc, #696]	; (800743c <_dtoa_r+0x2ec>)
 8007184:	f001 fe58 	bl	8008e38 <__assert_func>
 8007188:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800718c:	6005      	str	r5, [r0, #0]
 800718e:	60c5      	str	r5, [r0, #12]
 8007190:	69e3      	ldr	r3, [r4, #28]
 8007192:	6819      	ldr	r1, [r3, #0]
 8007194:	b151      	cbz	r1, 80071ac <_dtoa_r+0x5c>
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	604a      	str	r2, [r1, #4]
 800719a:	2301      	movs	r3, #1
 800719c:	4093      	lsls	r3, r2
 800719e:	608b      	str	r3, [r1, #8]
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 ff07 	bl	8007fb4 <_Bfree>
 80071a6:	69e3      	ldr	r3, [r4, #28]
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	1e3b      	subs	r3, r7, #0
 80071ae:	bfbb      	ittet	lt
 80071b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071b4:	9303      	strlt	r3, [sp, #12]
 80071b6:	2300      	movge	r3, #0
 80071b8:	2201      	movlt	r2, #1
 80071ba:	bfac      	ite	ge
 80071bc:	f8c8 3000 	strge.w	r3, [r8]
 80071c0:	f8c8 2000 	strlt.w	r2, [r8]
 80071c4:	4b9e      	ldr	r3, [pc, #632]	; (8007440 <_dtoa_r+0x2f0>)
 80071c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80071ca:	ea33 0308 	bics.w	r3, r3, r8
 80071ce:	d11b      	bne.n	8007208 <_dtoa_r+0xb8>
 80071d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80071dc:	4333      	orrs	r3, r6
 80071de:	f000 8593 	beq.w	8007d08 <_dtoa_r+0xbb8>
 80071e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e4:	b963      	cbnz	r3, 8007200 <_dtoa_r+0xb0>
 80071e6:	4b97      	ldr	r3, [pc, #604]	; (8007444 <_dtoa_r+0x2f4>)
 80071e8:	e027      	b.n	800723a <_dtoa_r+0xea>
 80071ea:	4b97      	ldr	r3, [pc, #604]	; (8007448 <_dtoa_r+0x2f8>)
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	9800      	ldr	r0, [sp, #0]
 80071f6:	b013      	add	sp, #76	; 0x4c
 80071f8:	ecbd 8b04 	vpop	{d8-d9}
 80071fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007200:	4b90      	ldr	r3, [pc, #576]	; (8007444 <_dtoa_r+0x2f4>)
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	3303      	adds	r3, #3
 8007206:	e7f3      	b.n	80071f0 <_dtoa_r+0xa0>
 8007208:	ed9d 7b02 	vldr	d7, [sp, #8]
 800720c:	2200      	movs	r2, #0
 800720e:	ec51 0b17 	vmov	r0, r1, d7
 8007212:	eeb0 8a47 	vmov.f32	s16, s14
 8007216:	eef0 8a67 	vmov.f32	s17, s15
 800721a:	2300      	movs	r3, #0
 800721c:	f7f9 fc84 	bl	8000b28 <__aeabi_dcmpeq>
 8007220:	4681      	mov	r9, r0
 8007222:	b160      	cbz	r0, 800723e <_dtoa_r+0xee>
 8007224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007226:	2301      	movs	r3, #1
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8568 	beq.w	8007d02 <_dtoa_r+0xbb2>
 8007232:	4b86      	ldr	r3, [pc, #536]	; (800744c <_dtoa_r+0x2fc>)
 8007234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	3b01      	subs	r3, #1
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	e7da      	b.n	80071f4 <_dtoa_r+0xa4>
 800723e:	aa10      	add	r2, sp, #64	; 0x40
 8007240:	a911      	add	r1, sp, #68	; 0x44
 8007242:	4620      	mov	r0, r4
 8007244:	eeb0 0a48 	vmov.f32	s0, s16
 8007248:	eef0 0a68 	vmov.f32	s1, s17
 800724c:	f001 f994 	bl	8008578 <__d2b>
 8007250:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007254:	4682      	mov	sl, r0
 8007256:	2d00      	cmp	r5, #0
 8007258:	d07f      	beq.n	800735a <_dtoa_r+0x20a>
 800725a:	ee18 3a90 	vmov	r3, s17
 800725e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007262:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007266:	ec51 0b18 	vmov	r0, r1, d8
 800726a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800726e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007272:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007276:	4619      	mov	r1, r3
 8007278:	2200      	movs	r2, #0
 800727a:	4b75      	ldr	r3, [pc, #468]	; (8007450 <_dtoa_r+0x300>)
 800727c:	f7f9 f834 	bl	80002e8 <__aeabi_dsub>
 8007280:	a367      	add	r3, pc, #412	; (adr r3, 8007420 <_dtoa_r+0x2d0>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f9 f9e7 	bl	8000658 <__aeabi_dmul>
 800728a:	a367      	add	r3, pc, #412	; (adr r3, 8007428 <_dtoa_r+0x2d8>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f7f9 f82c 	bl	80002ec <__adddf3>
 8007294:	4606      	mov	r6, r0
 8007296:	4628      	mov	r0, r5
 8007298:	460f      	mov	r7, r1
 800729a:	f7f9 f973 	bl	8000584 <__aeabi_i2d>
 800729e:	a364      	add	r3, pc, #400	; (adr r3, 8007430 <_dtoa_r+0x2e0>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f9 f9d8 	bl	8000658 <__aeabi_dmul>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4630      	mov	r0, r6
 80072ae:	4639      	mov	r1, r7
 80072b0:	f7f9 f81c 	bl	80002ec <__adddf3>
 80072b4:	4606      	mov	r6, r0
 80072b6:	460f      	mov	r7, r1
 80072b8:	f7f9 fc7e 	bl	8000bb8 <__aeabi_d2iz>
 80072bc:	2200      	movs	r2, #0
 80072be:	4683      	mov	fp, r0
 80072c0:	2300      	movs	r3, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f9 fc39 	bl	8000b3c <__aeabi_dcmplt>
 80072ca:	b148      	cbz	r0, 80072e0 <_dtoa_r+0x190>
 80072cc:	4658      	mov	r0, fp
 80072ce:	f7f9 f959 	bl	8000584 <__aeabi_i2d>
 80072d2:	4632      	mov	r2, r6
 80072d4:	463b      	mov	r3, r7
 80072d6:	f7f9 fc27 	bl	8000b28 <__aeabi_dcmpeq>
 80072da:	b908      	cbnz	r0, 80072e0 <_dtoa_r+0x190>
 80072dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072e0:	f1bb 0f16 	cmp.w	fp, #22
 80072e4:	d857      	bhi.n	8007396 <_dtoa_r+0x246>
 80072e6:	4b5b      	ldr	r3, [pc, #364]	; (8007454 <_dtoa_r+0x304>)
 80072e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	ec51 0b18 	vmov	r0, r1, d8
 80072f4:	f7f9 fc22 	bl	8000b3c <__aeabi_dcmplt>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d04e      	beq.n	800739a <_dtoa_r+0x24a>
 80072fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007300:	2300      	movs	r3, #0
 8007302:	930c      	str	r3, [sp, #48]	; 0x30
 8007304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007306:	1b5b      	subs	r3, r3, r5
 8007308:	1e5a      	subs	r2, r3, #1
 800730a:	bf45      	ittet	mi
 800730c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007310:	9305      	strmi	r3, [sp, #20]
 8007312:	2300      	movpl	r3, #0
 8007314:	2300      	movmi	r3, #0
 8007316:	9206      	str	r2, [sp, #24]
 8007318:	bf54      	ite	pl
 800731a:	9305      	strpl	r3, [sp, #20]
 800731c:	9306      	strmi	r3, [sp, #24]
 800731e:	f1bb 0f00 	cmp.w	fp, #0
 8007322:	db3c      	blt.n	800739e <_dtoa_r+0x24e>
 8007324:	9b06      	ldr	r3, [sp, #24]
 8007326:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800732a:	445b      	add	r3, fp
 800732c:	9306      	str	r3, [sp, #24]
 800732e:	2300      	movs	r3, #0
 8007330:	9308      	str	r3, [sp, #32]
 8007332:	9b07      	ldr	r3, [sp, #28]
 8007334:	2b09      	cmp	r3, #9
 8007336:	d868      	bhi.n	800740a <_dtoa_r+0x2ba>
 8007338:	2b05      	cmp	r3, #5
 800733a:	bfc4      	itt	gt
 800733c:	3b04      	subgt	r3, #4
 800733e:	9307      	strgt	r3, [sp, #28]
 8007340:	9b07      	ldr	r3, [sp, #28]
 8007342:	f1a3 0302 	sub.w	r3, r3, #2
 8007346:	bfcc      	ite	gt
 8007348:	2500      	movgt	r5, #0
 800734a:	2501      	movle	r5, #1
 800734c:	2b03      	cmp	r3, #3
 800734e:	f200 8085 	bhi.w	800745c <_dtoa_r+0x30c>
 8007352:	e8df f003 	tbb	[pc, r3]
 8007356:	3b2e      	.short	0x3b2e
 8007358:	5839      	.short	0x5839
 800735a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800735e:	441d      	add	r5, r3
 8007360:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007364:	2b20      	cmp	r3, #32
 8007366:	bfc1      	itttt	gt
 8007368:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800736c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007370:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007374:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007378:	bfd6      	itet	le
 800737a:	f1c3 0320 	rsble	r3, r3, #32
 800737e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007382:	fa06 f003 	lslle.w	r0, r6, r3
 8007386:	f7f9 f8ed 	bl	8000564 <__aeabi_ui2d>
 800738a:	2201      	movs	r2, #1
 800738c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007390:	3d01      	subs	r5, #1
 8007392:	920e      	str	r2, [sp, #56]	; 0x38
 8007394:	e76f      	b.n	8007276 <_dtoa_r+0x126>
 8007396:	2301      	movs	r3, #1
 8007398:	e7b3      	b.n	8007302 <_dtoa_r+0x1b2>
 800739a:	900c      	str	r0, [sp, #48]	; 0x30
 800739c:	e7b2      	b.n	8007304 <_dtoa_r+0x1b4>
 800739e:	9b05      	ldr	r3, [sp, #20]
 80073a0:	eba3 030b 	sub.w	r3, r3, fp
 80073a4:	9305      	str	r3, [sp, #20]
 80073a6:	f1cb 0300 	rsb	r3, fp, #0
 80073aa:	9308      	str	r3, [sp, #32]
 80073ac:	2300      	movs	r3, #0
 80073ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b0:	e7bf      	b.n	8007332 <_dtoa_r+0x1e2>
 80073b2:	2300      	movs	r3, #0
 80073b4:	9309      	str	r3, [sp, #36]	; 0x24
 80073b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	dc52      	bgt.n	8007462 <_dtoa_r+0x312>
 80073bc:	2301      	movs	r3, #1
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	461a      	mov	r2, r3
 80073c4:	920a      	str	r2, [sp, #40]	; 0x28
 80073c6:	e00b      	b.n	80073e0 <_dtoa_r+0x290>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e7f3      	b.n	80073b4 <_dtoa_r+0x264>
 80073cc:	2300      	movs	r3, #0
 80073ce:	9309      	str	r3, [sp, #36]	; 0x24
 80073d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d2:	445b      	add	r3, fp
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	3301      	adds	r3, #1
 80073d8:	2b01      	cmp	r3, #1
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	bfb8      	it	lt
 80073de:	2301      	movlt	r3, #1
 80073e0:	69e0      	ldr	r0, [r4, #28]
 80073e2:	2100      	movs	r1, #0
 80073e4:	2204      	movs	r2, #4
 80073e6:	f102 0614 	add.w	r6, r2, #20
 80073ea:	429e      	cmp	r6, r3
 80073ec:	d93d      	bls.n	800746a <_dtoa_r+0x31a>
 80073ee:	6041      	str	r1, [r0, #4]
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 fd9f 	bl	8007f34 <_Balloc>
 80073f6:	9000      	str	r0, [sp, #0]
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d139      	bne.n	8007470 <_dtoa_r+0x320>
 80073fc:	4b16      	ldr	r3, [pc, #88]	; (8007458 <_dtoa_r+0x308>)
 80073fe:	4602      	mov	r2, r0
 8007400:	f240 11af 	movw	r1, #431	; 0x1af
 8007404:	e6bd      	b.n	8007182 <_dtoa_r+0x32>
 8007406:	2301      	movs	r3, #1
 8007408:	e7e1      	b.n	80073ce <_dtoa_r+0x27e>
 800740a:	2501      	movs	r5, #1
 800740c:	2300      	movs	r3, #0
 800740e:	9307      	str	r3, [sp, #28]
 8007410:	9509      	str	r5, [sp, #36]	; 0x24
 8007412:	f04f 33ff 	mov.w	r3, #4294967295
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	2200      	movs	r2, #0
 800741c:	2312      	movs	r3, #18
 800741e:	e7d1      	b.n	80073c4 <_dtoa_r+0x274>
 8007420:	636f4361 	.word	0x636f4361
 8007424:	3fd287a7 	.word	0x3fd287a7
 8007428:	8b60c8b3 	.word	0x8b60c8b3
 800742c:	3fc68a28 	.word	0x3fc68a28
 8007430:	509f79fb 	.word	0x509f79fb
 8007434:	3fd34413 	.word	0x3fd34413
 8007438:	08009191 	.word	0x08009191
 800743c:	080091a8 	.word	0x080091a8
 8007440:	7ff00000 	.word	0x7ff00000
 8007444:	0800918d 	.word	0x0800918d
 8007448:	08009184 	.word	0x08009184
 800744c:	08009161 	.word	0x08009161
 8007450:	3ff80000 	.word	0x3ff80000
 8007454:	08009298 	.word	0x08009298
 8007458:	08009200 	.word	0x08009200
 800745c:	2301      	movs	r3, #1
 800745e:	9309      	str	r3, [sp, #36]	; 0x24
 8007460:	e7d7      	b.n	8007412 <_dtoa_r+0x2c2>
 8007462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	e7ba      	b.n	80073e0 <_dtoa_r+0x290>
 800746a:	3101      	adds	r1, #1
 800746c:	0052      	lsls	r2, r2, #1
 800746e:	e7ba      	b.n	80073e6 <_dtoa_r+0x296>
 8007470:	69e3      	ldr	r3, [r4, #28]
 8007472:	9a00      	ldr	r2, [sp, #0]
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	2b0e      	cmp	r3, #14
 800747a:	f200 80a8 	bhi.w	80075ce <_dtoa_r+0x47e>
 800747e:	2d00      	cmp	r5, #0
 8007480:	f000 80a5 	beq.w	80075ce <_dtoa_r+0x47e>
 8007484:	f1bb 0f00 	cmp.w	fp, #0
 8007488:	dd38      	ble.n	80074fc <_dtoa_r+0x3ac>
 800748a:	4bc0      	ldr	r3, [pc, #768]	; (800778c <_dtoa_r+0x63c>)
 800748c:	f00b 020f 	and.w	r2, fp, #15
 8007490:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007494:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007498:	e9d3 6700 	ldrd	r6, r7, [r3]
 800749c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80074a0:	d019      	beq.n	80074d6 <_dtoa_r+0x386>
 80074a2:	4bbb      	ldr	r3, [pc, #748]	; (8007790 <_dtoa_r+0x640>)
 80074a4:	ec51 0b18 	vmov	r0, r1, d8
 80074a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074ac:	f7f9 f9fe 	bl	80008ac <__aeabi_ddiv>
 80074b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074b4:	f008 080f 	and.w	r8, r8, #15
 80074b8:	2503      	movs	r5, #3
 80074ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007790 <_dtoa_r+0x640>
 80074be:	f1b8 0f00 	cmp.w	r8, #0
 80074c2:	d10a      	bne.n	80074da <_dtoa_r+0x38a>
 80074c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074c8:	4632      	mov	r2, r6
 80074ca:	463b      	mov	r3, r7
 80074cc:	f7f9 f9ee 	bl	80008ac <__aeabi_ddiv>
 80074d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d4:	e02b      	b.n	800752e <_dtoa_r+0x3de>
 80074d6:	2502      	movs	r5, #2
 80074d8:	e7ef      	b.n	80074ba <_dtoa_r+0x36a>
 80074da:	f018 0f01 	tst.w	r8, #1
 80074de:	d008      	beq.n	80074f2 <_dtoa_r+0x3a2>
 80074e0:	4630      	mov	r0, r6
 80074e2:	4639      	mov	r1, r7
 80074e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80074e8:	f7f9 f8b6 	bl	8000658 <__aeabi_dmul>
 80074ec:	3501      	adds	r5, #1
 80074ee:	4606      	mov	r6, r0
 80074f0:	460f      	mov	r7, r1
 80074f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074f6:	f109 0908 	add.w	r9, r9, #8
 80074fa:	e7e0      	b.n	80074be <_dtoa_r+0x36e>
 80074fc:	f000 809f 	beq.w	800763e <_dtoa_r+0x4ee>
 8007500:	f1cb 0600 	rsb	r6, fp, #0
 8007504:	4ba1      	ldr	r3, [pc, #644]	; (800778c <_dtoa_r+0x63c>)
 8007506:	4fa2      	ldr	r7, [pc, #648]	; (8007790 <_dtoa_r+0x640>)
 8007508:	f006 020f 	and.w	r2, r6, #15
 800750c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	ec51 0b18 	vmov	r0, r1, d8
 8007518:	f7f9 f89e 	bl	8000658 <__aeabi_dmul>
 800751c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007520:	1136      	asrs	r6, r6, #4
 8007522:	2300      	movs	r3, #0
 8007524:	2502      	movs	r5, #2
 8007526:	2e00      	cmp	r6, #0
 8007528:	d17e      	bne.n	8007628 <_dtoa_r+0x4d8>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1d0      	bne.n	80074d0 <_dtoa_r+0x380>
 800752e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007530:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8084 	beq.w	8007642 <_dtoa_r+0x4f2>
 800753a:	4b96      	ldr	r3, [pc, #600]	; (8007794 <_dtoa_r+0x644>)
 800753c:	2200      	movs	r2, #0
 800753e:	4640      	mov	r0, r8
 8007540:	4649      	mov	r1, r9
 8007542:	f7f9 fafb 	bl	8000b3c <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	d07b      	beq.n	8007642 <_dtoa_r+0x4f2>
 800754a:	9b04      	ldr	r3, [sp, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d078      	beq.n	8007642 <_dtoa_r+0x4f2>
 8007550:	9b01      	ldr	r3, [sp, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	dd39      	ble.n	80075ca <_dtoa_r+0x47a>
 8007556:	4b90      	ldr	r3, [pc, #576]	; (8007798 <_dtoa_r+0x648>)
 8007558:	2200      	movs	r2, #0
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	f7f9 f87b 	bl	8000658 <__aeabi_dmul>
 8007562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007566:	9e01      	ldr	r6, [sp, #4]
 8007568:	f10b 37ff 	add.w	r7, fp, #4294967295
 800756c:	3501      	adds	r5, #1
 800756e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007572:	4628      	mov	r0, r5
 8007574:	f7f9 f806 	bl	8000584 <__aeabi_i2d>
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	f7f9 f86c 	bl	8000658 <__aeabi_dmul>
 8007580:	4b86      	ldr	r3, [pc, #536]	; (800779c <_dtoa_r+0x64c>)
 8007582:	2200      	movs	r2, #0
 8007584:	f7f8 feb2 	bl	80002ec <__adddf3>
 8007588:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800758c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	2e00      	cmp	r6, #0
 8007594:	d158      	bne.n	8007648 <_dtoa_r+0x4f8>
 8007596:	4b82      	ldr	r3, [pc, #520]	; (80077a0 <_dtoa_r+0x650>)
 8007598:	2200      	movs	r2, #0
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	f7f8 fea3 	bl	80002e8 <__aeabi_dsub>
 80075a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a6:	4680      	mov	r8, r0
 80075a8:	4689      	mov	r9, r1
 80075aa:	f7f9 fae5 	bl	8000b78 <__aeabi_dcmpgt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f040 8296 	bne.w	8007ae0 <_dtoa_r+0x990>
 80075b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075b8:	4640      	mov	r0, r8
 80075ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075be:	4649      	mov	r1, r9
 80075c0:	f7f9 fabc 	bl	8000b3c <__aeabi_dcmplt>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f040 8289 	bne.w	8007adc <_dtoa_r+0x98c>
 80075ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80075ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f2c0 814e 	blt.w	8007872 <_dtoa_r+0x722>
 80075d6:	f1bb 0f0e 	cmp.w	fp, #14
 80075da:	f300 814a 	bgt.w	8007872 <_dtoa_r+0x722>
 80075de:	4b6b      	ldr	r3, [pc, #428]	; (800778c <_dtoa_r+0x63c>)
 80075e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f280 80dc 	bge.w	80077a8 <_dtoa_r+0x658>
 80075f0:	9b04      	ldr	r3, [sp, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f300 80d8 	bgt.w	80077a8 <_dtoa_r+0x658>
 80075f8:	f040 826f 	bne.w	8007ada <_dtoa_r+0x98a>
 80075fc:	4b68      	ldr	r3, [pc, #416]	; (80077a0 <_dtoa_r+0x650>)
 80075fe:	2200      	movs	r2, #0
 8007600:	4640      	mov	r0, r8
 8007602:	4649      	mov	r1, r9
 8007604:	f7f9 f828 	bl	8000658 <__aeabi_dmul>
 8007608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800760c:	f7f9 faaa 	bl	8000b64 <__aeabi_dcmpge>
 8007610:	9e04      	ldr	r6, [sp, #16]
 8007612:	4637      	mov	r7, r6
 8007614:	2800      	cmp	r0, #0
 8007616:	f040 8245 	bne.w	8007aa4 <_dtoa_r+0x954>
 800761a:	9d00      	ldr	r5, [sp, #0]
 800761c:	2331      	movs	r3, #49	; 0x31
 800761e:	f805 3b01 	strb.w	r3, [r5], #1
 8007622:	f10b 0b01 	add.w	fp, fp, #1
 8007626:	e241      	b.n	8007aac <_dtoa_r+0x95c>
 8007628:	07f2      	lsls	r2, r6, #31
 800762a:	d505      	bpl.n	8007638 <_dtoa_r+0x4e8>
 800762c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007630:	f7f9 f812 	bl	8000658 <__aeabi_dmul>
 8007634:	3501      	adds	r5, #1
 8007636:	2301      	movs	r3, #1
 8007638:	1076      	asrs	r6, r6, #1
 800763a:	3708      	adds	r7, #8
 800763c:	e773      	b.n	8007526 <_dtoa_r+0x3d6>
 800763e:	2502      	movs	r5, #2
 8007640:	e775      	b.n	800752e <_dtoa_r+0x3de>
 8007642:	9e04      	ldr	r6, [sp, #16]
 8007644:	465f      	mov	r7, fp
 8007646:	e792      	b.n	800756e <_dtoa_r+0x41e>
 8007648:	9900      	ldr	r1, [sp, #0]
 800764a:	4b50      	ldr	r3, [pc, #320]	; (800778c <_dtoa_r+0x63c>)
 800764c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007650:	4431      	add	r1, r6
 8007652:	9102      	str	r1, [sp, #8]
 8007654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007656:	eeb0 9a47 	vmov.f32	s18, s14
 800765a:	eef0 9a67 	vmov.f32	s19, s15
 800765e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007662:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007666:	2900      	cmp	r1, #0
 8007668:	d044      	beq.n	80076f4 <_dtoa_r+0x5a4>
 800766a:	494e      	ldr	r1, [pc, #312]	; (80077a4 <_dtoa_r+0x654>)
 800766c:	2000      	movs	r0, #0
 800766e:	f7f9 f91d 	bl	80008ac <__aeabi_ddiv>
 8007672:	ec53 2b19 	vmov	r2, r3, d9
 8007676:	f7f8 fe37 	bl	80002e8 <__aeabi_dsub>
 800767a:	9d00      	ldr	r5, [sp, #0]
 800767c:	ec41 0b19 	vmov	d9, r0, r1
 8007680:	4649      	mov	r1, r9
 8007682:	4640      	mov	r0, r8
 8007684:	f7f9 fa98 	bl	8000bb8 <__aeabi_d2iz>
 8007688:	4606      	mov	r6, r0
 800768a:	f7f8 ff7b 	bl	8000584 <__aeabi_i2d>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4640      	mov	r0, r8
 8007694:	4649      	mov	r1, r9
 8007696:	f7f8 fe27 	bl	80002e8 <__aeabi_dsub>
 800769a:	3630      	adds	r6, #48	; 0x30
 800769c:	f805 6b01 	strb.w	r6, [r5], #1
 80076a0:	ec53 2b19 	vmov	r2, r3, d9
 80076a4:	4680      	mov	r8, r0
 80076a6:	4689      	mov	r9, r1
 80076a8:	f7f9 fa48 	bl	8000b3c <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d164      	bne.n	800777a <_dtoa_r+0x62a>
 80076b0:	4642      	mov	r2, r8
 80076b2:	464b      	mov	r3, r9
 80076b4:	4937      	ldr	r1, [pc, #220]	; (8007794 <_dtoa_r+0x644>)
 80076b6:	2000      	movs	r0, #0
 80076b8:	f7f8 fe16 	bl	80002e8 <__aeabi_dsub>
 80076bc:	ec53 2b19 	vmov	r2, r3, d9
 80076c0:	f7f9 fa3c 	bl	8000b3c <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f040 80b6 	bne.w	8007836 <_dtoa_r+0x6e6>
 80076ca:	9b02      	ldr	r3, [sp, #8]
 80076cc:	429d      	cmp	r5, r3
 80076ce:	f43f af7c 	beq.w	80075ca <_dtoa_r+0x47a>
 80076d2:	4b31      	ldr	r3, [pc, #196]	; (8007798 <_dtoa_r+0x648>)
 80076d4:	ec51 0b19 	vmov	r0, r1, d9
 80076d8:	2200      	movs	r2, #0
 80076da:	f7f8 ffbd 	bl	8000658 <__aeabi_dmul>
 80076de:	4b2e      	ldr	r3, [pc, #184]	; (8007798 <_dtoa_r+0x648>)
 80076e0:	ec41 0b19 	vmov	d9, r0, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	4640      	mov	r0, r8
 80076e8:	4649      	mov	r1, r9
 80076ea:	f7f8 ffb5 	bl	8000658 <__aeabi_dmul>
 80076ee:	4680      	mov	r8, r0
 80076f0:	4689      	mov	r9, r1
 80076f2:	e7c5      	b.n	8007680 <_dtoa_r+0x530>
 80076f4:	ec51 0b17 	vmov	r0, r1, d7
 80076f8:	f7f8 ffae 	bl	8000658 <__aeabi_dmul>
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	9d00      	ldr	r5, [sp, #0]
 8007700:	930f      	str	r3, [sp, #60]	; 0x3c
 8007702:	ec41 0b19 	vmov	d9, r0, r1
 8007706:	4649      	mov	r1, r9
 8007708:	4640      	mov	r0, r8
 800770a:	f7f9 fa55 	bl	8000bb8 <__aeabi_d2iz>
 800770e:	4606      	mov	r6, r0
 8007710:	f7f8 ff38 	bl	8000584 <__aeabi_i2d>
 8007714:	3630      	adds	r6, #48	; 0x30
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4640      	mov	r0, r8
 800771c:	4649      	mov	r1, r9
 800771e:	f7f8 fde3 	bl	80002e8 <__aeabi_dsub>
 8007722:	f805 6b01 	strb.w	r6, [r5], #1
 8007726:	9b02      	ldr	r3, [sp, #8]
 8007728:	429d      	cmp	r5, r3
 800772a:	4680      	mov	r8, r0
 800772c:	4689      	mov	r9, r1
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	d124      	bne.n	800777e <_dtoa_r+0x62e>
 8007734:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <_dtoa_r+0x654>)
 8007736:	ec51 0b19 	vmov	r0, r1, d9
 800773a:	f7f8 fdd7 	bl	80002ec <__adddf3>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4640      	mov	r0, r8
 8007744:	4649      	mov	r1, r9
 8007746:	f7f9 fa17 	bl	8000b78 <__aeabi_dcmpgt>
 800774a:	2800      	cmp	r0, #0
 800774c:	d173      	bne.n	8007836 <_dtoa_r+0x6e6>
 800774e:	ec53 2b19 	vmov	r2, r3, d9
 8007752:	4914      	ldr	r1, [pc, #80]	; (80077a4 <_dtoa_r+0x654>)
 8007754:	2000      	movs	r0, #0
 8007756:	f7f8 fdc7 	bl	80002e8 <__aeabi_dsub>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4640      	mov	r0, r8
 8007760:	4649      	mov	r1, r9
 8007762:	f7f9 f9eb 	bl	8000b3c <__aeabi_dcmplt>
 8007766:	2800      	cmp	r0, #0
 8007768:	f43f af2f 	beq.w	80075ca <_dtoa_r+0x47a>
 800776c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800776e:	1e6b      	subs	r3, r5, #1
 8007770:	930f      	str	r3, [sp, #60]	; 0x3c
 8007772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007776:	2b30      	cmp	r3, #48	; 0x30
 8007778:	d0f8      	beq.n	800776c <_dtoa_r+0x61c>
 800777a:	46bb      	mov	fp, r7
 800777c:	e04a      	b.n	8007814 <_dtoa_r+0x6c4>
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <_dtoa_r+0x648>)
 8007780:	f7f8 ff6a 	bl	8000658 <__aeabi_dmul>
 8007784:	4680      	mov	r8, r0
 8007786:	4689      	mov	r9, r1
 8007788:	e7bd      	b.n	8007706 <_dtoa_r+0x5b6>
 800778a:	bf00      	nop
 800778c:	08009298 	.word	0x08009298
 8007790:	08009270 	.word	0x08009270
 8007794:	3ff00000 	.word	0x3ff00000
 8007798:	40240000 	.word	0x40240000
 800779c:	401c0000 	.word	0x401c0000
 80077a0:	40140000 	.word	0x40140000
 80077a4:	3fe00000 	.word	0x3fe00000
 80077a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077ac:	9d00      	ldr	r5, [sp, #0]
 80077ae:	4642      	mov	r2, r8
 80077b0:	464b      	mov	r3, r9
 80077b2:	4630      	mov	r0, r6
 80077b4:	4639      	mov	r1, r7
 80077b6:	f7f9 f879 	bl	80008ac <__aeabi_ddiv>
 80077ba:	f7f9 f9fd 	bl	8000bb8 <__aeabi_d2iz>
 80077be:	9001      	str	r0, [sp, #4]
 80077c0:	f7f8 fee0 	bl	8000584 <__aeabi_i2d>
 80077c4:	4642      	mov	r2, r8
 80077c6:	464b      	mov	r3, r9
 80077c8:	f7f8 ff46 	bl	8000658 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4630      	mov	r0, r6
 80077d2:	4639      	mov	r1, r7
 80077d4:	f7f8 fd88 	bl	80002e8 <__aeabi_dsub>
 80077d8:	9e01      	ldr	r6, [sp, #4]
 80077da:	9f04      	ldr	r7, [sp, #16]
 80077dc:	3630      	adds	r6, #48	; 0x30
 80077de:	f805 6b01 	strb.w	r6, [r5], #1
 80077e2:	9e00      	ldr	r6, [sp, #0]
 80077e4:	1bae      	subs	r6, r5, r6
 80077e6:	42b7      	cmp	r7, r6
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	d134      	bne.n	8007858 <_dtoa_r+0x708>
 80077ee:	f7f8 fd7d 	bl	80002ec <__adddf3>
 80077f2:	4642      	mov	r2, r8
 80077f4:	464b      	mov	r3, r9
 80077f6:	4606      	mov	r6, r0
 80077f8:	460f      	mov	r7, r1
 80077fa:	f7f9 f9bd 	bl	8000b78 <__aeabi_dcmpgt>
 80077fe:	b9c8      	cbnz	r0, 8007834 <_dtoa_r+0x6e4>
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	4630      	mov	r0, r6
 8007806:	4639      	mov	r1, r7
 8007808:	f7f9 f98e 	bl	8000b28 <__aeabi_dcmpeq>
 800780c:	b110      	cbz	r0, 8007814 <_dtoa_r+0x6c4>
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	07db      	lsls	r3, r3, #31
 8007812:	d40f      	bmi.n	8007834 <_dtoa_r+0x6e4>
 8007814:	4651      	mov	r1, sl
 8007816:	4620      	mov	r0, r4
 8007818:	f000 fbcc 	bl	8007fb4 <_Bfree>
 800781c:	2300      	movs	r3, #0
 800781e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007820:	702b      	strb	r3, [r5, #0]
 8007822:	f10b 0301 	add.w	r3, fp, #1
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800782a:	2b00      	cmp	r3, #0
 800782c:	f43f ace2 	beq.w	80071f4 <_dtoa_r+0xa4>
 8007830:	601d      	str	r5, [r3, #0]
 8007832:	e4df      	b.n	80071f4 <_dtoa_r+0xa4>
 8007834:	465f      	mov	r7, fp
 8007836:	462b      	mov	r3, r5
 8007838:	461d      	mov	r5, r3
 800783a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800783e:	2a39      	cmp	r2, #57	; 0x39
 8007840:	d106      	bne.n	8007850 <_dtoa_r+0x700>
 8007842:	9a00      	ldr	r2, [sp, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d1f7      	bne.n	8007838 <_dtoa_r+0x6e8>
 8007848:	9900      	ldr	r1, [sp, #0]
 800784a:	2230      	movs	r2, #48	; 0x30
 800784c:	3701      	adds	r7, #1
 800784e:	700a      	strb	r2, [r1, #0]
 8007850:	781a      	ldrb	r2, [r3, #0]
 8007852:	3201      	adds	r2, #1
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e790      	b.n	800777a <_dtoa_r+0x62a>
 8007858:	4ba3      	ldr	r3, [pc, #652]	; (8007ae8 <_dtoa_r+0x998>)
 800785a:	2200      	movs	r2, #0
 800785c:	f7f8 fefc 	bl	8000658 <__aeabi_dmul>
 8007860:	2200      	movs	r2, #0
 8007862:	2300      	movs	r3, #0
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	f7f9 f95e 	bl	8000b28 <__aeabi_dcmpeq>
 800786c:	2800      	cmp	r0, #0
 800786e:	d09e      	beq.n	80077ae <_dtoa_r+0x65e>
 8007870:	e7d0      	b.n	8007814 <_dtoa_r+0x6c4>
 8007872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007874:	2a00      	cmp	r2, #0
 8007876:	f000 80ca 	beq.w	8007a0e <_dtoa_r+0x8be>
 800787a:	9a07      	ldr	r2, [sp, #28]
 800787c:	2a01      	cmp	r2, #1
 800787e:	f300 80ad 	bgt.w	80079dc <_dtoa_r+0x88c>
 8007882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007884:	2a00      	cmp	r2, #0
 8007886:	f000 80a5 	beq.w	80079d4 <_dtoa_r+0x884>
 800788a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800788e:	9e08      	ldr	r6, [sp, #32]
 8007890:	9d05      	ldr	r5, [sp, #20]
 8007892:	9a05      	ldr	r2, [sp, #20]
 8007894:	441a      	add	r2, r3
 8007896:	9205      	str	r2, [sp, #20]
 8007898:	9a06      	ldr	r2, [sp, #24]
 800789a:	2101      	movs	r1, #1
 800789c:	441a      	add	r2, r3
 800789e:	4620      	mov	r0, r4
 80078a0:	9206      	str	r2, [sp, #24]
 80078a2:	f000 fc3d 	bl	8008120 <__i2b>
 80078a6:	4607      	mov	r7, r0
 80078a8:	b165      	cbz	r5, 80078c4 <_dtoa_r+0x774>
 80078aa:	9b06      	ldr	r3, [sp, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd09      	ble.n	80078c4 <_dtoa_r+0x774>
 80078b0:	42ab      	cmp	r3, r5
 80078b2:	9a05      	ldr	r2, [sp, #20]
 80078b4:	bfa8      	it	ge
 80078b6:	462b      	movge	r3, r5
 80078b8:	1ad2      	subs	r2, r2, r3
 80078ba:	9205      	str	r2, [sp, #20]
 80078bc:	9a06      	ldr	r2, [sp, #24]
 80078be:	1aed      	subs	r5, r5, r3
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	9306      	str	r3, [sp, #24]
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	b1f3      	cbz	r3, 8007906 <_dtoa_r+0x7b6>
 80078c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80a3 	beq.w	8007a16 <_dtoa_r+0x8c6>
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	dd10      	ble.n	80078f6 <_dtoa_r+0x7a6>
 80078d4:	4639      	mov	r1, r7
 80078d6:	4632      	mov	r2, r6
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fce1 	bl	80082a0 <__pow5mult>
 80078de:	4652      	mov	r2, sl
 80078e0:	4601      	mov	r1, r0
 80078e2:	4607      	mov	r7, r0
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fc31 	bl	800814c <__multiply>
 80078ea:	4651      	mov	r1, sl
 80078ec:	4680      	mov	r8, r0
 80078ee:	4620      	mov	r0, r4
 80078f0:	f000 fb60 	bl	8007fb4 <_Bfree>
 80078f4:	46c2      	mov	sl, r8
 80078f6:	9b08      	ldr	r3, [sp, #32]
 80078f8:	1b9a      	subs	r2, r3, r6
 80078fa:	d004      	beq.n	8007906 <_dtoa_r+0x7b6>
 80078fc:	4651      	mov	r1, sl
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 fcce 	bl	80082a0 <__pow5mult>
 8007904:	4682      	mov	sl, r0
 8007906:	2101      	movs	r1, #1
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fc09 	bl	8008120 <__i2b>
 800790e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007910:	2b00      	cmp	r3, #0
 8007912:	4606      	mov	r6, r0
 8007914:	f340 8081 	ble.w	8007a1a <_dtoa_r+0x8ca>
 8007918:	461a      	mov	r2, r3
 800791a:	4601      	mov	r1, r0
 800791c:	4620      	mov	r0, r4
 800791e:	f000 fcbf 	bl	80082a0 <__pow5mult>
 8007922:	9b07      	ldr	r3, [sp, #28]
 8007924:	2b01      	cmp	r3, #1
 8007926:	4606      	mov	r6, r0
 8007928:	dd7a      	ble.n	8007a20 <_dtoa_r+0x8d0>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	6933      	ldr	r3, [r6, #16]
 8007930:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007934:	6918      	ldr	r0, [r3, #16]
 8007936:	f000 fba5 	bl	8008084 <__hi0bits>
 800793a:	f1c0 0020 	rsb	r0, r0, #32
 800793e:	9b06      	ldr	r3, [sp, #24]
 8007940:	4418      	add	r0, r3
 8007942:	f010 001f 	ands.w	r0, r0, #31
 8007946:	f000 8094 	beq.w	8007a72 <_dtoa_r+0x922>
 800794a:	f1c0 0320 	rsb	r3, r0, #32
 800794e:	2b04      	cmp	r3, #4
 8007950:	f340 8085 	ble.w	8007a5e <_dtoa_r+0x90e>
 8007954:	9b05      	ldr	r3, [sp, #20]
 8007956:	f1c0 001c 	rsb	r0, r0, #28
 800795a:	4403      	add	r3, r0
 800795c:	9305      	str	r3, [sp, #20]
 800795e:	9b06      	ldr	r3, [sp, #24]
 8007960:	4403      	add	r3, r0
 8007962:	4405      	add	r5, r0
 8007964:	9306      	str	r3, [sp, #24]
 8007966:	9b05      	ldr	r3, [sp, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	dd05      	ble.n	8007978 <_dtoa_r+0x828>
 800796c:	4651      	mov	r1, sl
 800796e:	461a      	mov	r2, r3
 8007970:	4620      	mov	r0, r4
 8007972:	f000 fcef 	bl	8008354 <__lshift>
 8007976:	4682      	mov	sl, r0
 8007978:	9b06      	ldr	r3, [sp, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dd05      	ble.n	800798a <_dtoa_r+0x83a>
 800797e:	4631      	mov	r1, r6
 8007980:	461a      	mov	r2, r3
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fce6 	bl	8008354 <__lshift>
 8007988:	4606      	mov	r6, r0
 800798a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800798c:	2b00      	cmp	r3, #0
 800798e:	d072      	beq.n	8007a76 <_dtoa_r+0x926>
 8007990:	4631      	mov	r1, r6
 8007992:	4650      	mov	r0, sl
 8007994:	f000 fd4a 	bl	800842c <__mcmp>
 8007998:	2800      	cmp	r0, #0
 800799a:	da6c      	bge.n	8007a76 <_dtoa_r+0x926>
 800799c:	2300      	movs	r3, #0
 800799e:	4651      	mov	r1, sl
 80079a0:	220a      	movs	r2, #10
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 fb28 	bl	8007ff8 <__multadd>
 80079a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079ae:	4682      	mov	sl, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 81b0 	beq.w	8007d16 <_dtoa_r+0xbc6>
 80079b6:	2300      	movs	r3, #0
 80079b8:	4639      	mov	r1, r7
 80079ba:	220a      	movs	r2, #10
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fb1b 	bl	8007ff8 <__multadd>
 80079c2:	9b01      	ldr	r3, [sp, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	4607      	mov	r7, r0
 80079c8:	f300 8096 	bgt.w	8007af8 <_dtoa_r+0x9a8>
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	dc59      	bgt.n	8007a86 <_dtoa_r+0x936>
 80079d2:	e091      	b.n	8007af8 <_dtoa_r+0x9a8>
 80079d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079da:	e758      	b.n	800788e <_dtoa_r+0x73e>
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	1e5e      	subs	r6, r3, #1
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	42b3      	cmp	r3, r6
 80079e4:	bfbf      	itttt	lt
 80079e6:	9b08      	ldrlt	r3, [sp, #32]
 80079e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80079ea:	9608      	strlt	r6, [sp, #32]
 80079ec:	1af3      	sublt	r3, r6, r3
 80079ee:	bfb4      	ite	lt
 80079f0:	18d2      	addlt	r2, r2, r3
 80079f2:	1b9e      	subge	r6, r3, r6
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	bfbc      	itt	lt
 80079f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80079fa:	2600      	movlt	r6, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bfb7      	itett	lt
 8007a00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007a04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007a08:	1a9d      	sublt	r5, r3, r2
 8007a0a:	2300      	movlt	r3, #0
 8007a0c:	e741      	b.n	8007892 <_dtoa_r+0x742>
 8007a0e:	9e08      	ldr	r6, [sp, #32]
 8007a10:	9d05      	ldr	r5, [sp, #20]
 8007a12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a14:	e748      	b.n	80078a8 <_dtoa_r+0x758>
 8007a16:	9a08      	ldr	r2, [sp, #32]
 8007a18:	e770      	b.n	80078fc <_dtoa_r+0x7ac>
 8007a1a:	9b07      	ldr	r3, [sp, #28]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	dc19      	bgt.n	8007a54 <_dtoa_r+0x904>
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	b9bb      	cbnz	r3, 8007a54 <_dtoa_r+0x904>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a2a:	b99b      	cbnz	r3, 8007a54 <_dtoa_r+0x904>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a32:	0d1b      	lsrs	r3, r3, #20
 8007a34:	051b      	lsls	r3, r3, #20
 8007a36:	b183      	cbz	r3, 8007a5a <_dtoa_r+0x90a>
 8007a38:	9b05      	ldr	r3, [sp, #20]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	9b06      	ldr	r3, [sp, #24]
 8007a40:	3301      	adds	r3, #1
 8007a42:	9306      	str	r3, [sp, #24]
 8007a44:	f04f 0801 	mov.w	r8, #1
 8007a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f47f af6f 	bne.w	800792e <_dtoa_r+0x7de>
 8007a50:	2001      	movs	r0, #1
 8007a52:	e774      	b.n	800793e <_dtoa_r+0x7ee>
 8007a54:	f04f 0800 	mov.w	r8, #0
 8007a58:	e7f6      	b.n	8007a48 <_dtoa_r+0x8f8>
 8007a5a:	4698      	mov	r8, r3
 8007a5c:	e7f4      	b.n	8007a48 <_dtoa_r+0x8f8>
 8007a5e:	d082      	beq.n	8007966 <_dtoa_r+0x816>
 8007a60:	9a05      	ldr	r2, [sp, #20]
 8007a62:	331c      	adds	r3, #28
 8007a64:	441a      	add	r2, r3
 8007a66:	9205      	str	r2, [sp, #20]
 8007a68:	9a06      	ldr	r2, [sp, #24]
 8007a6a:	441a      	add	r2, r3
 8007a6c:	441d      	add	r5, r3
 8007a6e:	9206      	str	r2, [sp, #24]
 8007a70:	e779      	b.n	8007966 <_dtoa_r+0x816>
 8007a72:	4603      	mov	r3, r0
 8007a74:	e7f4      	b.n	8007a60 <_dtoa_r+0x910>
 8007a76:	9b04      	ldr	r3, [sp, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc37      	bgt.n	8007aec <_dtoa_r+0x99c>
 8007a7c:	9b07      	ldr	r3, [sp, #28]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	dd34      	ble.n	8007aec <_dtoa_r+0x99c>
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	b963      	cbnz	r3, 8007aa4 <_dtoa_r+0x954>
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fab2 	bl	8007ff8 <__multadd>
 8007a94:	4601      	mov	r1, r0
 8007a96:	4606      	mov	r6, r0
 8007a98:	4650      	mov	r0, sl
 8007a9a:	f000 fcc7 	bl	800842c <__mcmp>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f73f adbb 	bgt.w	800761a <_dtoa_r+0x4ca>
 8007aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa6:	9d00      	ldr	r5, [sp, #0]
 8007aa8:	ea6f 0b03 	mvn.w	fp, r3
 8007aac:	f04f 0800 	mov.w	r8, #0
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 fa7e 	bl	8007fb4 <_Bfree>
 8007ab8:	2f00      	cmp	r7, #0
 8007aba:	f43f aeab 	beq.w	8007814 <_dtoa_r+0x6c4>
 8007abe:	f1b8 0f00 	cmp.w	r8, #0
 8007ac2:	d005      	beq.n	8007ad0 <_dtoa_r+0x980>
 8007ac4:	45b8      	cmp	r8, r7
 8007ac6:	d003      	beq.n	8007ad0 <_dtoa_r+0x980>
 8007ac8:	4641      	mov	r1, r8
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 fa72 	bl	8007fb4 <_Bfree>
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fa6e 	bl	8007fb4 <_Bfree>
 8007ad8:	e69c      	b.n	8007814 <_dtoa_r+0x6c4>
 8007ada:	2600      	movs	r6, #0
 8007adc:	4637      	mov	r7, r6
 8007ade:	e7e1      	b.n	8007aa4 <_dtoa_r+0x954>
 8007ae0:	46bb      	mov	fp, r7
 8007ae2:	4637      	mov	r7, r6
 8007ae4:	e599      	b.n	800761a <_dtoa_r+0x4ca>
 8007ae6:	bf00      	nop
 8007ae8:	40240000 	.word	0x40240000
 8007aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 80c8 	beq.w	8007c84 <_dtoa_r+0xb34>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	dd05      	ble.n	8007b08 <_dtoa_r+0x9b8>
 8007afc:	4639      	mov	r1, r7
 8007afe:	462a      	mov	r2, r5
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 fc27 	bl	8008354 <__lshift>
 8007b06:	4607      	mov	r7, r0
 8007b08:	f1b8 0f00 	cmp.w	r8, #0
 8007b0c:	d05b      	beq.n	8007bc6 <_dtoa_r+0xa76>
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fa0f 	bl	8007f34 <_Balloc>
 8007b16:	4605      	mov	r5, r0
 8007b18:	b928      	cbnz	r0, 8007b26 <_dtoa_r+0x9d6>
 8007b1a:	4b83      	ldr	r3, [pc, #524]	; (8007d28 <_dtoa_r+0xbd8>)
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b22:	f7ff bb2e 	b.w	8007182 <_dtoa_r+0x32>
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	3202      	adds	r2, #2
 8007b2a:	0092      	lsls	r2, r2, #2
 8007b2c:	f107 010c 	add.w	r1, r7, #12
 8007b30:	300c      	adds	r0, #12
 8007b32:	f001 f973 	bl	8008e1c <memcpy>
 8007b36:	2201      	movs	r2, #1
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 fc0a 	bl	8008354 <__lshift>
 8007b40:	9b00      	ldr	r3, [sp, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	9308      	str	r3, [sp, #32]
 8007b4e:	9b02      	ldr	r3, [sp, #8]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	46b8      	mov	r8, r7
 8007b56:	9306      	str	r3, [sp, #24]
 8007b58:	4607      	mov	r7, r0
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	4650      	mov	r0, sl
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	f7ff fa69 	bl	800703a <quorem>
 8007b68:	4641      	mov	r1, r8
 8007b6a:	9002      	str	r0, [sp, #8]
 8007b6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b70:	4650      	mov	r0, sl
 8007b72:	f000 fc5b 	bl	800842c <__mcmp>
 8007b76:	463a      	mov	r2, r7
 8007b78:	9005      	str	r0, [sp, #20]
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fc71 	bl	8008464 <__mdiff>
 8007b82:	68c2      	ldr	r2, [r0, #12]
 8007b84:	4605      	mov	r5, r0
 8007b86:	bb02      	cbnz	r2, 8007bca <_dtoa_r+0xa7a>
 8007b88:	4601      	mov	r1, r0
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	f000 fc4e 	bl	800842c <__mcmp>
 8007b90:	4602      	mov	r2, r0
 8007b92:	4629      	mov	r1, r5
 8007b94:	4620      	mov	r0, r4
 8007b96:	9209      	str	r2, [sp, #36]	; 0x24
 8007b98:	f000 fa0c 	bl	8007fb4 <_Bfree>
 8007b9c:	9b07      	ldr	r3, [sp, #28]
 8007b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba0:	9d04      	ldr	r5, [sp, #16]
 8007ba2:	ea43 0102 	orr.w	r1, r3, r2
 8007ba6:	9b06      	ldr	r3, [sp, #24]
 8007ba8:	4319      	orrs	r1, r3
 8007baa:	d110      	bne.n	8007bce <_dtoa_r+0xa7e>
 8007bac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bb0:	d029      	beq.n	8007c06 <_dtoa_r+0xab6>
 8007bb2:	9b05      	ldr	r3, [sp, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	dd02      	ble.n	8007bbe <_dtoa_r+0xa6e>
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	f883 9000 	strb.w	r9, [r3]
 8007bc4:	e774      	b.n	8007ab0 <_dtoa_r+0x960>
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	e7ba      	b.n	8007b40 <_dtoa_r+0x9f0>
 8007bca:	2201      	movs	r2, #1
 8007bcc:	e7e1      	b.n	8007b92 <_dtoa_r+0xa42>
 8007bce:	9b05      	ldr	r3, [sp, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	db04      	blt.n	8007bde <_dtoa_r+0xa8e>
 8007bd4:	9907      	ldr	r1, [sp, #28]
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	9906      	ldr	r1, [sp, #24]
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	d120      	bne.n	8007c20 <_dtoa_r+0xad0>
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	dded      	ble.n	8007bbe <_dtoa_r+0xa6e>
 8007be2:	4651      	mov	r1, sl
 8007be4:	2201      	movs	r2, #1
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 fbb4 	bl	8008354 <__lshift>
 8007bec:	4631      	mov	r1, r6
 8007bee:	4682      	mov	sl, r0
 8007bf0:	f000 fc1c 	bl	800842c <__mcmp>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	dc03      	bgt.n	8007c00 <_dtoa_r+0xab0>
 8007bf8:	d1e1      	bne.n	8007bbe <_dtoa_r+0xa6e>
 8007bfa:	f019 0f01 	tst.w	r9, #1
 8007bfe:	d0de      	beq.n	8007bbe <_dtoa_r+0xa6e>
 8007c00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c04:	d1d8      	bne.n	8007bb8 <_dtoa_r+0xa68>
 8007c06:	9a01      	ldr	r2, [sp, #4]
 8007c08:	2339      	movs	r3, #57	; 0x39
 8007c0a:	7013      	strb	r3, [r2, #0]
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	461d      	mov	r5, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c16:	2a39      	cmp	r2, #57	; 0x39
 8007c18:	d06c      	beq.n	8007cf4 <_dtoa_r+0xba4>
 8007c1a:	3201      	adds	r2, #1
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	e747      	b.n	8007ab0 <_dtoa_r+0x960>
 8007c20:	2a00      	cmp	r2, #0
 8007c22:	dd07      	ble.n	8007c34 <_dtoa_r+0xae4>
 8007c24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c28:	d0ed      	beq.n	8007c06 <_dtoa_r+0xab6>
 8007c2a:	9a01      	ldr	r2, [sp, #4]
 8007c2c:	f109 0301 	add.w	r3, r9, #1
 8007c30:	7013      	strb	r3, [r2, #0]
 8007c32:	e73d      	b.n	8007ab0 <_dtoa_r+0x960>
 8007c34:	9b04      	ldr	r3, [sp, #16]
 8007c36:	9a08      	ldr	r2, [sp, #32]
 8007c38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d043      	beq.n	8007cc8 <_dtoa_r+0xb78>
 8007c40:	4651      	mov	r1, sl
 8007c42:	2300      	movs	r3, #0
 8007c44:	220a      	movs	r2, #10
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 f9d6 	bl	8007ff8 <__multadd>
 8007c4c:	45b8      	cmp	r8, r7
 8007c4e:	4682      	mov	sl, r0
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	f04f 020a 	mov.w	r2, #10
 8007c58:	4641      	mov	r1, r8
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	d107      	bne.n	8007c6e <_dtoa_r+0xb1e>
 8007c5e:	f000 f9cb 	bl	8007ff8 <__multadd>
 8007c62:	4680      	mov	r8, r0
 8007c64:	4607      	mov	r7, r0
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	9304      	str	r3, [sp, #16]
 8007c6c:	e775      	b.n	8007b5a <_dtoa_r+0xa0a>
 8007c6e:	f000 f9c3 	bl	8007ff8 <__multadd>
 8007c72:	4639      	mov	r1, r7
 8007c74:	4680      	mov	r8, r0
 8007c76:	2300      	movs	r3, #0
 8007c78:	220a      	movs	r2, #10
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 f9bc 	bl	8007ff8 <__multadd>
 8007c80:	4607      	mov	r7, r0
 8007c82:	e7f0      	b.n	8007c66 <_dtoa_r+0xb16>
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	9d00      	ldr	r5, [sp, #0]
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	f7ff f9d4 	bl	800703a <quorem>
 8007c92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c96:	9b00      	ldr	r3, [sp, #0]
 8007c98:	f805 9b01 	strb.w	r9, [r5], #1
 8007c9c:	1aea      	subs	r2, r5, r3
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	dd07      	ble.n	8007cb4 <_dtoa_r+0xb64>
 8007ca4:	4651      	mov	r1, sl
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	220a      	movs	r2, #10
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 f9a4 	bl	8007ff8 <__multadd>
 8007cb0:	4682      	mov	sl, r0
 8007cb2:	e7ea      	b.n	8007c8a <_dtoa_r+0xb3a>
 8007cb4:	9b01      	ldr	r3, [sp, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfc8      	it	gt
 8007cba:	461d      	movgt	r5, r3
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	bfd8      	it	le
 8007cc0:	2501      	movle	r5, #1
 8007cc2:	441d      	add	r5, r3
 8007cc4:	f04f 0800 	mov.w	r8, #0
 8007cc8:	4651      	mov	r1, sl
 8007cca:	2201      	movs	r2, #1
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fb41 	bl	8008354 <__lshift>
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	f000 fba9 	bl	800842c <__mcmp>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	dc96      	bgt.n	8007c0c <_dtoa_r+0xabc>
 8007cde:	d102      	bne.n	8007ce6 <_dtoa_r+0xb96>
 8007ce0:	f019 0f01 	tst.w	r9, #1
 8007ce4:	d192      	bne.n	8007c0c <_dtoa_r+0xabc>
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	461d      	mov	r5, r3
 8007cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cee:	2a30      	cmp	r2, #48	; 0x30
 8007cf0:	d0fa      	beq.n	8007ce8 <_dtoa_r+0xb98>
 8007cf2:	e6dd      	b.n	8007ab0 <_dtoa_r+0x960>
 8007cf4:	9a00      	ldr	r2, [sp, #0]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d189      	bne.n	8007c0e <_dtoa_r+0xabe>
 8007cfa:	f10b 0b01 	add.w	fp, fp, #1
 8007cfe:	2331      	movs	r3, #49	; 0x31
 8007d00:	e796      	b.n	8007c30 <_dtoa_r+0xae0>
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <_dtoa_r+0xbdc>)
 8007d04:	f7ff ba99 	b.w	800723a <_dtoa_r+0xea>
 8007d08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f47f aa6d 	bne.w	80071ea <_dtoa_r+0x9a>
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <_dtoa_r+0xbe0>)
 8007d12:	f7ff ba92 	b.w	800723a <_dtoa_r+0xea>
 8007d16:	9b01      	ldr	r3, [sp, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dcb5      	bgt.n	8007c88 <_dtoa_r+0xb38>
 8007d1c:	9b07      	ldr	r3, [sp, #28]
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	f73f aeb1 	bgt.w	8007a86 <_dtoa_r+0x936>
 8007d24:	e7b0      	b.n	8007c88 <_dtoa_r+0xb38>
 8007d26:	bf00      	nop
 8007d28:	08009200 	.word	0x08009200
 8007d2c:	08009160 	.word	0x08009160
 8007d30:	08009184 	.word	0x08009184

08007d34 <_free_r>:
 8007d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d36:	2900      	cmp	r1, #0
 8007d38:	d044      	beq.n	8007dc4 <_free_r+0x90>
 8007d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3e:	9001      	str	r0, [sp, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f1a1 0404 	sub.w	r4, r1, #4
 8007d46:	bfb8      	it	lt
 8007d48:	18e4      	addlt	r4, r4, r3
 8007d4a:	f000 f8e7 	bl	8007f1c <__malloc_lock>
 8007d4e:	4a1e      	ldr	r2, [pc, #120]	; (8007dc8 <_free_r+0x94>)
 8007d50:	9801      	ldr	r0, [sp, #4]
 8007d52:	6813      	ldr	r3, [r2, #0]
 8007d54:	b933      	cbnz	r3, 8007d64 <_free_r+0x30>
 8007d56:	6063      	str	r3, [r4, #4]
 8007d58:	6014      	str	r4, [r2, #0]
 8007d5a:	b003      	add	sp, #12
 8007d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d60:	f000 b8e2 	b.w	8007f28 <__malloc_unlock>
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	d908      	bls.n	8007d7a <_free_r+0x46>
 8007d68:	6825      	ldr	r5, [r4, #0]
 8007d6a:	1961      	adds	r1, r4, r5
 8007d6c:	428b      	cmp	r3, r1
 8007d6e:	bf01      	itttt	eq
 8007d70:	6819      	ldreq	r1, [r3, #0]
 8007d72:	685b      	ldreq	r3, [r3, #4]
 8007d74:	1949      	addeq	r1, r1, r5
 8007d76:	6021      	streq	r1, [r4, #0]
 8007d78:	e7ed      	b.n	8007d56 <_free_r+0x22>
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	b10b      	cbz	r3, 8007d84 <_free_r+0x50>
 8007d80:	42a3      	cmp	r3, r4
 8007d82:	d9fa      	bls.n	8007d7a <_free_r+0x46>
 8007d84:	6811      	ldr	r1, [r2, #0]
 8007d86:	1855      	adds	r5, r2, r1
 8007d88:	42a5      	cmp	r5, r4
 8007d8a:	d10b      	bne.n	8007da4 <_free_r+0x70>
 8007d8c:	6824      	ldr	r4, [r4, #0]
 8007d8e:	4421      	add	r1, r4
 8007d90:	1854      	adds	r4, r2, r1
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	6011      	str	r1, [r2, #0]
 8007d96:	d1e0      	bne.n	8007d5a <_free_r+0x26>
 8007d98:	681c      	ldr	r4, [r3, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	6053      	str	r3, [r2, #4]
 8007d9e:	440c      	add	r4, r1
 8007da0:	6014      	str	r4, [r2, #0]
 8007da2:	e7da      	b.n	8007d5a <_free_r+0x26>
 8007da4:	d902      	bls.n	8007dac <_free_r+0x78>
 8007da6:	230c      	movs	r3, #12
 8007da8:	6003      	str	r3, [r0, #0]
 8007daa:	e7d6      	b.n	8007d5a <_free_r+0x26>
 8007dac:	6825      	ldr	r5, [r4, #0]
 8007dae:	1961      	adds	r1, r4, r5
 8007db0:	428b      	cmp	r3, r1
 8007db2:	bf04      	itt	eq
 8007db4:	6819      	ldreq	r1, [r3, #0]
 8007db6:	685b      	ldreq	r3, [r3, #4]
 8007db8:	6063      	str	r3, [r4, #4]
 8007dba:	bf04      	itt	eq
 8007dbc:	1949      	addeq	r1, r1, r5
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	6054      	str	r4, [r2, #4]
 8007dc2:	e7ca      	b.n	8007d5a <_free_r+0x26>
 8007dc4:	b003      	add	sp, #12
 8007dc6:	bd30      	pop	{r4, r5, pc}
 8007dc8:	200004cc 	.word	0x200004cc

08007dcc <malloc>:
 8007dcc:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <malloc+0xc>)
 8007dce:	4601      	mov	r1, r0
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	f000 b823 	b.w	8007e1c <_malloc_r>
 8007dd6:	bf00      	nop
 8007dd8:	20000064 	.word	0x20000064

08007ddc <sbrk_aligned>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	4e0e      	ldr	r6, [pc, #56]	; (8007e18 <sbrk_aligned+0x3c>)
 8007de0:	460c      	mov	r4, r1
 8007de2:	6831      	ldr	r1, [r6, #0]
 8007de4:	4605      	mov	r5, r0
 8007de6:	b911      	cbnz	r1, 8007dee <sbrk_aligned+0x12>
 8007de8:	f001 f808 	bl	8008dfc <_sbrk_r>
 8007dec:	6030      	str	r0, [r6, #0]
 8007dee:	4621      	mov	r1, r4
 8007df0:	4628      	mov	r0, r5
 8007df2:	f001 f803 	bl	8008dfc <_sbrk_r>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	d00a      	beq.n	8007e10 <sbrk_aligned+0x34>
 8007dfa:	1cc4      	adds	r4, r0, #3
 8007dfc:	f024 0403 	bic.w	r4, r4, #3
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d007      	beq.n	8007e14 <sbrk_aligned+0x38>
 8007e04:	1a21      	subs	r1, r4, r0
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 fff8 	bl	8008dfc <_sbrk_r>
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d101      	bne.n	8007e14 <sbrk_aligned+0x38>
 8007e10:	f04f 34ff 	mov.w	r4, #4294967295
 8007e14:	4620      	mov	r0, r4
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	200004d0 	.word	0x200004d0

08007e1c <_malloc_r>:
 8007e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	1ccd      	adds	r5, r1, #3
 8007e22:	f025 0503 	bic.w	r5, r5, #3
 8007e26:	3508      	adds	r5, #8
 8007e28:	2d0c      	cmp	r5, #12
 8007e2a:	bf38      	it	cc
 8007e2c:	250c      	movcc	r5, #12
 8007e2e:	2d00      	cmp	r5, #0
 8007e30:	4607      	mov	r7, r0
 8007e32:	db01      	blt.n	8007e38 <_malloc_r+0x1c>
 8007e34:	42a9      	cmp	r1, r5
 8007e36:	d905      	bls.n	8007e44 <_malloc_r+0x28>
 8007e38:	230c      	movs	r3, #12
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	2600      	movs	r6, #0
 8007e3e:	4630      	mov	r0, r6
 8007e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f18 <_malloc_r+0xfc>
 8007e48:	f000 f868 	bl	8007f1c <__malloc_lock>
 8007e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e50:	461c      	mov	r4, r3
 8007e52:	bb5c      	cbnz	r4, 8007eac <_malloc_r+0x90>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4638      	mov	r0, r7
 8007e58:	f7ff ffc0 	bl	8007ddc <sbrk_aligned>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	4604      	mov	r4, r0
 8007e60:	d155      	bne.n	8007f0e <_malloc_r+0xf2>
 8007e62:	f8d8 4000 	ldr.w	r4, [r8]
 8007e66:	4626      	mov	r6, r4
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	d145      	bne.n	8007ef8 <_malloc_r+0xdc>
 8007e6c:	2c00      	cmp	r4, #0
 8007e6e:	d048      	beq.n	8007f02 <_malloc_r+0xe6>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	4631      	mov	r1, r6
 8007e74:	4638      	mov	r0, r7
 8007e76:	eb04 0903 	add.w	r9, r4, r3
 8007e7a:	f000 ffbf 	bl	8008dfc <_sbrk_r>
 8007e7e:	4581      	cmp	r9, r0
 8007e80:	d13f      	bne.n	8007f02 <_malloc_r+0xe6>
 8007e82:	6821      	ldr	r1, [r4, #0]
 8007e84:	1a6d      	subs	r5, r5, r1
 8007e86:	4629      	mov	r1, r5
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff ffa7 	bl	8007ddc <sbrk_aligned>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d037      	beq.n	8007f02 <_malloc_r+0xe6>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	442b      	add	r3, r5
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	f8d8 3000 	ldr.w	r3, [r8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d038      	beq.n	8007f12 <_malloc_r+0xf6>
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	42a2      	cmp	r2, r4
 8007ea4:	d12b      	bne.n	8007efe <_malloc_r+0xe2>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	e00f      	b.n	8007ecc <_malloc_r+0xb0>
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	1b52      	subs	r2, r2, r5
 8007eb0:	d41f      	bmi.n	8007ef2 <_malloc_r+0xd6>
 8007eb2:	2a0b      	cmp	r2, #11
 8007eb4:	d917      	bls.n	8007ee6 <_malloc_r+0xca>
 8007eb6:	1961      	adds	r1, r4, r5
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	6025      	str	r5, [r4, #0]
 8007ebc:	bf18      	it	ne
 8007ebe:	6059      	strne	r1, [r3, #4]
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	bf08      	it	eq
 8007ec4:	f8c8 1000 	streq.w	r1, [r8]
 8007ec8:	5162      	str	r2, [r4, r5]
 8007eca:	604b      	str	r3, [r1, #4]
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f104 060b 	add.w	r6, r4, #11
 8007ed2:	f000 f829 	bl	8007f28 <__malloc_unlock>
 8007ed6:	f026 0607 	bic.w	r6, r6, #7
 8007eda:	1d23      	adds	r3, r4, #4
 8007edc:	1af2      	subs	r2, r6, r3
 8007ede:	d0ae      	beq.n	8007e3e <_malloc_r+0x22>
 8007ee0:	1b9b      	subs	r3, r3, r6
 8007ee2:	50a3      	str	r3, [r4, r2]
 8007ee4:	e7ab      	b.n	8007e3e <_malloc_r+0x22>
 8007ee6:	42a3      	cmp	r3, r4
 8007ee8:	6862      	ldr	r2, [r4, #4]
 8007eea:	d1dd      	bne.n	8007ea8 <_malloc_r+0x8c>
 8007eec:	f8c8 2000 	str.w	r2, [r8]
 8007ef0:	e7ec      	b.n	8007ecc <_malloc_r+0xb0>
 8007ef2:	4623      	mov	r3, r4
 8007ef4:	6864      	ldr	r4, [r4, #4]
 8007ef6:	e7ac      	b.n	8007e52 <_malloc_r+0x36>
 8007ef8:	4634      	mov	r4, r6
 8007efa:	6876      	ldr	r6, [r6, #4]
 8007efc:	e7b4      	b.n	8007e68 <_malloc_r+0x4c>
 8007efe:	4613      	mov	r3, r2
 8007f00:	e7cc      	b.n	8007e9c <_malloc_r+0x80>
 8007f02:	230c      	movs	r3, #12
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4638      	mov	r0, r7
 8007f08:	f000 f80e 	bl	8007f28 <__malloc_unlock>
 8007f0c:	e797      	b.n	8007e3e <_malloc_r+0x22>
 8007f0e:	6025      	str	r5, [r4, #0]
 8007f10:	e7dc      	b.n	8007ecc <_malloc_r+0xb0>
 8007f12:	605b      	str	r3, [r3, #4]
 8007f14:	deff      	udf	#255	; 0xff
 8007f16:	bf00      	nop
 8007f18:	200004cc 	.word	0x200004cc

08007f1c <__malloc_lock>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__malloc_lock+0x8>)
 8007f1e:	f7ff b88a 	b.w	8007036 <__retarget_lock_acquire_recursive>
 8007f22:	bf00      	nop
 8007f24:	200004c8 	.word	0x200004c8

08007f28 <__malloc_unlock>:
 8007f28:	4801      	ldr	r0, [pc, #4]	; (8007f30 <__malloc_unlock+0x8>)
 8007f2a:	f7ff b885 	b.w	8007038 <__retarget_lock_release_recursive>
 8007f2e:	bf00      	nop
 8007f30:	200004c8 	.word	0x200004c8

08007f34 <_Balloc>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	69c6      	ldr	r6, [r0, #28]
 8007f38:	4604      	mov	r4, r0
 8007f3a:	460d      	mov	r5, r1
 8007f3c:	b976      	cbnz	r6, 8007f5c <_Balloc+0x28>
 8007f3e:	2010      	movs	r0, #16
 8007f40:	f7ff ff44 	bl	8007dcc <malloc>
 8007f44:	4602      	mov	r2, r0
 8007f46:	61e0      	str	r0, [r4, #28]
 8007f48:	b920      	cbnz	r0, 8007f54 <_Balloc+0x20>
 8007f4a:	4b18      	ldr	r3, [pc, #96]	; (8007fac <_Balloc+0x78>)
 8007f4c:	4818      	ldr	r0, [pc, #96]	; (8007fb0 <_Balloc+0x7c>)
 8007f4e:	216b      	movs	r1, #107	; 0x6b
 8007f50:	f000 ff72 	bl	8008e38 <__assert_func>
 8007f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f58:	6006      	str	r6, [r0, #0]
 8007f5a:	60c6      	str	r6, [r0, #12]
 8007f5c:	69e6      	ldr	r6, [r4, #28]
 8007f5e:	68f3      	ldr	r3, [r6, #12]
 8007f60:	b183      	cbz	r3, 8007f84 <_Balloc+0x50>
 8007f62:	69e3      	ldr	r3, [r4, #28]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f6a:	b9b8      	cbnz	r0, 8007f9c <_Balloc+0x68>
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f72:	1d72      	adds	r2, r6, #5
 8007f74:	0092      	lsls	r2, r2, #2
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 ff7c 	bl	8008e74 <_calloc_r>
 8007f7c:	b160      	cbz	r0, 8007f98 <_Balloc+0x64>
 8007f7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f82:	e00e      	b.n	8007fa2 <_Balloc+0x6e>
 8007f84:	2221      	movs	r2, #33	; 0x21
 8007f86:	2104      	movs	r1, #4
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 ff73 	bl	8008e74 <_calloc_r>
 8007f8e:	69e3      	ldr	r3, [r4, #28]
 8007f90:	60f0      	str	r0, [r6, #12]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e4      	bne.n	8007f62 <_Balloc+0x2e>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	6802      	ldr	r2, [r0, #0]
 8007f9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fa8:	e7f7      	b.n	8007f9a <_Balloc+0x66>
 8007faa:	bf00      	nop
 8007fac:	08009191 	.word	0x08009191
 8007fb0:	08009211 	.word	0x08009211

08007fb4 <_Bfree>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	69c6      	ldr	r6, [r0, #28]
 8007fb8:	4605      	mov	r5, r0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	b976      	cbnz	r6, 8007fdc <_Bfree+0x28>
 8007fbe:	2010      	movs	r0, #16
 8007fc0:	f7ff ff04 	bl	8007dcc <malloc>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	61e8      	str	r0, [r5, #28]
 8007fc8:	b920      	cbnz	r0, 8007fd4 <_Bfree+0x20>
 8007fca:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <_Bfree+0x3c>)
 8007fcc:	4809      	ldr	r0, [pc, #36]	; (8007ff4 <_Bfree+0x40>)
 8007fce:	218f      	movs	r1, #143	; 0x8f
 8007fd0:	f000 ff32 	bl	8008e38 <__assert_func>
 8007fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fd8:	6006      	str	r6, [r0, #0]
 8007fda:	60c6      	str	r6, [r0, #12]
 8007fdc:	b13c      	cbz	r4, 8007fee <_Bfree+0x3a>
 8007fde:	69eb      	ldr	r3, [r5, #28]
 8007fe0:	6862      	ldr	r2, [r4, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fe8:	6021      	str	r1, [r4, #0]
 8007fea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	08009191 	.word	0x08009191
 8007ff4:	08009211 	.word	0x08009211

08007ff8 <__multadd>:
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffc:	690d      	ldr	r5, [r1, #16]
 8007ffe:	4607      	mov	r7, r0
 8008000:	460c      	mov	r4, r1
 8008002:	461e      	mov	r6, r3
 8008004:	f101 0c14 	add.w	ip, r1, #20
 8008008:	2000      	movs	r0, #0
 800800a:	f8dc 3000 	ldr.w	r3, [ip]
 800800e:	b299      	uxth	r1, r3
 8008010:	fb02 6101 	mla	r1, r2, r1, r6
 8008014:	0c1e      	lsrs	r6, r3, #16
 8008016:	0c0b      	lsrs	r3, r1, #16
 8008018:	fb02 3306 	mla	r3, r2, r6, r3
 800801c:	b289      	uxth	r1, r1
 800801e:	3001      	adds	r0, #1
 8008020:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008024:	4285      	cmp	r5, r0
 8008026:	f84c 1b04 	str.w	r1, [ip], #4
 800802a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800802e:	dcec      	bgt.n	800800a <__multadd+0x12>
 8008030:	b30e      	cbz	r6, 8008076 <__multadd+0x7e>
 8008032:	68a3      	ldr	r3, [r4, #8]
 8008034:	42ab      	cmp	r3, r5
 8008036:	dc19      	bgt.n	800806c <__multadd+0x74>
 8008038:	6861      	ldr	r1, [r4, #4]
 800803a:	4638      	mov	r0, r7
 800803c:	3101      	adds	r1, #1
 800803e:	f7ff ff79 	bl	8007f34 <_Balloc>
 8008042:	4680      	mov	r8, r0
 8008044:	b928      	cbnz	r0, 8008052 <__multadd+0x5a>
 8008046:	4602      	mov	r2, r0
 8008048:	4b0c      	ldr	r3, [pc, #48]	; (800807c <__multadd+0x84>)
 800804a:	480d      	ldr	r0, [pc, #52]	; (8008080 <__multadd+0x88>)
 800804c:	21ba      	movs	r1, #186	; 0xba
 800804e:	f000 fef3 	bl	8008e38 <__assert_func>
 8008052:	6922      	ldr	r2, [r4, #16]
 8008054:	3202      	adds	r2, #2
 8008056:	f104 010c 	add.w	r1, r4, #12
 800805a:	0092      	lsls	r2, r2, #2
 800805c:	300c      	adds	r0, #12
 800805e:	f000 fedd 	bl	8008e1c <memcpy>
 8008062:	4621      	mov	r1, r4
 8008064:	4638      	mov	r0, r7
 8008066:	f7ff ffa5 	bl	8007fb4 <_Bfree>
 800806a:	4644      	mov	r4, r8
 800806c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008070:	3501      	adds	r5, #1
 8008072:	615e      	str	r6, [r3, #20]
 8008074:	6125      	str	r5, [r4, #16]
 8008076:	4620      	mov	r0, r4
 8008078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800807c:	08009200 	.word	0x08009200
 8008080:	08009211 	.word	0x08009211

08008084 <__hi0bits>:
 8008084:	0c03      	lsrs	r3, r0, #16
 8008086:	041b      	lsls	r3, r3, #16
 8008088:	b9d3      	cbnz	r3, 80080c0 <__hi0bits+0x3c>
 800808a:	0400      	lsls	r0, r0, #16
 800808c:	2310      	movs	r3, #16
 800808e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008092:	bf04      	itt	eq
 8008094:	0200      	lsleq	r0, r0, #8
 8008096:	3308      	addeq	r3, #8
 8008098:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800809c:	bf04      	itt	eq
 800809e:	0100      	lsleq	r0, r0, #4
 80080a0:	3304      	addeq	r3, #4
 80080a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080a6:	bf04      	itt	eq
 80080a8:	0080      	lsleq	r0, r0, #2
 80080aa:	3302      	addeq	r3, #2
 80080ac:	2800      	cmp	r0, #0
 80080ae:	db05      	blt.n	80080bc <__hi0bits+0x38>
 80080b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080b4:	f103 0301 	add.w	r3, r3, #1
 80080b8:	bf08      	it	eq
 80080ba:	2320      	moveq	r3, #32
 80080bc:	4618      	mov	r0, r3
 80080be:	4770      	bx	lr
 80080c0:	2300      	movs	r3, #0
 80080c2:	e7e4      	b.n	800808e <__hi0bits+0xa>

080080c4 <__lo0bits>:
 80080c4:	6803      	ldr	r3, [r0, #0]
 80080c6:	f013 0207 	ands.w	r2, r3, #7
 80080ca:	d00c      	beq.n	80080e6 <__lo0bits+0x22>
 80080cc:	07d9      	lsls	r1, r3, #31
 80080ce:	d422      	bmi.n	8008116 <__lo0bits+0x52>
 80080d0:	079a      	lsls	r2, r3, #30
 80080d2:	bf49      	itett	mi
 80080d4:	085b      	lsrmi	r3, r3, #1
 80080d6:	089b      	lsrpl	r3, r3, #2
 80080d8:	6003      	strmi	r3, [r0, #0]
 80080da:	2201      	movmi	r2, #1
 80080dc:	bf5c      	itt	pl
 80080de:	6003      	strpl	r3, [r0, #0]
 80080e0:	2202      	movpl	r2, #2
 80080e2:	4610      	mov	r0, r2
 80080e4:	4770      	bx	lr
 80080e6:	b299      	uxth	r1, r3
 80080e8:	b909      	cbnz	r1, 80080ee <__lo0bits+0x2a>
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	2210      	movs	r2, #16
 80080ee:	b2d9      	uxtb	r1, r3
 80080f0:	b909      	cbnz	r1, 80080f6 <__lo0bits+0x32>
 80080f2:	3208      	adds	r2, #8
 80080f4:	0a1b      	lsrs	r3, r3, #8
 80080f6:	0719      	lsls	r1, r3, #28
 80080f8:	bf04      	itt	eq
 80080fa:	091b      	lsreq	r3, r3, #4
 80080fc:	3204      	addeq	r2, #4
 80080fe:	0799      	lsls	r1, r3, #30
 8008100:	bf04      	itt	eq
 8008102:	089b      	lsreq	r3, r3, #2
 8008104:	3202      	addeq	r2, #2
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d403      	bmi.n	8008112 <__lo0bits+0x4e>
 800810a:	085b      	lsrs	r3, r3, #1
 800810c:	f102 0201 	add.w	r2, r2, #1
 8008110:	d003      	beq.n	800811a <__lo0bits+0x56>
 8008112:	6003      	str	r3, [r0, #0]
 8008114:	e7e5      	b.n	80080e2 <__lo0bits+0x1e>
 8008116:	2200      	movs	r2, #0
 8008118:	e7e3      	b.n	80080e2 <__lo0bits+0x1e>
 800811a:	2220      	movs	r2, #32
 800811c:	e7e1      	b.n	80080e2 <__lo0bits+0x1e>
	...

08008120 <__i2b>:
 8008120:	b510      	push	{r4, lr}
 8008122:	460c      	mov	r4, r1
 8008124:	2101      	movs	r1, #1
 8008126:	f7ff ff05 	bl	8007f34 <_Balloc>
 800812a:	4602      	mov	r2, r0
 800812c:	b928      	cbnz	r0, 800813a <__i2b+0x1a>
 800812e:	4b05      	ldr	r3, [pc, #20]	; (8008144 <__i2b+0x24>)
 8008130:	4805      	ldr	r0, [pc, #20]	; (8008148 <__i2b+0x28>)
 8008132:	f240 1145 	movw	r1, #325	; 0x145
 8008136:	f000 fe7f 	bl	8008e38 <__assert_func>
 800813a:	2301      	movs	r3, #1
 800813c:	6144      	str	r4, [r0, #20]
 800813e:	6103      	str	r3, [r0, #16]
 8008140:	bd10      	pop	{r4, pc}
 8008142:	bf00      	nop
 8008144:	08009200 	.word	0x08009200
 8008148:	08009211 	.word	0x08009211

0800814c <__multiply>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	4691      	mov	r9, r2
 8008152:	690a      	ldr	r2, [r1, #16]
 8008154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008158:	429a      	cmp	r2, r3
 800815a:	bfb8      	it	lt
 800815c:	460b      	movlt	r3, r1
 800815e:	460c      	mov	r4, r1
 8008160:	bfbc      	itt	lt
 8008162:	464c      	movlt	r4, r9
 8008164:	4699      	movlt	r9, r3
 8008166:	6927      	ldr	r7, [r4, #16]
 8008168:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800816c:	68a3      	ldr	r3, [r4, #8]
 800816e:	6861      	ldr	r1, [r4, #4]
 8008170:	eb07 060a 	add.w	r6, r7, sl
 8008174:	42b3      	cmp	r3, r6
 8008176:	b085      	sub	sp, #20
 8008178:	bfb8      	it	lt
 800817a:	3101      	addlt	r1, #1
 800817c:	f7ff feda 	bl	8007f34 <_Balloc>
 8008180:	b930      	cbnz	r0, 8008190 <__multiply+0x44>
 8008182:	4602      	mov	r2, r0
 8008184:	4b44      	ldr	r3, [pc, #272]	; (8008298 <__multiply+0x14c>)
 8008186:	4845      	ldr	r0, [pc, #276]	; (800829c <__multiply+0x150>)
 8008188:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800818c:	f000 fe54 	bl	8008e38 <__assert_func>
 8008190:	f100 0514 	add.w	r5, r0, #20
 8008194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008198:	462b      	mov	r3, r5
 800819a:	2200      	movs	r2, #0
 800819c:	4543      	cmp	r3, r8
 800819e:	d321      	bcc.n	80081e4 <__multiply+0x98>
 80081a0:	f104 0314 	add.w	r3, r4, #20
 80081a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081a8:	f109 0314 	add.w	r3, r9, #20
 80081ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80081b0:	9202      	str	r2, [sp, #8]
 80081b2:	1b3a      	subs	r2, r7, r4
 80081b4:	3a15      	subs	r2, #21
 80081b6:	f022 0203 	bic.w	r2, r2, #3
 80081ba:	3204      	adds	r2, #4
 80081bc:	f104 0115 	add.w	r1, r4, #21
 80081c0:	428f      	cmp	r7, r1
 80081c2:	bf38      	it	cc
 80081c4:	2204      	movcc	r2, #4
 80081c6:	9201      	str	r2, [sp, #4]
 80081c8:	9a02      	ldr	r2, [sp, #8]
 80081ca:	9303      	str	r3, [sp, #12]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d80c      	bhi.n	80081ea <__multiply+0x9e>
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	dd03      	ble.n	80081dc <__multiply+0x90>
 80081d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d05b      	beq.n	8008294 <__multiply+0x148>
 80081dc:	6106      	str	r6, [r0, #16]
 80081de:	b005      	add	sp, #20
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	f843 2b04 	str.w	r2, [r3], #4
 80081e8:	e7d8      	b.n	800819c <__multiply+0x50>
 80081ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80081ee:	f1ba 0f00 	cmp.w	sl, #0
 80081f2:	d024      	beq.n	800823e <__multiply+0xf2>
 80081f4:	f104 0e14 	add.w	lr, r4, #20
 80081f8:	46a9      	mov	r9, r5
 80081fa:	f04f 0c00 	mov.w	ip, #0
 80081fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008202:	f8d9 1000 	ldr.w	r1, [r9]
 8008206:	fa1f fb82 	uxth.w	fp, r2
 800820a:	b289      	uxth	r1, r1
 800820c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008210:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008214:	f8d9 2000 	ldr.w	r2, [r9]
 8008218:	4461      	add	r1, ip
 800821a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800821e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008226:	b289      	uxth	r1, r1
 8008228:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800822c:	4577      	cmp	r7, lr
 800822e:	f849 1b04 	str.w	r1, [r9], #4
 8008232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008236:	d8e2      	bhi.n	80081fe <__multiply+0xb2>
 8008238:	9a01      	ldr	r2, [sp, #4]
 800823a:	f845 c002 	str.w	ip, [r5, r2]
 800823e:	9a03      	ldr	r2, [sp, #12]
 8008240:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008244:	3304      	adds	r3, #4
 8008246:	f1b9 0f00 	cmp.w	r9, #0
 800824a:	d021      	beq.n	8008290 <__multiply+0x144>
 800824c:	6829      	ldr	r1, [r5, #0]
 800824e:	f104 0c14 	add.w	ip, r4, #20
 8008252:	46ae      	mov	lr, r5
 8008254:	f04f 0a00 	mov.w	sl, #0
 8008258:	f8bc b000 	ldrh.w	fp, [ip]
 800825c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008260:	fb09 220b 	mla	r2, r9, fp, r2
 8008264:	4452      	add	r2, sl
 8008266:	b289      	uxth	r1, r1
 8008268:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800826c:	f84e 1b04 	str.w	r1, [lr], #4
 8008270:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008274:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008278:	f8be 1000 	ldrh.w	r1, [lr]
 800827c:	fb09 110a 	mla	r1, r9, sl, r1
 8008280:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008284:	4567      	cmp	r7, ip
 8008286:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800828a:	d8e5      	bhi.n	8008258 <__multiply+0x10c>
 800828c:	9a01      	ldr	r2, [sp, #4]
 800828e:	50a9      	str	r1, [r5, r2]
 8008290:	3504      	adds	r5, #4
 8008292:	e799      	b.n	80081c8 <__multiply+0x7c>
 8008294:	3e01      	subs	r6, #1
 8008296:	e79b      	b.n	80081d0 <__multiply+0x84>
 8008298:	08009200 	.word	0x08009200
 800829c:	08009211 	.word	0x08009211

080082a0 <__pow5mult>:
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	4615      	mov	r5, r2
 80082a6:	f012 0203 	ands.w	r2, r2, #3
 80082aa:	4606      	mov	r6, r0
 80082ac:	460f      	mov	r7, r1
 80082ae:	d007      	beq.n	80082c0 <__pow5mult+0x20>
 80082b0:	4c25      	ldr	r4, [pc, #148]	; (8008348 <__pow5mult+0xa8>)
 80082b2:	3a01      	subs	r2, #1
 80082b4:	2300      	movs	r3, #0
 80082b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082ba:	f7ff fe9d 	bl	8007ff8 <__multadd>
 80082be:	4607      	mov	r7, r0
 80082c0:	10ad      	asrs	r5, r5, #2
 80082c2:	d03d      	beq.n	8008340 <__pow5mult+0xa0>
 80082c4:	69f4      	ldr	r4, [r6, #28]
 80082c6:	b97c      	cbnz	r4, 80082e8 <__pow5mult+0x48>
 80082c8:	2010      	movs	r0, #16
 80082ca:	f7ff fd7f 	bl	8007dcc <malloc>
 80082ce:	4602      	mov	r2, r0
 80082d0:	61f0      	str	r0, [r6, #28]
 80082d2:	b928      	cbnz	r0, 80082e0 <__pow5mult+0x40>
 80082d4:	4b1d      	ldr	r3, [pc, #116]	; (800834c <__pow5mult+0xac>)
 80082d6:	481e      	ldr	r0, [pc, #120]	; (8008350 <__pow5mult+0xb0>)
 80082d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80082dc:	f000 fdac 	bl	8008e38 <__assert_func>
 80082e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082e4:	6004      	str	r4, [r0, #0]
 80082e6:	60c4      	str	r4, [r0, #12]
 80082e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80082ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082f0:	b94c      	cbnz	r4, 8008306 <__pow5mult+0x66>
 80082f2:	f240 2171 	movw	r1, #625	; 0x271
 80082f6:	4630      	mov	r0, r6
 80082f8:	f7ff ff12 	bl	8008120 <__i2b>
 80082fc:	2300      	movs	r3, #0
 80082fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008302:	4604      	mov	r4, r0
 8008304:	6003      	str	r3, [r0, #0]
 8008306:	f04f 0900 	mov.w	r9, #0
 800830a:	07eb      	lsls	r3, r5, #31
 800830c:	d50a      	bpl.n	8008324 <__pow5mult+0x84>
 800830e:	4639      	mov	r1, r7
 8008310:	4622      	mov	r2, r4
 8008312:	4630      	mov	r0, r6
 8008314:	f7ff ff1a 	bl	800814c <__multiply>
 8008318:	4639      	mov	r1, r7
 800831a:	4680      	mov	r8, r0
 800831c:	4630      	mov	r0, r6
 800831e:	f7ff fe49 	bl	8007fb4 <_Bfree>
 8008322:	4647      	mov	r7, r8
 8008324:	106d      	asrs	r5, r5, #1
 8008326:	d00b      	beq.n	8008340 <__pow5mult+0xa0>
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	b938      	cbnz	r0, 800833c <__pow5mult+0x9c>
 800832c:	4622      	mov	r2, r4
 800832e:	4621      	mov	r1, r4
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff ff0b 	bl	800814c <__multiply>
 8008336:	6020      	str	r0, [r4, #0]
 8008338:	f8c0 9000 	str.w	r9, [r0]
 800833c:	4604      	mov	r4, r0
 800833e:	e7e4      	b.n	800830a <__pow5mult+0x6a>
 8008340:	4638      	mov	r0, r7
 8008342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008346:	bf00      	nop
 8008348:	08009360 	.word	0x08009360
 800834c:	08009191 	.word	0x08009191
 8008350:	08009211 	.word	0x08009211

08008354 <__lshift>:
 8008354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008358:	460c      	mov	r4, r1
 800835a:	6849      	ldr	r1, [r1, #4]
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008362:	68a3      	ldr	r3, [r4, #8]
 8008364:	4607      	mov	r7, r0
 8008366:	4691      	mov	r9, r2
 8008368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800836c:	f108 0601 	add.w	r6, r8, #1
 8008370:	42b3      	cmp	r3, r6
 8008372:	db0b      	blt.n	800838c <__lshift+0x38>
 8008374:	4638      	mov	r0, r7
 8008376:	f7ff fddd 	bl	8007f34 <_Balloc>
 800837a:	4605      	mov	r5, r0
 800837c:	b948      	cbnz	r0, 8008392 <__lshift+0x3e>
 800837e:	4602      	mov	r2, r0
 8008380:	4b28      	ldr	r3, [pc, #160]	; (8008424 <__lshift+0xd0>)
 8008382:	4829      	ldr	r0, [pc, #164]	; (8008428 <__lshift+0xd4>)
 8008384:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008388:	f000 fd56 	bl	8008e38 <__assert_func>
 800838c:	3101      	adds	r1, #1
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	e7ee      	b.n	8008370 <__lshift+0x1c>
 8008392:	2300      	movs	r3, #0
 8008394:	f100 0114 	add.w	r1, r0, #20
 8008398:	f100 0210 	add.w	r2, r0, #16
 800839c:	4618      	mov	r0, r3
 800839e:	4553      	cmp	r3, sl
 80083a0:	db33      	blt.n	800840a <__lshift+0xb6>
 80083a2:	6920      	ldr	r0, [r4, #16]
 80083a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083a8:	f104 0314 	add.w	r3, r4, #20
 80083ac:	f019 091f 	ands.w	r9, r9, #31
 80083b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083b8:	d02b      	beq.n	8008412 <__lshift+0xbe>
 80083ba:	f1c9 0e20 	rsb	lr, r9, #32
 80083be:	468a      	mov	sl, r1
 80083c0:	2200      	movs	r2, #0
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	fa00 f009 	lsl.w	r0, r0, r9
 80083c8:	4310      	orrs	r0, r2
 80083ca:	f84a 0b04 	str.w	r0, [sl], #4
 80083ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d2:	459c      	cmp	ip, r3
 80083d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80083d8:	d8f3      	bhi.n	80083c2 <__lshift+0x6e>
 80083da:	ebac 0304 	sub.w	r3, ip, r4
 80083de:	3b15      	subs	r3, #21
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	3304      	adds	r3, #4
 80083e6:	f104 0015 	add.w	r0, r4, #21
 80083ea:	4584      	cmp	ip, r0
 80083ec:	bf38      	it	cc
 80083ee:	2304      	movcc	r3, #4
 80083f0:	50ca      	str	r2, [r1, r3]
 80083f2:	b10a      	cbz	r2, 80083f8 <__lshift+0xa4>
 80083f4:	f108 0602 	add.w	r6, r8, #2
 80083f8:	3e01      	subs	r6, #1
 80083fa:	4638      	mov	r0, r7
 80083fc:	612e      	str	r6, [r5, #16]
 80083fe:	4621      	mov	r1, r4
 8008400:	f7ff fdd8 	bl	8007fb4 <_Bfree>
 8008404:	4628      	mov	r0, r5
 8008406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840a:	f842 0f04 	str.w	r0, [r2, #4]!
 800840e:	3301      	adds	r3, #1
 8008410:	e7c5      	b.n	800839e <__lshift+0x4a>
 8008412:	3904      	subs	r1, #4
 8008414:	f853 2b04 	ldr.w	r2, [r3], #4
 8008418:	f841 2f04 	str.w	r2, [r1, #4]!
 800841c:	459c      	cmp	ip, r3
 800841e:	d8f9      	bhi.n	8008414 <__lshift+0xc0>
 8008420:	e7ea      	b.n	80083f8 <__lshift+0xa4>
 8008422:	bf00      	nop
 8008424:	08009200 	.word	0x08009200
 8008428:	08009211 	.word	0x08009211

0800842c <__mcmp>:
 800842c:	b530      	push	{r4, r5, lr}
 800842e:	6902      	ldr	r2, [r0, #16]
 8008430:	690c      	ldr	r4, [r1, #16]
 8008432:	1b12      	subs	r2, r2, r4
 8008434:	d10e      	bne.n	8008454 <__mcmp+0x28>
 8008436:	f100 0314 	add.w	r3, r0, #20
 800843a:	3114      	adds	r1, #20
 800843c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008444:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008448:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800844c:	42a5      	cmp	r5, r4
 800844e:	d003      	beq.n	8008458 <__mcmp+0x2c>
 8008450:	d305      	bcc.n	800845e <__mcmp+0x32>
 8008452:	2201      	movs	r2, #1
 8008454:	4610      	mov	r0, r2
 8008456:	bd30      	pop	{r4, r5, pc}
 8008458:	4283      	cmp	r3, r0
 800845a:	d3f3      	bcc.n	8008444 <__mcmp+0x18>
 800845c:	e7fa      	b.n	8008454 <__mcmp+0x28>
 800845e:	f04f 32ff 	mov.w	r2, #4294967295
 8008462:	e7f7      	b.n	8008454 <__mcmp+0x28>

08008464 <__mdiff>:
 8008464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008468:	460c      	mov	r4, r1
 800846a:	4606      	mov	r6, r0
 800846c:	4611      	mov	r1, r2
 800846e:	4620      	mov	r0, r4
 8008470:	4690      	mov	r8, r2
 8008472:	f7ff ffdb 	bl	800842c <__mcmp>
 8008476:	1e05      	subs	r5, r0, #0
 8008478:	d110      	bne.n	800849c <__mdiff+0x38>
 800847a:	4629      	mov	r1, r5
 800847c:	4630      	mov	r0, r6
 800847e:	f7ff fd59 	bl	8007f34 <_Balloc>
 8008482:	b930      	cbnz	r0, 8008492 <__mdiff+0x2e>
 8008484:	4b3a      	ldr	r3, [pc, #232]	; (8008570 <__mdiff+0x10c>)
 8008486:	4602      	mov	r2, r0
 8008488:	f240 2137 	movw	r1, #567	; 0x237
 800848c:	4839      	ldr	r0, [pc, #228]	; (8008574 <__mdiff+0x110>)
 800848e:	f000 fcd3 	bl	8008e38 <__assert_func>
 8008492:	2301      	movs	r3, #1
 8008494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849c:	bfa4      	itt	ge
 800849e:	4643      	movge	r3, r8
 80084a0:	46a0      	movge	r8, r4
 80084a2:	4630      	mov	r0, r6
 80084a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084a8:	bfa6      	itte	ge
 80084aa:	461c      	movge	r4, r3
 80084ac:	2500      	movge	r5, #0
 80084ae:	2501      	movlt	r5, #1
 80084b0:	f7ff fd40 	bl	8007f34 <_Balloc>
 80084b4:	b920      	cbnz	r0, 80084c0 <__mdiff+0x5c>
 80084b6:	4b2e      	ldr	r3, [pc, #184]	; (8008570 <__mdiff+0x10c>)
 80084b8:	4602      	mov	r2, r0
 80084ba:	f240 2145 	movw	r1, #581	; 0x245
 80084be:	e7e5      	b.n	800848c <__mdiff+0x28>
 80084c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084c4:	6926      	ldr	r6, [r4, #16]
 80084c6:	60c5      	str	r5, [r0, #12]
 80084c8:	f104 0914 	add.w	r9, r4, #20
 80084cc:	f108 0514 	add.w	r5, r8, #20
 80084d0:	f100 0e14 	add.w	lr, r0, #20
 80084d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80084d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084dc:	f108 0210 	add.w	r2, r8, #16
 80084e0:	46f2      	mov	sl, lr
 80084e2:	2100      	movs	r1, #0
 80084e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80084e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80084ec:	fa11 f88b 	uxtah	r8, r1, fp
 80084f0:	b299      	uxth	r1, r3
 80084f2:	0c1b      	lsrs	r3, r3, #16
 80084f4:	eba8 0801 	sub.w	r8, r8, r1
 80084f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008500:	fa1f f888 	uxth.w	r8, r8
 8008504:	1419      	asrs	r1, r3, #16
 8008506:	454e      	cmp	r6, r9
 8008508:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800850c:	f84a 3b04 	str.w	r3, [sl], #4
 8008510:	d8e8      	bhi.n	80084e4 <__mdiff+0x80>
 8008512:	1b33      	subs	r3, r6, r4
 8008514:	3b15      	subs	r3, #21
 8008516:	f023 0303 	bic.w	r3, r3, #3
 800851a:	3304      	adds	r3, #4
 800851c:	3415      	adds	r4, #21
 800851e:	42a6      	cmp	r6, r4
 8008520:	bf38      	it	cc
 8008522:	2304      	movcc	r3, #4
 8008524:	441d      	add	r5, r3
 8008526:	4473      	add	r3, lr
 8008528:	469e      	mov	lr, r3
 800852a:	462e      	mov	r6, r5
 800852c:	4566      	cmp	r6, ip
 800852e:	d30e      	bcc.n	800854e <__mdiff+0xea>
 8008530:	f10c 0203 	add.w	r2, ip, #3
 8008534:	1b52      	subs	r2, r2, r5
 8008536:	f022 0203 	bic.w	r2, r2, #3
 800853a:	3d03      	subs	r5, #3
 800853c:	45ac      	cmp	ip, r5
 800853e:	bf38      	it	cc
 8008540:	2200      	movcc	r2, #0
 8008542:	4413      	add	r3, r2
 8008544:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008548:	b17a      	cbz	r2, 800856a <__mdiff+0x106>
 800854a:	6107      	str	r7, [r0, #16]
 800854c:	e7a4      	b.n	8008498 <__mdiff+0x34>
 800854e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008552:	fa11 f288 	uxtah	r2, r1, r8
 8008556:	1414      	asrs	r4, r2, #16
 8008558:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800855c:	b292      	uxth	r2, r2
 800855e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008562:	f84e 2b04 	str.w	r2, [lr], #4
 8008566:	1421      	asrs	r1, r4, #16
 8008568:	e7e0      	b.n	800852c <__mdiff+0xc8>
 800856a:	3f01      	subs	r7, #1
 800856c:	e7ea      	b.n	8008544 <__mdiff+0xe0>
 800856e:	bf00      	nop
 8008570:	08009200 	.word	0x08009200
 8008574:	08009211 	.word	0x08009211

08008578 <__d2b>:
 8008578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800857c:	460f      	mov	r7, r1
 800857e:	2101      	movs	r1, #1
 8008580:	ec59 8b10 	vmov	r8, r9, d0
 8008584:	4616      	mov	r6, r2
 8008586:	f7ff fcd5 	bl	8007f34 <_Balloc>
 800858a:	4604      	mov	r4, r0
 800858c:	b930      	cbnz	r0, 800859c <__d2b+0x24>
 800858e:	4602      	mov	r2, r0
 8008590:	4b24      	ldr	r3, [pc, #144]	; (8008624 <__d2b+0xac>)
 8008592:	4825      	ldr	r0, [pc, #148]	; (8008628 <__d2b+0xb0>)
 8008594:	f240 310f 	movw	r1, #783	; 0x30f
 8008598:	f000 fc4e 	bl	8008e38 <__assert_func>
 800859c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085a4:	bb2d      	cbnz	r5, 80085f2 <__d2b+0x7a>
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	f1b8 0300 	subs.w	r3, r8, #0
 80085ac:	d026      	beq.n	80085fc <__d2b+0x84>
 80085ae:	4668      	mov	r0, sp
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	f7ff fd87 	bl	80080c4 <__lo0bits>
 80085b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085ba:	b1e8      	cbz	r0, 80085f8 <__d2b+0x80>
 80085bc:	f1c0 0320 	rsb	r3, r0, #32
 80085c0:	fa02 f303 	lsl.w	r3, r2, r3
 80085c4:	430b      	orrs	r3, r1
 80085c6:	40c2      	lsrs	r2, r0
 80085c8:	6163      	str	r3, [r4, #20]
 80085ca:	9201      	str	r2, [sp, #4]
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	61a3      	str	r3, [r4, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bf14      	ite	ne
 80085d4:	2202      	movne	r2, #2
 80085d6:	2201      	moveq	r2, #1
 80085d8:	6122      	str	r2, [r4, #16]
 80085da:	b1bd      	cbz	r5, 800860c <__d2b+0x94>
 80085dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80085e0:	4405      	add	r5, r0
 80085e2:	603d      	str	r5, [r7, #0]
 80085e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085e8:	6030      	str	r0, [r6, #0]
 80085ea:	4620      	mov	r0, r4
 80085ec:	b003      	add	sp, #12
 80085ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085f6:	e7d6      	b.n	80085a6 <__d2b+0x2e>
 80085f8:	6161      	str	r1, [r4, #20]
 80085fa:	e7e7      	b.n	80085cc <__d2b+0x54>
 80085fc:	a801      	add	r0, sp, #4
 80085fe:	f7ff fd61 	bl	80080c4 <__lo0bits>
 8008602:	9b01      	ldr	r3, [sp, #4]
 8008604:	6163      	str	r3, [r4, #20]
 8008606:	3020      	adds	r0, #32
 8008608:	2201      	movs	r2, #1
 800860a:	e7e5      	b.n	80085d8 <__d2b+0x60>
 800860c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008610:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008614:	6038      	str	r0, [r7, #0]
 8008616:	6918      	ldr	r0, [r3, #16]
 8008618:	f7ff fd34 	bl	8008084 <__hi0bits>
 800861c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008620:	e7e2      	b.n	80085e8 <__d2b+0x70>
 8008622:	bf00      	nop
 8008624:	08009200 	.word	0x08009200
 8008628:	08009211 	.word	0x08009211

0800862c <__ssputs_r>:
 800862c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	688e      	ldr	r6, [r1, #8]
 8008632:	461f      	mov	r7, r3
 8008634:	42be      	cmp	r6, r7
 8008636:	680b      	ldr	r3, [r1, #0]
 8008638:	4682      	mov	sl, r0
 800863a:	460c      	mov	r4, r1
 800863c:	4690      	mov	r8, r2
 800863e:	d82c      	bhi.n	800869a <__ssputs_r+0x6e>
 8008640:	898a      	ldrh	r2, [r1, #12]
 8008642:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008646:	d026      	beq.n	8008696 <__ssputs_r+0x6a>
 8008648:	6965      	ldr	r5, [r4, #20]
 800864a:	6909      	ldr	r1, [r1, #16]
 800864c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008650:	eba3 0901 	sub.w	r9, r3, r1
 8008654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008658:	1c7b      	adds	r3, r7, #1
 800865a:	444b      	add	r3, r9
 800865c:	106d      	asrs	r5, r5, #1
 800865e:	429d      	cmp	r5, r3
 8008660:	bf38      	it	cc
 8008662:	461d      	movcc	r5, r3
 8008664:	0553      	lsls	r3, r2, #21
 8008666:	d527      	bpl.n	80086b8 <__ssputs_r+0x8c>
 8008668:	4629      	mov	r1, r5
 800866a:	f7ff fbd7 	bl	8007e1c <_malloc_r>
 800866e:	4606      	mov	r6, r0
 8008670:	b360      	cbz	r0, 80086cc <__ssputs_r+0xa0>
 8008672:	6921      	ldr	r1, [r4, #16]
 8008674:	464a      	mov	r2, r9
 8008676:	f000 fbd1 	bl	8008e1c <memcpy>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	6126      	str	r6, [r4, #16]
 8008688:	6165      	str	r5, [r4, #20]
 800868a:	444e      	add	r6, r9
 800868c:	eba5 0509 	sub.w	r5, r5, r9
 8008690:	6026      	str	r6, [r4, #0]
 8008692:	60a5      	str	r5, [r4, #8]
 8008694:	463e      	mov	r6, r7
 8008696:	42be      	cmp	r6, r7
 8008698:	d900      	bls.n	800869c <__ssputs_r+0x70>
 800869a:	463e      	mov	r6, r7
 800869c:	6820      	ldr	r0, [r4, #0]
 800869e:	4632      	mov	r2, r6
 80086a0:	4641      	mov	r1, r8
 80086a2:	f000 fb6f 	bl	8008d84 <memmove>
 80086a6:	68a3      	ldr	r3, [r4, #8]
 80086a8:	1b9b      	subs	r3, r3, r6
 80086aa:	60a3      	str	r3, [r4, #8]
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	4433      	add	r3, r6
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	2000      	movs	r0, #0
 80086b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b8:	462a      	mov	r2, r5
 80086ba:	f000 fc03 	bl	8008ec4 <_realloc_r>
 80086be:	4606      	mov	r6, r0
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d1e0      	bne.n	8008686 <__ssputs_r+0x5a>
 80086c4:	6921      	ldr	r1, [r4, #16]
 80086c6:	4650      	mov	r0, sl
 80086c8:	f7ff fb34 	bl	8007d34 <_free_r>
 80086cc:	230c      	movs	r3, #12
 80086ce:	f8ca 3000 	str.w	r3, [sl]
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d8:	81a3      	strh	r3, [r4, #12]
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	e7e9      	b.n	80086b4 <__ssputs_r+0x88>

080086e0 <_svfiprintf_r>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	4698      	mov	r8, r3
 80086e6:	898b      	ldrh	r3, [r1, #12]
 80086e8:	061b      	lsls	r3, r3, #24
 80086ea:	b09d      	sub	sp, #116	; 0x74
 80086ec:	4607      	mov	r7, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	4614      	mov	r4, r2
 80086f2:	d50e      	bpl.n	8008712 <_svfiprintf_r+0x32>
 80086f4:	690b      	ldr	r3, [r1, #16]
 80086f6:	b963      	cbnz	r3, 8008712 <_svfiprintf_r+0x32>
 80086f8:	2140      	movs	r1, #64	; 0x40
 80086fa:	f7ff fb8f 	bl	8007e1c <_malloc_r>
 80086fe:	6028      	str	r0, [r5, #0]
 8008700:	6128      	str	r0, [r5, #16]
 8008702:	b920      	cbnz	r0, 800870e <_svfiprintf_r+0x2e>
 8008704:	230c      	movs	r3, #12
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	e0d0      	b.n	80088b0 <_svfiprintf_r+0x1d0>
 800870e:	2340      	movs	r3, #64	; 0x40
 8008710:	616b      	str	r3, [r5, #20]
 8008712:	2300      	movs	r3, #0
 8008714:	9309      	str	r3, [sp, #36]	; 0x24
 8008716:	2320      	movs	r3, #32
 8008718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800871c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008720:	2330      	movs	r3, #48	; 0x30
 8008722:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088c8 <_svfiprintf_r+0x1e8>
 8008726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800872a:	f04f 0901 	mov.w	r9, #1
 800872e:	4623      	mov	r3, r4
 8008730:	469a      	mov	sl, r3
 8008732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008736:	b10a      	cbz	r2, 800873c <_svfiprintf_r+0x5c>
 8008738:	2a25      	cmp	r2, #37	; 0x25
 800873a:	d1f9      	bne.n	8008730 <_svfiprintf_r+0x50>
 800873c:	ebba 0b04 	subs.w	fp, sl, r4
 8008740:	d00b      	beq.n	800875a <_svfiprintf_r+0x7a>
 8008742:	465b      	mov	r3, fp
 8008744:	4622      	mov	r2, r4
 8008746:	4629      	mov	r1, r5
 8008748:	4638      	mov	r0, r7
 800874a:	f7ff ff6f 	bl	800862c <__ssputs_r>
 800874e:	3001      	adds	r0, #1
 8008750:	f000 80a9 	beq.w	80088a6 <_svfiprintf_r+0x1c6>
 8008754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008756:	445a      	add	r2, fp
 8008758:	9209      	str	r2, [sp, #36]	; 0x24
 800875a:	f89a 3000 	ldrb.w	r3, [sl]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80a1 	beq.w	80088a6 <_svfiprintf_r+0x1c6>
 8008764:	2300      	movs	r3, #0
 8008766:	f04f 32ff 	mov.w	r2, #4294967295
 800876a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800876e:	f10a 0a01 	add.w	sl, sl, #1
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	9307      	str	r3, [sp, #28]
 8008776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800877a:	931a      	str	r3, [sp, #104]	; 0x68
 800877c:	4654      	mov	r4, sl
 800877e:	2205      	movs	r2, #5
 8008780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008784:	4850      	ldr	r0, [pc, #320]	; (80088c8 <_svfiprintf_r+0x1e8>)
 8008786:	f7f7 fd53 	bl	8000230 <memchr>
 800878a:	9a04      	ldr	r2, [sp, #16]
 800878c:	b9d8      	cbnz	r0, 80087c6 <_svfiprintf_r+0xe6>
 800878e:	06d0      	lsls	r0, r2, #27
 8008790:	bf44      	itt	mi
 8008792:	2320      	movmi	r3, #32
 8008794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008798:	0711      	lsls	r1, r2, #28
 800879a:	bf44      	itt	mi
 800879c:	232b      	movmi	r3, #43	; 0x2b
 800879e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087a2:	f89a 3000 	ldrb.w	r3, [sl]
 80087a6:	2b2a      	cmp	r3, #42	; 0x2a
 80087a8:	d015      	beq.n	80087d6 <_svfiprintf_r+0xf6>
 80087aa:	9a07      	ldr	r2, [sp, #28]
 80087ac:	4654      	mov	r4, sl
 80087ae:	2000      	movs	r0, #0
 80087b0:	f04f 0c0a 	mov.w	ip, #10
 80087b4:	4621      	mov	r1, r4
 80087b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ba:	3b30      	subs	r3, #48	; 0x30
 80087bc:	2b09      	cmp	r3, #9
 80087be:	d94d      	bls.n	800885c <_svfiprintf_r+0x17c>
 80087c0:	b1b0      	cbz	r0, 80087f0 <_svfiprintf_r+0x110>
 80087c2:	9207      	str	r2, [sp, #28]
 80087c4:	e014      	b.n	80087f0 <_svfiprintf_r+0x110>
 80087c6:	eba0 0308 	sub.w	r3, r0, r8
 80087ca:	fa09 f303 	lsl.w	r3, r9, r3
 80087ce:	4313      	orrs	r3, r2
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	46a2      	mov	sl, r4
 80087d4:	e7d2      	b.n	800877c <_svfiprintf_r+0x9c>
 80087d6:	9b03      	ldr	r3, [sp, #12]
 80087d8:	1d19      	adds	r1, r3, #4
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	9103      	str	r1, [sp, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	bfbb      	ittet	lt
 80087e2:	425b      	neglt	r3, r3
 80087e4:	f042 0202 	orrlt.w	r2, r2, #2
 80087e8:	9307      	strge	r3, [sp, #28]
 80087ea:	9307      	strlt	r3, [sp, #28]
 80087ec:	bfb8      	it	lt
 80087ee:	9204      	strlt	r2, [sp, #16]
 80087f0:	7823      	ldrb	r3, [r4, #0]
 80087f2:	2b2e      	cmp	r3, #46	; 0x2e
 80087f4:	d10c      	bne.n	8008810 <_svfiprintf_r+0x130>
 80087f6:	7863      	ldrb	r3, [r4, #1]
 80087f8:	2b2a      	cmp	r3, #42	; 0x2a
 80087fa:	d134      	bne.n	8008866 <_svfiprintf_r+0x186>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	1d1a      	adds	r2, r3, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	9203      	str	r2, [sp, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	bfb8      	it	lt
 8008808:	f04f 33ff 	movlt.w	r3, #4294967295
 800880c:	3402      	adds	r4, #2
 800880e:	9305      	str	r3, [sp, #20]
 8008810:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80088d8 <_svfiprintf_r+0x1f8>
 8008814:	7821      	ldrb	r1, [r4, #0]
 8008816:	2203      	movs	r2, #3
 8008818:	4650      	mov	r0, sl
 800881a:	f7f7 fd09 	bl	8000230 <memchr>
 800881e:	b138      	cbz	r0, 8008830 <_svfiprintf_r+0x150>
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	eba0 000a 	sub.w	r0, r0, sl
 8008826:	2240      	movs	r2, #64	; 0x40
 8008828:	4082      	lsls	r2, r0
 800882a:	4313      	orrs	r3, r2
 800882c:	3401      	adds	r4, #1
 800882e:	9304      	str	r3, [sp, #16]
 8008830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008834:	4825      	ldr	r0, [pc, #148]	; (80088cc <_svfiprintf_r+0x1ec>)
 8008836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800883a:	2206      	movs	r2, #6
 800883c:	f7f7 fcf8 	bl	8000230 <memchr>
 8008840:	2800      	cmp	r0, #0
 8008842:	d038      	beq.n	80088b6 <_svfiprintf_r+0x1d6>
 8008844:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <_svfiprintf_r+0x1f0>)
 8008846:	bb1b      	cbnz	r3, 8008890 <_svfiprintf_r+0x1b0>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	3307      	adds	r3, #7
 800884c:	f023 0307 	bic.w	r3, r3, #7
 8008850:	3308      	adds	r3, #8
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008856:	4433      	add	r3, r6
 8008858:	9309      	str	r3, [sp, #36]	; 0x24
 800885a:	e768      	b.n	800872e <_svfiprintf_r+0x4e>
 800885c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008860:	460c      	mov	r4, r1
 8008862:	2001      	movs	r0, #1
 8008864:	e7a6      	b.n	80087b4 <_svfiprintf_r+0xd4>
 8008866:	2300      	movs	r3, #0
 8008868:	3401      	adds	r4, #1
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	4619      	mov	r1, r3
 800886e:	f04f 0c0a 	mov.w	ip, #10
 8008872:	4620      	mov	r0, r4
 8008874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008878:	3a30      	subs	r2, #48	; 0x30
 800887a:	2a09      	cmp	r2, #9
 800887c:	d903      	bls.n	8008886 <_svfiprintf_r+0x1a6>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0c6      	beq.n	8008810 <_svfiprintf_r+0x130>
 8008882:	9105      	str	r1, [sp, #20]
 8008884:	e7c4      	b.n	8008810 <_svfiprintf_r+0x130>
 8008886:	fb0c 2101 	mla	r1, ip, r1, r2
 800888a:	4604      	mov	r4, r0
 800888c:	2301      	movs	r3, #1
 800888e:	e7f0      	b.n	8008872 <_svfiprintf_r+0x192>
 8008890:	ab03      	add	r3, sp, #12
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	462a      	mov	r2, r5
 8008896:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <_svfiprintf_r+0x1f4>)
 8008898:	a904      	add	r1, sp, #16
 800889a:	4638      	mov	r0, r7
 800889c:	f7fd fd4c 	bl	8006338 <_printf_float>
 80088a0:	1c42      	adds	r2, r0, #1
 80088a2:	4606      	mov	r6, r0
 80088a4:	d1d6      	bne.n	8008854 <_svfiprintf_r+0x174>
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	065b      	lsls	r3, r3, #25
 80088aa:	f53f af2d 	bmi.w	8008708 <_svfiprintf_r+0x28>
 80088ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088b0:	b01d      	add	sp, #116	; 0x74
 80088b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b6:	ab03      	add	r3, sp, #12
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	462a      	mov	r2, r5
 80088bc:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <_svfiprintf_r+0x1f4>)
 80088be:	a904      	add	r1, sp, #16
 80088c0:	4638      	mov	r0, r7
 80088c2:	f7fd ffdd 	bl	8006880 <_printf_i>
 80088c6:	e7eb      	b.n	80088a0 <_svfiprintf_r+0x1c0>
 80088c8:	0800936c 	.word	0x0800936c
 80088cc:	08009376 	.word	0x08009376
 80088d0:	08006339 	.word	0x08006339
 80088d4:	0800862d 	.word	0x0800862d
 80088d8:	08009372 	.word	0x08009372

080088dc <__sfputc_r>:
 80088dc:	6893      	ldr	r3, [r2, #8]
 80088de:	3b01      	subs	r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	b410      	push	{r4}
 80088e4:	6093      	str	r3, [r2, #8]
 80088e6:	da08      	bge.n	80088fa <__sfputc_r+0x1e>
 80088e8:	6994      	ldr	r4, [r2, #24]
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	db01      	blt.n	80088f2 <__sfputc_r+0x16>
 80088ee:	290a      	cmp	r1, #10
 80088f0:	d103      	bne.n	80088fa <__sfputc_r+0x1e>
 80088f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088f6:	f7fe ba8c 	b.w	8006e12 <__swbuf_r>
 80088fa:	6813      	ldr	r3, [r2, #0]
 80088fc:	1c58      	adds	r0, r3, #1
 80088fe:	6010      	str	r0, [r2, #0]
 8008900:	7019      	strb	r1, [r3, #0]
 8008902:	4608      	mov	r0, r1
 8008904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008908:	4770      	bx	lr

0800890a <__sfputs_r>:
 800890a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890c:	4606      	mov	r6, r0
 800890e:	460f      	mov	r7, r1
 8008910:	4614      	mov	r4, r2
 8008912:	18d5      	adds	r5, r2, r3
 8008914:	42ac      	cmp	r4, r5
 8008916:	d101      	bne.n	800891c <__sfputs_r+0x12>
 8008918:	2000      	movs	r0, #0
 800891a:	e007      	b.n	800892c <__sfputs_r+0x22>
 800891c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008920:	463a      	mov	r2, r7
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ffda 	bl	80088dc <__sfputc_r>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d1f3      	bne.n	8008914 <__sfputs_r+0xa>
 800892c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008930 <_vfiprintf_r>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	460d      	mov	r5, r1
 8008936:	b09d      	sub	sp, #116	; 0x74
 8008938:	4614      	mov	r4, r2
 800893a:	4698      	mov	r8, r3
 800893c:	4606      	mov	r6, r0
 800893e:	b118      	cbz	r0, 8008948 <_vfiprintf_r+0x18>
 8008940:	6a03      	ldr	r3, [r0, #32]
 8008942:	b90b      	cbnz	r3, 8008948 <_vfiprintf_r+0x18>
 8008944:	f7fe f94a 	bl	8006bdc <__sinit>
 8008948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800894a:	07d9      	lsls	r1, r3, #31
 800894c:	d405      	bmi.n	800895a <_vfiprintf_r+0x2a>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	059a      	lsls	r2, r3, #22
 8008952:	d402      	bmi.n	800895a <_vfiprintf_r+0x2a>
 8008954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008956:	f7fe fb6e 	bl	8007036 <__retarget_lock_acquire_recursive>
 800895a:	89ab      	ldrh	r3, [r5, #12]
 800895c:	071b      	lsls	r3, r3, #28
 800895e:	d501      	bpl.n	8008964 <_vfiprintf_r+0x34>
 8008960:	692b      	ldr	r3, [r5, #16]
 8008962:	b99b      	cbnz	r3, 800898c <_vfiprintf_r+0x5c>
 8008964:	4629      	mov	r1, r5
 8008966:	4630      	mov	r0, r6
 8008968:	f7fe fa90 	bl	8006e8c <__swsetup_r>
 800896c:	b170      	cbz	r0, 800898c <_vfiprintf_r+0x5c>
 800896e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008970:	07dc      	lsls	r4, r3, #31
 8008972:	d504      	bpl.n	800897e <_vfiprintf_r+0x4e>
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	b01d      	add	sp, #116	; 0x74
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	0598      	lsls	r0, r3, #22
 8008982:	d4f7      	bmi.n	8008974 <_vfiprintf_r+0x44>
 8008984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008986:	f7fe fb57 	bl	8007038 <__retarget_lock_release_recursive>
 800898a:	e7f3      	b.n	8008974 <_vfiprintf_r+0x44>
 800898c:	2300      	movs	r3, #0
 800898e:	9309      	str	r3, [sp, #36]	; 0x24
 8008990:	2320      	movs	r3, #32
 8008992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008996:	f8cd 800c 	str.w	r8, [sp, #12]
 800899a:	2330      	movs	r3, #48	; 0x30
 800899c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008b50 <_vfiprintf_r+0x220>
 80089a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089a4:	f04f 0901 	mov.w	r9, #1
 80089a8:	4623      	mov	r3, r4
 80089aa:	469a      	mov	sl, r3
 80089ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b0:	b10a      	cbz	r2, 80089b6 <_vfiprintf_r+0x86>
 80089b2:	2a25      	cmp	r2, #37	; 0x25
 80089b4:	d1f9      	bne.n	80089aa <_vfiprintf_r+0x7a>
 80089b6:	ebba 0b04 	subs.w	fp, sl, r4
 80089ba:	d00b      	beq.n	80089d4 <_vfiprintf_r+0xa4>
 80089bc:	465b      	mov	r3, fp
 80089be:	4622      	mov	r2, r4
 80089c0:	4629      	mov	r1, r5
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7ff ffa1 	bl	800890a <__sfputs_r>
 80089c8:	3001      	adds	r0, #1
 80089ca:	f000 80a9 	beq.w	8008b20 <_vfiprintf_r+0x1f0>
 80089ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d0:	445a      	add	r2, fp
 80089d2:	9209      	str	r2, [sp, #36]	; 0x24
 80089d4:	f89a 3000 	ldrb.w	r3, [sl]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 80a1 	beq.w	8008b20 <_vfiprintf_r+0x1f0>
 80089de:	2300      	movs	r3, #0
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089e8:	f10a 0a01 	add.w	sl, sl, #1
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	9307      	str	r3, [sp, #28]
 80089f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089f4:	931a      	str	r3, [sp, #104]	; 0x68
 80089f6:	4654      	mov	r4, sl
 80089f8:	2205      	movs	r2, #5
 80089fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089fe:	4854      	ldr	r0, [pc, #336]	; (8008b50 <_vfiprintf_r+0x220>)
 8008a00:	f7f7 fc16 	bl	8000230 <memchr>
 8008a04:	9a04      	ldr	r2, [sp, #16]
 8008a06:	b9d8      	cbnz	r0, 8008a40 <_vfiprintf_r+0x110>
 8008a08:	06d1      	lsls	r1, r2, #27
 8008a0a:	bf44      	itt	mi
 8008a0c:	2320      	movmi	r3, #32
 8008a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a12:	0713      	lsls	r3, r2, #28
 8008a14:	bf44      	itt	mi
 8008a16:	232b      	movmi	r3, #43	; 0x2b
 8008a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a20:	2b2a      	cmp	r3, #42	; 0x2a
 8008a22:	d015      	beq.n	8008a50 <_vfiprintf_r+0x120>
 8008a24:	9a07      	ldr	r2, [sp, #28]
 8008a26:	4654      	mov	r4, sl
 8008a28:	2000      	movs	r0, #0
 8008a2a:	f04f 0c0a 	mov.w	ip, #10
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a34:	3b30      	subs	r3, #48	; 0x30
 8008a36:	2b09      	cmp	r3, #9
 8008a38:	d94d      	bls.n	8008ad6 <_vfiprintf_r+0x1a6>
 8008a3a:	b1b0      	cbz	r0, 8008a6a <_vfiprintf_r+0x13a>
 8008a3c:	9207      	str	r2, [sp, #28]
 8008a3e:	e014      	b.n	8008a6a <_vfiprintf_r+0x13a>
 8008a40:	eba0 0308 	sub.w	r3, r0, r8
 8008a44:	fa09 f303 	lsl.w	r3, r9, r3
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	46a2      	mov	sl, r4
 8008a4e:	e7d2      	b.n	80089f6 <_vfiprintf_r+0xc6>
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	1d19      	adds	r1, r3, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	9103      	str	r1, [sp, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bfbb      	ittet	lt
 8008a5c:	425b      	neglt	r3, r3
 8008a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a62:	9307      	strge	r3, [sp, #28]
 8008a64:	9307      	strlt	r3, [sp, #28]
 8008a66:	bfb8      	it	lt
 8008a68:	9204      	strlt	r2, [sp, #16]
 8008a6a:	7823      	ldrb	r3, [r4, #0]
 8008a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a6e:	d10c      	bne.n	8008a8a <_vfiprintf_r+0x15a>
 8008a70:	7863      	ldrb	r3, [r4, #1]
 8008a72:	2b2a      	cmp	r3, #42	; 0x2a
 8008a74:	d134      	bne.n	8008ae0 <_vfiprintf_r+0x1b0>
 8008a76:	9b03      	ldr	r3, [sp, #12]
 8008a78:	1d1a      	adds	r2, r3, #4
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	9203      	str	r2, [sp, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bfb8      	it	lt
 8008a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a86:	3402      	adds	r4, #2
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008b60 <_vfiprintf_r+0x230>
 8008a8e:	7821      	ldrb	r1, [r4, #0]
 8008a90:	2203      	movs	r2, #3
 8008a92:	4650      	mov	r0, sl
 8008a94:	f7f7 fbcc 	bl	8000230 <memchr>
 8008a98:	b138      	cbz	r0, 8008aaa <_vfiprintf_r+0x17a>
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	eba0 000a 	sub.w	r0, r0, sl
 8008aa0:	2240      	movs	r2, #64	; 0x40
 8008aa2:	4082      	lsls	r2, r0
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	3401      	adds	r4, #1
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aae:	4829      	ldr	r0, [pc, #164]	; (8008b54 <_vfiprintf_r+0x224>)
 8008ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ab4:	2206      	movs	r2, #6
 8008ab6:	f7f7 fbbb 	bl	8000230 <memchr>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d03f      	beq.n	8008b3e <_vfiprintf_r+0x20e>
 8008abe:	4b26      	ldr	r3, [pc, #152]	; (8008b58 <_vfiprintf_r+0x228>)
 8008ac0:	bb1b      	cbnz	r3, 8008b0a <_vfiprintf_r+0x1da>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	3307      	adds	r3, #7
 8008ac6:	f023 0307 	bic.w	r3, r3, #7
 8008aca:	3308      	adds	r3, #8
 8008acc:	9303      	str	r3, [sp, #12]
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	443b      	add	r3, r7
 8008ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad4:	e768      	b.n	80089a8 <_vfiprintf_r+0x78>
 8008ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ada:	460c      	mov	r4, r1
 8008adc:	2001      	movs	r0, #1
 8008ade:	e7a6      	b.n	8008a2e <_vfiprintf_r+0xfe>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	3401      	adds	r4, #1
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	f04f 0c0a 	mov.w	ip, #10
 8008aec:	4620      	mov	r0, r4
 8008aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af2:	3a30      	subs	r2, #48	; 0x30
 8008af4:	2a09      	cmp	r2, #9
 8008af6:	d903      	bls.n	8008b00 <_vfiprintf_r+0x1d0>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0c6      	beq.n	8008a8a <_vfiprintf_r+0x15a>
 8008afc:	9105      	str	r1, [sp, #20]
 8008afe:	e7c4      	b.n	8008a8a <_vfiprintf_r+0x15a>
 8008b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b04:	4604      	mov	r4, r0
 8008b06:	2301      	movs	r3, #1
 8008b08:	e7f0      	b.n	8008aec <_vfiprintf_r+0x1bc>
 8008b0a:	ab03      	add	r3, sp, #12
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	462a      	mov	r2, r5
 8008b10:	4b12      	ldr	r3, [pc, #72]	; (8008b5c <_vfiprintf_r+0x22c>)
 8008b12:	a904      	add	r1, sp, #16
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7fd fc0f 	bl	8006338 <_printf_float>
 8008b1a:	4607      	mov	r7, r0
 8008b1c:	1c78      	adds	r0, r7, #1
 8008b1e:	d1d6      	bne.n	8008ace <_vfiprintf_r+0x19e>
 8008b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b22:	07d9      	lsls	r1, r3, #31
 8008b24:	d405      	bmi.n	8008b32 <_vfiprintf_r+0x202>
 8008b26:	89ab      	ldrh	r3, [r5, #12]
 8008b28:	059a      	lsls	r2, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_vfiprintf_r+0x202>
 8008b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b2e:	f7fe fa83 	bl	8007038 <__retarget_lock_release_recursive>
 8008b32:	89ab      	ldrh	r3, [r5, #12]
 8008b34:	065b      	lsls	r3, r3, #25
 8008b36:	f53f af1d 	bmi.w	8008974 <_vfiprintf_r+0x44>
 8008b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b3c:	e71c      	b.n	8008978 <_vfiprintf_r+0x48>
 8008b3e:	ab03      	add	r3, sp, #12
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	462a      	mov	r2, r5
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <_vfiprintf_r+0x22c>)
 8008b46:	a904      	add	r1, sp, #16
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7fd fe99 	bl	8006880 <_printf_i>
 8008b4e:	e7e4      	b.n	8008b1a <_vfiprintf_r+0x1ea>
 8008b50:	0800936c 	.word	0x0800936c
 8008b54:	08009376 	.word	0x08009376
 8008b58:	08006339 	.word	0x08006339
 8008b5c:	0800890b 	.word	0x0800890b
 8008b60:	08009372 	.word	0x08009372

08008b64 <__sflush_r>:
 8008b64:	898a      	ldrh	r2, [r1, #12]
 8008b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	0710      	lsls	r0, r2, #28
 8008b6e:	460c      	mov	r4, r1
 8008b70:	d458      	bmi.n	8008c24 <__sflush_r+0xc0>
 8008b72:	684b      	ldr	r3, [r1, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dc05      	bgt.n	8008b84 <__sflush_r+0x20>
 8008b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	dc02      	bgt.n	8008b84 <__sflush_r+0x20>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d0f9      	beq.n	8008b7e <__sflush_r+0x1a>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b90:	682f      	ldr	r7, [r5, #0]
 8008b92:	6a21      	ldr	r1, [r4, #32]
 8008b94:	602b      	str	r3, [r5, #0]
 8008b96:	d032      	beq.n	8008bfe <__sflush_r+0x9a>
 8008b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	075a      	lsls	r2, r3, #29
 8008b9e:	d505      	bpl.n	8008bac <__sflush_r+0x48>
 8008ba0:	6863      	ldr	r3, [r4, #4]
 8008ba2:	1ac0      	subs	r0, r0, r3
 8008ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ba6:	b10b      	cbz	r3, 8008bac <__sflush_r+0x48>
 8008ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008baa:	1ac0      	subs	r0, r0, r3
 8008bac:	2300      	movs	r3, #0
 8008bae:	4602      	mov	r2, r0
 8008bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bb2:	6a21      	ldr	r1, [r4, #32]
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b0      	blx	r6
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	d106      	bne.n	8008bcc <__sflush_r+0x68>
 8008bbe:	6829      	ldr	r1, [r5, #0]
 8008bc0:	291d      	cmp	r1, #29
 8008bc2:	d82b      	bhi.n	8008c1c <__sflush_r+0xb8>
 8008bc4:	4a29      	ldr	r2, [pc, #164]	; (8008c6c <__sflush_r+0x108>)
 8008bc6:	410a      	asrs	r2, r1
 8008bc8:	07d6      	lsls	r6, r2, #31
 8008bca:	d427      	bmi.n	8008c1c <__sflush_r+0xb8>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	6062      	str	r2, [r4, #4]
 8008bd0:	04d9      	lsls	r1, r3, #19
 8008bd2:	6922      	ldr	r2, [r4, #16]
 8008bd4:	6022      	str	r2, [r4, #0]
 8008bd6:	d504      	bpl.n	8008be2 <__sflush_r+0x7e>
 8008bd8:	1c42      	adds	r2, r0, #1
 8008bda:	d101      	bne.n	8008be0 <__sflush_r+0x7c>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b903      	cbnz	r3, 8008be2 <__sflush_r+0x7e>
 8008be0:	6560      	str	r0, [r4, #84]	; 0x54
 8008be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008be4:	602f      	str	r7, [r5, #0]
 8008be6:	2900      	cmp	r1, #0
 8008be8:	d0c9      	beq.n	8008b7e <__sflush_r+0x1a>
 8008bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	d002      	beq.n	8008bf8 <__sflush_r+0x94>
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f7ff f89e 	bl	8007d34 <_free_r>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	6360      	str	r0, [r4, #52]	; 0x34
 8008bfc:	e7c0      	b.n	8008b80 <__sflush_r+0x1c>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b0      	blx	r6
 8008c04:	1c41      	adds	r1, r0, #1
 8008c06:	d1c8      	bne.n	8008b9a <__sflush_r+0x36>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0c5      	beq.n	8008b9a <__sflush_r+0x36>
 8008c0e:	2b1d      	cmp	r3, #29
 8008c10:	d001      	beq.n	8008c16 <__sflush_r+0xb2>
 8008c12:	2b16      	cmp	r3, #22
 8008c14:	d101      	bne.n	8008c1a <__sflush_r+0xb6>
 8008c16:	602f      	str	r7, [r5, #0]
 8008c18:	e7b1      	b.n	8008b7e <__sflush_r+0x1a>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	e7ad      	b.n	8008b80 <__sflush_r+0x1c>
 8008c24:	690f      	ldr	r7, [r1, #16]
 8008c26:	2f00      	cmp	r7, #0
 8008c28:	d0a9      	beq.n	8008b7e <__sflush_r+0x1a>
 8008c2a:	0793      	lsls	r3, r2, #30
 8008c2c:	680e      	ldr	r6, [r1, #0]
 8008c2e:	bf08      	it	eq
 8008c30:	694b      	ldreq	r3, [r1, #20]
 8008c32:	600f      	str	r7, [r1, #0]
 8008c34:	bf18      	it	ne
 8008c36:	2300      	movne	r3, #0
 8008c38:	eba6 0807 	sub.w	r8, r6, r7
 8008c3c:	608b      	str	r3, [r1, #8]
 8008c3e:	f1b8 0f00 	cmp.w	r8, #0
 8008c42:	dd9c      	ble.n	8008b7e <__sflush_r+0x1a>
 8008c44:	6a21      	ldr	r1, [r4, #32]
 8008c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c48:	4643      	mov	r3, r8
 8008c4a:	463a      	mov	r2, r7
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b0      	blx	r6
 8008c50:	2800      	cmp	r0, #0
 8008c52:	dc06      	bgt.n	8008c62 <__sflush_r+0xfe>
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e78e      	b.n	8008b80 <__sflush_r+0x1c>
 8008c62:	4407      	add	r7, r0
 8008c64:	eba8 0800 	sub.w	r8, r8, r0
 8008c68:	e7e9      	b.n	8008c3e <__sflush_r+0xda>
 8008c6a:	bf00      	nop
 8008c6c:	dfbffffe 	.word	0xdfbffffe

08008c70 <_fflush_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	690b      	ldr	r3, [r1, #16]
 8008c74:	4605      	mov	r5, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	b913      	cbnz	r3, 8008c80 <_fflush_r+0x10>
 8008c7a:	2500      	movs	r5, #0
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	b118      	cbz	r0, 8008c8a <_fflush_r+0x1a>
 8008c82:	6a03      	ldr	r3, [r0, #32]
 8008c84:	b90b      	cbnz	r3, 8008c8a <_fflush_r+0x1a>
 8008c86:	f7fd ffa9 	bl	8006bdc <__sinit>
 8008c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0f3      	beq.n	8008c7a <_fflush_r+0xa>
 8008c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c94:	07d0      	lsls	r0, r2, #31
 8008c96:	d404      	bmi.n	8008ca2 <_fflush_r+0x32>
 8008c98:	0599      	lsls	r1, r3, #22
 8008c9a:	d402      	bmi.n	8008ca2 <_fflush_r+0x32>
 8008c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c9e:	f7fe f9ca 	bl	8007036 <__retarget_lock_acquire_recursive>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	f7ff ff5d 	bl	8008b64 <__sflush_r>
 8008caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cac:	07da      	lsls	r2, r3, #31
 8008cae:	4605      	mov	r5, r0
 8008cb0:	d4e4      	bmi.n	8008c7c <_fflush_r+0xc>
 8008cb2:	89a3      	ldrh	r3, [r4, #12]
 8008cb4:	059b      	lsls	r3, r3, #22
 8008cb6:	d4e1      	bmi.n	8008c7c <_fflush_r+0xc>
 8008cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cba:	f7fe f9bd 	bl	8007038 <__retarget_lock_release_recursive>
 8008cbe:	e7dd      	b.n	8008c7c <_fflush_r+0xc>

08008cc0 <__swhatbuf_r>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	b096      	sub	sp, #88	; 0x58
 8008ccc:	4615      	mov	r5, r2
 8008cce:	461e      	mov	r6, r3
 8008cd0:	da0d      	bge.n	8008cee <__swhatbuf_r+0x2e>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cd8:	f04f 0100 	mov.w	r1, #0
 8008cdc:	bf0c      	ite	eq
 8008cde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ce2:	2340      	movne	r3, #64	; 0x40
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	6031      	str	r1, [r6, #0]
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	b016      	add	sp, #88	; 0x58
 8008cec:	bd70      	pop	{r4, r5, r6, pc}
 8008cee:	466a      	mov	r2, sp
 8008cf0:	f000 f862 	bl	8008db8 <_fstat_r>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	dbec      	blt.n	8008cd2 <__swhatbuf_r+0x12>
 8008cf8:	9901      	ldr	r1, [sp, #4]
 8008cfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008cfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d02:	4259      	negs	r1, r3
 8008d04:	4159      	adcs	r1, r3
 8008d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d0a:	e7eb      	b.n	8008ce4 <__swhatbuf_r+0x24>

08008d0c <__smakebuf_r>:
 8008d0c:	898b      	ldrh	r3, [r1, #12]
 8008d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d10:	079d      	lsls	r5, r3, #30
 8008d12:	4606      	mov	r6, r0
 8008d14:	460c      	mov	r4, r1
 8008d16:	d507      	bpl.n	8008d28 <__smakebuf_r+0x1c>
 8008d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	2301      	movs	r3, #1
 8008d22:	6163      	str	r3, [r4, #20]
 8008d24:	b002      	add	sp, #8
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	ab01      	add	r3, sp, #4
 8008d2a:	466a      	mov	r2, sp
 8008d2c:	f7ff ffc8 	bl	8008cc0 <__swhatbuf_r>
 8008d30:	9900      	ldr	r1, [sp, #0]
 8008d32:	4605      	mov	r5, r0
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff f871 	bl	8007e1c <_malloc_r>
 8008d3a:	b948      	cbnz	r0, 8008d50 <__smakebuf_r+0x44>
 8008d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d40:	059a      	lsls	r2, r3, #22
 8008d42:	d4ef      	bmi.n	8008d24 <__smakebuf_r+0x18>
 8008d44:	f023 0303 	bic.w	r3, r3, #3
 8008d48:	f043 0302 	orr.w	r3, r3, #2
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	e7e3      	b.n	8008d18 <__smakebuf_r+0xc>
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	6020      	str	r0, [r4, #0]
 8008d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	9b00      	ldr	r3, [sp, #0]
 8008d5c:	6163      	str	r3, [r4, #20]
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	6120      	str	r0, [r4, #16]
 8008d62:	b15b      	cbz	r3, 8008d7c <__smakebuf_r+0x70>
 8008d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f000 f837 	bl	8008ddc <_isatty_r>
 8008d6e:	b128      	cbz	r0, 8008d7c <__smakebuf_r+0x70>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f023 0303 	bic.w	r3, r3, #3
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	431d      	orrs	r5, r3
 8008d80:	81a5      	strh	r5, [r4, #12]
 8008d82:	e7cf      	b.n	8008d24 <__smakebuf_r+0x18>

08008d84 <memmove>:
 8008d84:	4288      	cmp	r0, r1
 8008d86:	b510      	push	{r4, lr}
 8008d88:	eb01 0402 	add.w	r4, r1, r2
 8008d8c:	d902      	bls.n	8008d94 <memmove+0x10>
 8008d8e:	4284      	cmp	r4, r0
 8008d90:	4623      	mov	r3, r4
 8008d92:	d807      	bhi.n	8008da4 <memmove+0x20>
 8008d94:	1e43      	subs	r3, r0, #1
 8008d96:	42a1      	cmp	r1, r4
 8008d98:	d008      	beq.n	8008dac <memmove+0x28>
 8008d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008da2:	e7f8      	b.n	8008d96 <memmove+0x12>
 8008da4:	4402      	add	r2, r0
 8008da6:	4601      	mov	r1, r0
 8008da8:	428a      	cmp	r2, r1
 8008daa:	d100      	bne.n	8008dae <memmove+0x2a>
 8008dac:	bd10      	pop	{r4, pc}
 8008dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008db6:	e7f7      	b.n	8008da8 <memmove+0x24>

08008db8 <_fstat_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4d07      	ldr	r5, [pc, #28]	; (8008dd8 <_fstat_r+0x20>)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	602b      	str	r3, [r5, #0]
 8008dc6:	f7f9 fbf2 	bl	80025ae <_fstat>
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	d102      	bne.n	8008dd4 <_fstat_r+0x1c>
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	b103      	cbz	r3, 8008dd4 <_fstat_r+0x1c>
 8008dd2:	6023      	str	r3, [r4, #0]
 8008dd4:	bd38      	pop	{r3, r4, r5, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200004c4 	.word	0x200004c4

08008ddc <_isatty_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4d06      	ldr	r5, [pc, #24]	; (8008df8 <_isatty_r+0x1c>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	602b      	str	r3, [r5, #0]
 8008de8:	f7f9 fbf1 	bl	80025ce <_isatty>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_isatty_r+0x1a>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_isatty_r+0x1a>
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	200004c4 	.word	0x200004c4

08008dfc <_sbrk_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d06      	ldr	r5, [pc, #24]	; (8008e18 <_sbrk_r+0x1c>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	602b      	str	r3, [r5, #0]
 8008e08:	f7f9 fbfa 	bl	8002600 <_sbrk>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_sbrk_r+0x1a>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_sbrk_r+0x1a>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	200004c4 	.word	0x200004c4

08008e1c <memcpy>:
 8008e1c:	440a      	add	r2, r1
 8008e1e:	4291      	cmp	r1, r2
 8008e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e24:	d100      	bne.n	8008e28 <memcpy+0xc>
 8008e26:	4770      	bx	lr
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e32:	4291      	cmp	r1, r2
 8008e34:	d1f9      	bne.n	8008e2a <memcpy+0xe>
 8008e36:	bd10      	pop	{r4, pc}

08008e38 <__assert_func>:
 8008e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e3a:	4614      	mov	r4, r2
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <__assert_func+0x2c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4605      	mov	r5, r0
 8008e44:	68d8      	ldr	r0, [r3, #12]
 8008e46:	b14c      	cbz	r4, 8008e5c <__assert_func+0x24>
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <__assert_func+0x30>)
 8008e4a:	9100      	str	r1, [sp, #0]
 8008e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e50:	4906      	ldr	r1, [pc, #24]	; (8008e6c <__assert_func+0x34>)
 8008e52:	462b      	mov	r3, r5
 8008e54:	f000 f872 	bl	8008f3c <fiprintf>
 8008e58:	f000 f882 	bl	8008f60 <abort>
 8008e5c:	4b04      	ldr	r3, [pc, #16]	; (8008e70 <__assert_func+0x38>)
 8008e5e:	461c      	mov	r4, r3
 8008e60:	e7f3      	b.n	8008e4a <__assert_func+0x12>
 8008e62:	bf00      	nop
 8008e64:	20000064 	.word	0x20000064
 8008e68:	08009387 	.word	0x08009387
 8008e6c:	08009394 	.word	0x08009394
 8008e70:	080093c2 	.word	0x080093c2

08008e74 <_calloc_r>:
 8008e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e76:	fba1 2402 	umull	r2, r4, r1, r2
 8008e7a:	b94c      	cbnz	r4, 8008e90 <_calloc_r+0x1c>
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	9201      	str	r2, [sp, #4]
 8008e80:	f7fe ffcc 	bl	8007e1c <_malloc_r>
 8008e84:	9a01      	ldr	r2, [sp, #4]
 8008e86:	4605      	mov	r5, r0
 8008e88:	b930      	cbnz	r0, 8008e98 <_calloc_r+0x24>
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	b003      	add	sp, #12
 8008e8e:	bd30      	pop	{r4, r5, pc}
 8008e90:	220c      	movs	r2, #12
 8008e92:	6002      	str	r2, [r0, #0]
 8008e94:	2500      	movs	r5, #0
 8008e96:	e7f8      	b.n	8008e8a <_calloc_r+0x16>
 8008e98:	4621      	mov	r1, r4
 8008e9a:	f7fe f84f 	bl	8006f3c <memset>
 8008e9e:	e7f4      	b.n	8008e8a <_calloc_r+0x16>

08008ea0 <__ascii_mbtowc>:
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	b901      	cbnz	r1, 8008ea6 <__ascii_mbtowc+0x6>
 8008ea4:	a901      	add	r1, sp, #4
 8008ea6:	b142      	cbz	r2, 8008eba <__ascii_mbtowc+0x1a>
 8008ea8:	b14b      	cbz	r3, 8008ebe <__ascii_mbtowc+0x1e>
 8008eaa:	7813      	ldrb	r3, [r2, #0]
 8008eac:	600b      	str	r3, [r1, #0]
 8008eae:	7812      	ldrb	r2, [r2, #0]
 8008eb0:	1e10      	subs	r0, r2, #0
 8008eb2:	bf18      	it	ne
 8008eb4:	2001      	movne	r0, #1
 8008eb6:	b002      	add	sp, #8
 8008eb8:	4770      	bx	lr
 8008eba:	4610      	mov	r0, r2
 8008ebc:	e7fb      	b.n	8008eb6 <__ascii_mbtowc+0x16>
 8008ebe:	f06f 0001 	mvn.w	r0, #1
 8008ec2:	e7f8      	b.n	8008eb6 <__ascii_mbtowc+0x16>

08008ec4 <_realloc_r>:
 8008ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	4680      	mov	r8, r0
 8008eca:	4614      	mov	r4, r2
 8008ecc:	460e      	mov	r6, r1
 8008ece:	b921      	cbnz	r1, 8008eda <_realloc_r+0x16>
 8008ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	f7fe bfa1 	b.w	8007e1c <_malloc_r>
 8008eda:	b92a      	cbnz	r2, 8008ee8 <_realloc_r+0x24>
 8008edc:	f7fe ff2a 	bl	8007d34 <_free_r>
 8008ee0:	4625      	mov	r5, r4
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee8:	f000 f841 	bl	8008f6e <_malloc_usable_size_r>
 8008eec:	4284      	cmp	r4, r0
 8008eee:	4607      	mov	r7, r0
 8008ef0:	d802      	bhi.n	8008ef8 <_realloc_r+0x34>
 8008ef2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ef6:	d812      	bhi.n	8008f1e <_realloc_r+0x5a>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4640      	mov	r0, r8
 8008efc:	f7fe ff8e 	bl	8007e1c <_malloc_r>
 8008f00:	4605      	mov	r5, r0
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d0ed      	beq.n	8008ee2 <_realloc_r+0x1e>
 8008f06:	42bc      	cmp	r4, r7
 8008f08:	4622      	mov	r2, r4
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	bf28      	it	cs
 8008f0e:	463a      	movcs	r2, r7
 8008f10:	f7ff ff84 	bl	8008e1c <memcpy>
 8008f14:	4631      	mov	r1, r6
 8008f16:	4640      	mov	r0, r8
 8008f18:	f7fe ff0c 	bl	8007d34 <_free_r>
 8008f1c:	e7e1      	b.n	8008ee2 <_realloc_r+0x1e>
 8008f1e:	4635      	mov	r5, r6
 8008f20:	e7df      	b.n	8008ee2 <_realloc_r+0x1e>

08008f22 <__ascii_wctomb>:
 8008f22:	b149      	cbz	r1, 8008f38 <__ascii_wctomb+0x16>
 8008f24:	2aff      	cmp	r2, #255	; 0xff
 8008f26:	bf85      	ittet	hi
 8008f28:	238a      	movhi	r3, #138	; 0x8a
 8008f2a:	6003      	strhi	r3, [r0, #0]
 8008f2c:	700a      	strbls	r2, [r1, #0]
 8008f2e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f32:	bf98      	it	ls
 8008f34:	2001      	movls	r0, #1
 8008f36:	4770      	bx	lr
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4770      	bx	lr

08008f3c <fiprintf>:
 8008f3c:	b40e      	push	{r1, r2, r3}
 8008f3e:	b503      	push	{r0, r1, lr}
 8008f40:	4601      	mov	r1, r0
 8008f42:	ab03      	add	r3, sp, #12
 8008f44:	4805      	ldr	r0, [pc, #20]	; (8008f5c <fiprintf+0x20>)
 8008f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4a:	6800      	ldr	r0, [r0, #0]
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	f7ff fcef 	bl	8008930 <_vfiprintf_r>
 8008f52:	b002      	add	sp, #8
 8008f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f58:	b003      	add	sp, #12
 8008f5a:	4770      	bx	lr
 8008f5c:	20000064 	.word	0x20000064

08008f60 <abort>:
 8008f60:	b508      	push	{r3, lr}
 8008f62:	2006      	movs	r0, #6
 8008f64:	f000 f834 	bl	8008fd0 <raise>
 8008f68:	2001      	movs	r0, #1
 8008f6a:	f7f9 fad1 	bl	8002510 <_exit>

08008f6e <_malloc_usable_size_r>:
 8008f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f72:	1f18      	subs	r0, r3, #4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bfbc      	itt	lt
 8008f78:	580b      	ldrlt	r3, [r1, r0]
 8008f7a:	18c0      	addlt	r0, r0, r3
 8008f7c:	4770      	bx	lr

08008f7e <_raise_r>:
 8008f7e:	291f      	cmp	r1, #31
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4604      	mov	r4, r0
 8008f84:	460d      	mov	r5, r1
 8008f86:	d904      	bls.n	8008f92 <_raise_r+0x14>
 8008f88:	2316      	movs	r3, #22
 8008f8a:	6003      	str	r3, [r0, #0]
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
 8008f92:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f94:	b112      	cbz	r2, 8008f9c <_raise_r+0x1e>
 8008f96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f9a:	b94b      	cbnz	r3, 8008fb0 <_raise_r+0x32>
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f000 f831 	bl	8009004 <_getpid_r>
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fac:	f000 b818 	b.w	8008fe0 <_kill_r>
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d00a      	beq.n	8008fca <_raise_r+0x4c>
 8008fb4:	1c59      	adds	r1, r3, #1
 8008fb6:	d103      	bne.n	8008fc0 <_raise_r+0x42>
 8008fb8:	2316      	movs	r3, #22
 8008fba:	6003      	str	r3, [r0, #0]
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	e7e7      	b.n	8008f90 <_raise_r+0x12>
 8008fc0:	2400      	movs	r4, #0
 8008fc2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	4798      	blx	r3
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e7e0      	b.n	8008f90 <_raise_r+0x12>
	...

08008fd0 <raise>:
 8008fd0:	4b02      	ldr	r3, [pc, #8]	; (8008fdc <raise+0xc>)
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	f7ff bfd2 	b.w	8008f7e <_raise_r>
 8008fda:	bf00      	nop
 8008fdc:	20000064 	.word	0x20000064

08008fe0 <_kill_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4d07      	ldr	r5, [pc, #28]	; (8009000 <_kill_r+0x20>)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	4611      	mov	r1, r2
 8008fec:	602b      	str	r3, [r5, #0]
 8008fee:	f7f9 fa7f 	bl	80024f0 <_kill>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	d102      	bne.n	8008ffc <_kill_r+0x1c>
 8008ff6:	682b      	ldr	r3, [r5, #0]
 8008ff8:	b103      	cbz	r3, 8008ffc <_kill_r+0x1c>
 8008ffa:	6023      	str	r3, [r4, #0]
 8008ffc:	bd38      	pop	{r3, r4, r5, pc}
 8008ffe:	bf00      	nop
 8009000:	200004c4 	.word	0x200004c4

08009004 <_getpid_r>:
 8009004:	f7f9 ba6c 	b.w	80024e0 <_getpid>

08009008 <_init>:
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900a:	bf00      	nop
 800900c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900e:	bc08      	pop	{r3}
 8009010:	469e      	mov	lr, r3
 8009012:	4770      	bx	lr

08009014 <_fini>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	bf00      	nop
 8009018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901a:	bc08      	pop	{r3}
 800901c:	469e      	mov	lr, r3
 800901e:	4770      	bx	lr
